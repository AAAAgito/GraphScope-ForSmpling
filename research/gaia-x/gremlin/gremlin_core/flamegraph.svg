<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="2908"><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum::&lt;impl serde::de::EnumAccess for &amp;mut bincode::de::Deserializer&lt;R,O&gt;&gt;::variant_seed (2 samples, 0.07%)</title><rect x="0.0000%" y="405" width="0.0688%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="415.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.03%)</title><rect x="0.0344%" y="389" width="0.0344%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2844%" y="399.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.03%)</title><rect x="0.0344%" y="373" width="0.0344%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2844%" y="383.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.03%)</title><rect x="0.0344%" y="357" width="0.0344%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2844%" y="367.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (1 samples, 0.03%)</title><rect x="0.0344%" y="341" width="0.0344%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2844%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (1 samples, 0.03%)</title><rect x="0.0344%" y="325" width="0.0344%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2844%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (1 samples, 0.03%)</title><rect x="0.0344%" y="309" width="0.0344%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2844%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.03%)</title><rect x="0.0344%" y="293" width="0.0344%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2844%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="0.0344%" y="277" width="0.0344%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2844%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.03%)</title><rect x="0.1376%" y="373" width="0.0344%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="0.3876%" y="383.50"></text></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (2 samples, 0.07%)</title><rect x="0.1376%" y="389" width="0.0688%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="2"/><text x="0.3876%" y="399.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1,T2)&gt;::deserialize (1 samples, 0.03%)</title><rect x="0.1719%" y="373" width="0.0344%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="1"/><text x="0.4219%" y="383.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.03%)</title><rect x="0.1719%" y="357" width="0.0344%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="1"/><text x="0.4219%" y="367.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1,T2)&gt;::deserialize::TupleVisitor&lt;T0,T1,T2&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.03%)</title><rect x="0.1719%" y="341" width="0.0344%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="1"/><text x="0.4219%" y="351.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (6 samples, 0.21%)</title><rect x="0.0688%" y="405" width="0.2063%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="6"/><text x="0.3188%" y="415.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u8&gt;::deserialize (2 samples, 0.07%)</title><rect x="0.2063%" y="389" width="0.0688%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="2"/><text x="0.4563%" y="399.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u8 (2 samples, 0.07%)</title><rect x="0.2063%" y="373" width="0.0688%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="2"/><text x="0.4563%" y="383.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (2 samples, 0.07%)</title><rect x="0.2063%" y="357" width="0.0688%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="2"/><text x="0.4563%" y="367.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (2 samples, 0.07%)</title><rect x="0.2063%" y="341" width="0.0688%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="2"/><text x="0.4563%" y="351.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (1 samples, 0.03%)</title><rect x="0.2407%" y="325" width="0.0344%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="1"/><text x="0.4907%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (1 samples, 0.03%)</title><rect x="0.2407%" y="309" width="0.0344%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="1"/><text x="0.4907%" y="319.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (1 samples, 0.03%)</title><rect x="0.2407%" y="293" width="0.0344%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="1"/><text x="0.4907%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.03%)</title><rect x="0.2407%" y="277" width="0.0344%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="0.4907%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="0.2407%" y="261" width="0.0344%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="1"/><text x="0.4907%" y="271.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.03%)</title><rect x="0.3095%" y="389" width="0.0344%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="1"/><text x="0.5595%" y="399.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (3 samples, 0.10%)</title><rect x="0.2751%" y="405" width="0.1032%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="3"/><text x="0.5251%" y="415.50"></text></g><g><title>bincode::config::int::IntEncoding::deserialize_len (1 samples, 0.03%)</title><rect x="0.3439%" y="389" width="0.0344%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="1"/><text x="0.5939%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.03%)</title><rect x="0.3439%" y="373" width="0.0344%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="1"/><text x="0.5939%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="0.3439%" y="357" width="0.0344%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="1"/><text x="0.5939%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.03%)</title><rect x="0.3783%" y="405" width="0.0344%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="1"/><text x="0.6283%" y="415.50"></text></g><g><title>&lt;serde::de::impls::ArrayVisitor&lt;[T: 2]&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.03%)</title><rect x="0.3783%" y="389" width="0.0344%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="1"/><text x="0.6283%" y="399.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.03%)</title><rect x="0.3783%" y="373" width="0.0344%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="1"/><text x="0.6283%" y="383.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for u8&gt;::deserialize::PrimitiveVisitor as serde::de::Visitor&gt;::visit_u8 (11 samples, 0.38%)</title><rect x="3.1981%" y="341" width="0.3783%" height="15" fill="rgb(213,181,19)" fg:x="93" fg:w="11"/><text x="3.4481%" y="351.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (13 samples, 0.45%)</title><rect x="3.9546%" y="261" width="0.4470%" height="15" fill="rgb(254,191,54)" fg:x="115" fg:w="13"/><text x="4.2046%" y="271.50"></text></g><g><title>core::cmp::min (13 samples, 0.45%)</title><rect x="3.9546%" y="245" width="0.4470%" height="15" fill="rgb(241,83,37)" fg:x="115" fg:w="13"/><text x="4.2046%" y="255.50"></text></g><g><title>core::cmp::Ord::min (13 samples, 0.45%)</title><rect x="3.9546%" y="229" width="0.4470%" height="15" fill="rgb(233,36,39)" fg:x="115" fg:w="13"/><text x="4.2046%" y="239.50"></text></g><g><title>core::cmp::min_by (13 samples, 0.45%)</title><rect x="3.9546%" y="213" width="0.4470%" height="15" fill="rgb(226,3,54)" fg:x="115" fg:w="13"/><text x="4.2046%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (12 samples, 0.41%)</title><rect x="4.4017%" y="261" width="0.4127%" height="15" fill="rgb(245,192,40)" fg:x="128" fg:w="12"/><text x="4.6517%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.41%)</title><rect x="4.4017%" y="245" width="0.4127%" height="15" fill="rgb(238,167,29)" fg:x="128" fg:w="12"/><text x="4.6517%" y="255.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (59 samples, 2.03%)</title><rect x="3.1981%" y="389" width="2.0289%" height="15" fill="rgb(232,182,51)" fg:x="93" fg:w="59"/><text x="3.4481%" y="399.50">&lt;..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u8&gt;::deserialize (59 samples, 2.03%)</title><rect x="3.1981%" y="373" width="2.0289%" height="15" fill="rgb(231,60,39)" fg:x="93" fg:w="59"/><text x="3.4481%" y="383.50">s..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u8 (59 samples, 2.03%)</title><rect x="3.1981%" y="357" width="2.0289%" height="15" fill="rgb(208,69,12)" fg:x="93" fg:w="59"/><text x="3.4481%" y="367.50">&lt;..</text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (48 samples, 1.65%)</title><rect x="3.5763%" y="341" width="1.6506%" height="15" fill="rgb(235,93,37)" fg:x="104" fg:w="48"/><text x="3.8263%" y="351.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (48 samples, 1.65%)</title><rect x="3.5763%" y="325" width="1.6506%" height="15" fill="rgb(213,116,39)" fg:x="104" fg:w="48"/><text x="3.8263%" y="335.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (46 samples, 1.58%)</title><rect x="3.6451%" y="309" width="1.5818%" height="15" fill="rgb(222,207,29)" fg:x="106" fg:w="46"/><text x="3.8951%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (40 samples, 1.38%)</title><rect x="3.8514%" y="293" width="1.3755%" height="15" fill="rgb(206,96,30)" fg:x="112" fg:w="40"/><text x="4.1014%" y="303.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (40 samples, 1.38%)</title><rect x="3.8514%" y="277" width="1.3755%" height="15" fill="rgb(218,138,4)" fg:x="112" fg:w="40"/><text x="4.1014%" y="287.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::buffer (12 samples, 0.41%)</title><rect x="4.8143%" y="261" width="0.4127%" height="15" fill="rgb(250,191,14)" fg:x="140" fg:w="12"/><text x="5.0643%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.14%)</title><rect x="5.0894%" y="245" width="0.1376%" height="15" fill="rgb(239,60,40)" fg:x="148" fg:w="4"/><text x="5.3394%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.14%)</title><rect x="5.0894%" y="229" width="0.1376%" height="15" fill="rgb(206,27,48)" fg:x="148" fg:w="4"/><text x="5.3394%" y="239.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (146 samples, 5.02%)</title><rect x="0.4127%" y="405" width="5.0206%" height="15" fill="rgb(225,35,8)" fg:x="12" fg:w="146"/><text x="0.6627%" y="415.50">&lt;&lt;&amp;mut..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.21%)</title><rect x="5.2270%" y="389" width="0.2063%" height="15" fill="rgb(250,213,24)" fg:x="152" fg:w="6"/><text x="5.4770%" y="399.50"></text></g><g><title>&lt;graph_store::table::Row as serde::de::Deserialize&gt;::deserialize (1 samples, 0.03%)</title><rect x="5.4333%" y="405" width="0.0344%" height="15" fill="rgb(247,123,22)" fg:x="158" fg:w="1"/><text x="5.6833%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1 samples, 0.03%)</title><rect x="5.4333%" y="389" width="0.0344%" height="15" fill="rgb(231,138,38)" fg:x="158" fg:w="1"/><text x="5.6833%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="5.4333%" y="373" width="0.0344%" height="15" fill="rgb(231,145,46)" fg:x="158" fg:w="1"/><text x="5.6833%" y="383.50"></text></g><g><title>&lt;graph_store::table::_::&lt;impl serde::de::Deserialize for graph_store::table::SimpleType&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (2 samples, 0.07%)</title><rect x="5.4677%" y="405" width="0.0688%" height="15" fill="rgb(251,118,11)" fg:x="159" fg:w="2"/><text x="5.7177%" y="415.50"></text></g><g><title>serde::de::VariantAccess::newtype_variant (1 samples, 0.03%)</title><rect x="5.5021%" y="389" width="0.0344%" height="15" fill="rgb(217,147,25)" fg:x="160" fg:w="1"/><text x="5.7521%" y="399.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (1 samples, 0.03%)</title><rect x="5.5021%" y="373" width="0.0344%" height="15" fill="rgb(247,81,37)" fg:x="160" fg:w="1"/><text x="5.7521%" y="383.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.03%)</title><rect x="5.5021%" y="357" width="0.0344%" height="15" fill="rgb(209,12,38)" fg:x="160" fg:w="1"/><text x="5.7521%" y="367.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u64&gt;::deserialize (1 samples, 0.03%)</title><rect x="5.5021%" y="341" width="0.0344%" height="15" fill="rgb(227,1,9)" fg:x="160" fg:w="1"/><text x="5.7521%" y="351.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u64 (1 samples, 0.03%)</title><rect x="5.5021%" y="325" width="0.0344%" height="15" fill="rgb(248,47,43)" fg:x="160" fg:w="1"/><text x="5.7521%" y="335.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (1 samples, 0.03%)</title><rect x="5.5021%" y="309" width="0.0344%" height="15" fill="rgb(221,10,30)" fg:x="160" fg:w="1"/><text x="5.7521%" y="319.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u64 (1 samples, 0.03%)</title><rect x="5.5021%" y="293" width="0.0344%" height="15" fill="rgb(210,229,1)" fg:x="160" fg:w="1"/><text x="5.7521%" y="303.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u64 (1 samples, 0.03%)</title><rect x="5.5021%" y="277" width="0.0344%" height="15" fill="rgb(222,148,37)" fg:x="160" fg:w="1"/><text x="5.7521%" y="287.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (1 samples, 0.03%)</title><rect x="5.5021%" y="261" width="0.0344%" height="15" fill="rgb(234,67,33)" fg:x="160" fg:w="1"/><text x="5.7521%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (1 samples, 0.03%)</title><rect x="5.5021%" y="245" width="0.0344%" height="15" fill="rgb(247,98,35)" fg:x="160" fg:w="1"/><text x="5.7521%" y="255.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (1 samples, 0.03%)</title><rect x="5.5021%" y="229" width="0.0344%" height="15" fill="rgb(247,138,52)" fg:x="160" fg:w="1"/><text x="5.7521%" y="239.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::buffer (1 samples, 0.03%)</title><rect x="5.5021%" y="213" width="0.0344%" height="15" fill="rgb(213,79,30)" fg:x="160" fg:w="1"/><text x="5.7521%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.31%)</title><rect x="5.8803%" y="389" width="0.3095%" height="15" fill="rgb(246,177,23)" fg:x="171" fg:w="9"/><text x="6.1303%" y="399.50"></text></g><g><title>core::ptr::write (9 samples, 0.31%)</title><rect x="5.8803%" y="373" width="0.3095%" height="15" fill="rgb(230,62,27)" fg:x="171" fg:w="9"/><text x="6.1303%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="5.9835%" y="357" width="0.2063%" height="15" fill="rgb(216,154,8)" fg:x="174" fg:w="6"/><text x="6.2335%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="6.0179%" y="341" width="0.1719%" height="15" fill="rgb(244,35,45)" fg:x="175" fg:w="5"/><text x="6.2679%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="6.0179%" y="325" width="0.1719%" height="15" fill="rgb(251,115,12)" fg:x="175" fg:w="5"/><text x="6.2679%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="6.0179%" y="309" width="0.1719%" height="15" fill="rgb(240,54,50)" fg:x="175" fg:w="5"/><text x="6.2679%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="6.0867%" y="293" width="0.1032%" height="15" fill="rgb(233,84,52)" fg:x="177" fg:w="3"/><text x="6.3367%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="6.0867%" y="277" width="0.1032%" height="15" fill="rgb(207,117,47)" fg:x="177" fg:w="3"/><text x="6.3367%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="6.0867%" y="261" width="0.1032%" height="15" fill="rgb(249,43,39)" fg:x="177" fg:w="3"/><text x="6.3367%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="6.0867%" y="245" width="0.1032%" height="15" fill="rgb(209,38,44)" fg:x="177" fg:w="3"/><text x="6.3367%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="6.0867%" y="229" width="0.1032%" height="15" fill="rgb(236,212,23)" fg:x="177" fg:w="3"/><text x="6.3367%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="6.0867%" y="213" width="0.1032%" height="15" fill="rgb(242,79,21)" fg:x="177" fg:w="3"/><text x="6.3367%" y="223.50"></text></g><g><title>&lt;petgraph::serde_utils::MappedSequenceVisitor&lt;T,R,F&gt; as serde::de::Visitor&gt;::visit_seq (20 samples, 0.69%)</title><rect x="5.5365%" y="405" width="0.6878%" height="15" fill="rgb(211,96,35)" fg:x="161" fg:w="20"/><text x="5.7865%" y="415.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.03%)</title><rect x="6.1898%" y="389" width="0.0344%" height="15" fill="rgb(253,215,40)" fg:x="180" fg:w="1"/><text x="6.4398%" y="399.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.03%)</title><rect x="6.1898%" y="373" width="0.0344%" height="15" fill="rgb(211,81,21)" fg:x="180" fg:w="1"/><text x="6.4398%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="6.1898%" y="357" width="0.0344%" height="15" fill="rgb(208,190,38)" fg:x="180" fg:w="1"/><text x="6.4398%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (14 samples, 0.48%)</title><rect x="6.7744%" y="373" width="0.4814%" height="15" fill="rgb(235,213,38)" fg:x="197" fg:w="14"/><text x="7.0244%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (42 samples, 1.44%)</title><rect x="6.2930%" y="389" width="1.4443%" height="15" fill="rgb(237,122,38)" fg:x="183" fg:w="42"/><text x="6.5430%" y="399.50"></text></g><g><title>core::ptr::write (14 samples, 0.48%)</title><rect x="7.2558%" y="373" width="0.4814%" height="15" fill="rgb(244,218,35)" fg:x="211" fg:w="14"/><text x="7.5058%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="7.6685%" y="357" width="0.0688%" height="15" fill="rgb(240,68,47)" fg:x="223" fg:w="2"/><text x="7.9185%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="7.7029%" y="341" width="0.0344%" height="15" fill="rgb(210,16,53)" fg:x="224" fg:w="1"/><text x="7.9529%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="7.7029%" y="325" width="0.0344%" height="15" fill="rgb(235,124,12)" fg:x="224" fg:w="1"/><text x="7.9529%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="7.7029%" y="309" width="0.0344%" height="15" fill="rgb(224,169,11)" fg:x="224" fg:w="1"/><text x="7.9529%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="7.7029%" y="293" width="0.0344%" height="15" fill="rgb(250,166,2)" fg:x="224" fg:w="1"/><text x="7.9529%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="7.7029%" y="277" width="0.0344%" height="15" fill="rgb(242,216,29)" fg:x="224" fg:w="1"/><text x="7.9529%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="7.7029%" y="261" width="0.0344%" height="15" fill="rgb(230,116,27)" fg:x="224" fg:w="1"/><text x="7.9529%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="7.7029%" y="245" width="0.0344%" height="15" fill="rgb(228,99,48)" fg:x="224" fg:w="1"/><text x="7.9529%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="7.7029%" y="229" width="0.0344%" height="15" fill="rgb(253,11,6)" fg:x="224" fg:w="1"/><text x="7.9529%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="7.7029%" y="213" width="0.0344%" height="15" fill="rgb(247,143,39)" fg:x="224" fg:w="1"/><text x="7.9529%" y="223.50"></text></g><g><title>serde::__private::size_hint::cautious (1 samples, 0.03%)</title><rect x="7.7373%" y="389" width="0.0344%" height="15" fill="rgb(236,97,10)" fg:x="225" fg:w="1"/><text x="7.9873%" y="399.50"></text></g><g><title>core::cmp::min (1 samples, 0.03%)</title><rect x="7.7373%" y="373" width="0.0344%" height="15" fill="rgb(233,208,19)" fg:x="225" fg:w="1"/><text x="7.9873%" y="383.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.03%)</title><rect x="7.7373%" y="357" width="0.0344%" height="15" fill="rgb(216,164,2)" fg:x="225" fg:w="1"/><text x="7.9873%" y="367.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.03%)</title><rect x="7.7373%" y="341" width="0.0344%" height="15" fill="rgb(220,129,5)" fg:x="225" fg:w="1"/><text x="7.9873%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (55 samples, 1.89%)</title><rect x="6.2242%" y="405" width="1.8913%" height="15" fill="rgb(242,17,10)" fg:x="181" fg:w="55"/><text x="6.4742%" y="415.50">&lt;..</text></g><g><title>serde::de::SeqAccess::next_element (10 samples, 0.34%)</title><rect x="7.7717%" y="389" width="0.3439%" height="15" fill="rgb(242,107,0)" fg:x="226" fg:w="10"/><text x="8.0217%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="8.2531%" y="357" width="0.0344%" height="15" fill="rgb(251,28,31)" fg:x="240" fg:w="1"/><text x="8.5031%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.07%)</title><rect x="8.2875%" y="357" width="0.0688%" height="15" fill="rgb(233,223,10)" fg:x="241" fg:w="2"/><text x="8.5375%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.28%)</title><rect x="8.1155%" y="405" width="0.2751%" height="15" fill="rgb(215,21,27)" fg:x="236" fg:w="8"/><text x="8.3655%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.24%)</title><rect x="8.1499%" y="389" width="0.2407%" height="15" fill="rgb(232,23,21)" fg:x="237" fg:w="7"/><text x="8.3999%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.24%)</title><rect x="8.1499%" y="373" width="0.2407%" height="15" fill="rgb(244,5,23)" fg:x="237" fg:w="7"/><text x="8.3999%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="8.3563%" y="357" width="0.0344%" height="15" fill="rgb(226,81,46)" fg:x="243" fg:w="1"/><text x="8.6063%" y="367.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (18 samples, 0.62%)</title><rect x="8.3906%" y="405" width="0.6190%" height="15" fill="rgb(247,70,30)" fg:x="244" fg:w="18"/><text x="8.6406%" y="415.50"></text></g><g><title>std::sys::unix::fs::File::read (18 samples, 0.62%)</title><rect x="8.3906%" y="389" width="0.6190%" height="15" fill="rgb(212,68,19)" fg:x="244" fg:w="18"/><text x="8.6406%" y="399.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (18 samples, 0.62%)</title><rect x="8.3906%" y="373" width="0.6190%" height="15" fill="rgb(240,187,13)" fg:x="244" fg:w="18"/><text x="8.6406%" y="383.50"></text></g><g><title>__libc_read (18 samples, 0.62%)</title><rect x="8.3906%" y="357" width="0.6190%" height="15" fill="rgb(223,113,26)" fg:x="244" fg:w="18"/><text x="8.6406%" y="367.50"></text></g><g><title>__libc_read (18 samples, 0.62%)</title><rect x="8.3906%" y="341" width="0.6190%" height="15" fill="rgb(206,192,2)" fg:x="244" fg:w="18"/><text x="8.6406%" y="351.50"></text></g><g><title>[unknown] (18 samples, 0.62%)</title><rect x="8.3906%" y="325" width="0.6190%" height="15" fill="rgb(241,108,4)" fg:x="244" fg:w="18"/><text x="8.6406%" y="335.50"></text></g><g><title>[unknown] (17 samples, 0.58%)</title><rect x="8.4250%" y="309" width="0.5846%" height="15" fill="rgb(247,173,49)" fg:x="245" fg:w="17"/><text x="8.6750%" y="319.50"></text></g><g><title>[unknown] (17 samples, 0.58%)</title><rect x="8.4250%" y="293" width="0.5846%" height="15" fill="rgb(224,114,35)" fg:x="245" fg:w="17"/><text x="8.6750%" y="303.50"></text></g><g><title>[unknown] (15 samples, 0.52%)</title><rect x="8.4938%" y="277" width="0.5158%" height="15" fill="rgb(245,159,27)" fg:x="247" fg:w="15"/><text x="8.7438%" y="287.50"></text></g><g><title>[unknown] (15 samples, 0.52%)</title><rect x="8.4938%" y="261" width="0.5158%" height="15" fill="rgb(245,172,44)" fg:x="247" fg:w="15"/><text x="8.7438%" y="271.50"></text></g><g><title>[unknown] (15 samples, 0.52%)</title><rect x="8.4938%" y="245" width="0.5158%" height="15" fill="rgb(236,23,11)" fg:x="247" fg:w="15"/><text x="8.7438%" y="255.50"></text></g><g><title>[unknown] (15 samples, 0.52%)</title><rect x="8.4938%" y="229" width="0.5158%" height="15" fill="rgb(205,117,38)" fg:x="247" fg:w="15"/><text x="8.7438%" y="239.50"></text></g><g><title>[unknown] (15 samples, 0.52%)</title><rect x="8.4938%" y="213" width="0.5158%" height="15" fill="rgb(237,72,25)" fg:x="247" fg:w="15"/><text x="8.7438%" y="223.50"></text></g><g><title>[unknown] (15 samples, 0.52%)</title><rect x="8.4938%" y="197" width="0.5158%" height="15" fill="rgb(244,70,9)" fg:x="247" fg:w="15"/><text x="8.7438%" y="207.50"></text></g><g><title>[unknown] (15 samples, 0.52%)</title><rect x="8.4938%" y="181" width="0.5158%" height="15" fill="rgb(217,125,39)" fg:x="247" fg:w="15"/><text x="8.7438%" y="191.50"></text></g><g><title>[unknown] (15 samples, 0.52%)</title><rect x="8.4938%" y="165" width="0.5158%" height="15" fill="rgb(235,36,10)" fg:x="247" fg:w="15"/><text x="8.7438%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="8.8377%" y="149" width="0.1719%" height="15" fill="rgb(251,123,47)" fg:x="257" fg:w="5"/><text x="9.0877%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="8.8377%" y="133" width="0.1719%" height="15" fill="rgb(221,13,13)" fg:x="257" fg:w="5"/><text x="9.0877%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="8.8377%" y="117" width="0.1719%" height="15" fill="rgb(238,131,9)" fg:x="257" fg:w="5"/><text x="9.0877%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="8.8377%" y="101" width="0.1719%" height="15" fill="rgb(211,50,8)" fg:x="257" fg:w="5"/><text x="9.0877%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="8.8377%" y="85" width="0.1719%" height="15" fill="rgb(245,182,24)" fg:x="257" fg:w="5"/><text x="9.0877%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="8.8377%" y="69" width="0.1719%" height="15" fill="rgb(242,14,37)" fg:x="257" fg:w="5"/><text x="9.0877%" y="79.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="8.8377%" y="53" width="0.1719%" height="15" fill="rgb(246,228,12)" fg:x="257" fg:w="5"/><text x="9.0877%" y="63.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="8.8377%" y="37" width="0.1719%" height="15" fill="rgb(213,55,15)" fg:x="257" fg:w="5"/><text x="9.0877%" y="47.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (11 samples, 0.38%)</title><rect x="9.2847%" y="373" width="0.3783%" height="15" fill="rgb(209,9,3)" fg:x="270" fg:w="11"/><text x="9.5347%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as pegasus_common::codec::Decode&gt;::read_from (15 samples, 0.52%)</title><rect x="9.2503%" y="389" width="0.5158%" height="15" fill="rgb(230,59,30)" fg:x="269" fg:w="15"/><text x="9.5003%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.10%)</title><rect x="9.6630%" y="373" width="0.1032%" height="15" fill="rgb(209,121,21)" fg:x="281" fg:w="3"/><text x="9.9130%" y="383.50"></text></g><g><title>core::ptr::write (3 samples, 0.10%)</title><rect x="9.6630%" y="357" width="0.1032%" height="15" fill="rgb(220,109,13)" fg:x="281" fg:w="3"/><text x="9.9130%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="9.7662%" y="389" width="0.1032%" height="15" fill="rgb(232,18,1)" fg:x="284" fg:w="3"/><text x="10.0162%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="9.7662%" y="373" width="0.1032%" height="15" fill="rgb(215,41,42)" fg:x="284" fg:w="3"/><text x="10.0162%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="9.7662%" y="357" width="0.1032%" height="15" fill="rgb(224,123,36)" fg:x="284" fg:w="3"/><text x="10.0162%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="9.7662%" y="341" width="0.1032%" height="15" fill="rgb(240,125,3)" fg:x="284" fg:w="3"/><text x="10.0162%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="9.7662%" y="325" width="0.1032%" height="15" fill="rgb(205,98,50)" fg:x="284" fg:w="3"/><text x="10.0162%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="9.7662%" y="309" width="0.1032%" height="15" fill="rgb(205,185,37)" fg:x="284" fg:w="3"/><text x="10.0162%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="9.7662%" y="293" width="0.1032%" height="15" fill="rgb(238,207,15)" fg:x="284" fg:w="3"/><text x="10.0162%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="9.7662%" y="277" width="0.1032%" height="15" fill="rgb(213,199,42)" fg:x="284" fg:w="3"/><text x="10.0162%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="9.7662%" y="261" width="0.1032%" height="15" fill="rgb(235,201,11)" fg:x="284" fg:w="3"/><text x="10.0162%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="9.7662%" y="245" width="0.1032%" height="15" fill="rgb(207,46,11)" fg:x="284" fg:w="3"/><text x="10.0162%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="9.8006%" y="229" width="0.0688%" height="15" fill="rgb(241,35,35)" fg:x="285" fg:w="2"/><text x="10.0506%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="9.8349%" y="213" width="0.0344%" height="15" fill="rgb(243,32,47)" fg:x="286" fg:w="1"/><text x="10.0849%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="9.8349%" y="197" width="0.0344%" height="15" fill="rgb(247,202,23)" fg:x="286" fg:w="1"/><text x="10.0849%" y="207.50"></text></g><g><title>__libc_read (1 samples, 0.03%)</title><rect x="9.8693%" y="389" width="0.0344%" height="15" fill="rgb(219,102,11)" fg:x="287" fg:w="1"/><text x="10.1193%" y="399.50"></text></g><g><title>__libc_read (1 samples, 0.03%)</title><rect x="9.8693%" y="373" width="0.0344%" height="15" fill="rgb(243,110,44)" fg:x="287" fg:w="1"/><text x="10.1193%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="9.8693%" y="357" width="0.0344%" height="15" fill="rgb(222,74,54)" fg:x="287" fg:w="1"/><text x="10.1193%" y="367.50"></text></g><g><title>rust_alloc (3 samples, 0.10%)</title><rect x="9.9037%" y="389" width="0.1032%" height="15" fill="rgb(216,99,12)" fg:x="288" fg:w="3"/><text x="10.1537%" y="399.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::alloc&lt;(snmalloc::ZeroMem)1&gt; (1 samples, 0.03%)</title><rect x="10.0413%" y="373" width="0.0344%" height="15" fill="rgb(226,22,26)" fg:x="292" fg:w="1"/><text x="10.2913%" y="383.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_alloc&lt;(snmalloc::ZeroMem)1&gt; (1 samples, 0.03%)</title><rect x="10.0413%" y="357" width="0.0344%" height="15" fill="rgb(217,163,10)" fg:x="292" fg:w="1"/><text x="10.2913%" y="367.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_alloc_inner&lt;(snmalloc::ZeroMem)1&gt; (1 samples, 0.03%)</title><rect x="10.0413%" y="341" width="0.0344%" height="15" fill="rgb(213,25,53)" fg:x="292" fg:w="1"/><text x="10.2913%" y="351.50"></text></g><g><title>pal_zero&lt;snmalloc::PALLinux&gt; (1 samples, 0.03%)</title><rect x="10.0413%" y="325" width="0.0344%" height="15" fill="rgb(252,105,26)" fg:x="292" fg:w="1"/><text x="10.2913%" y="335.50"></text></g><g><title>snmalloc::PALLinux::zero&lt;false&gt; (1 samples, 0.03%)</title><rect x="10.0413%" y="309" width="0.0344%" height="15" fill="rgb(220,39,43)" fg:x="292" fg:w="1"/><text x="10.2913%" y="319.50"></text></g><g><title>rust_alloc_zeroed (1 samples, 0.03%)</title><rect x="10.0413%" y="293" width="0.0344%" height="15" fill="rgb(229,68,48)" fg:x="292" fg:w="1"/><text x="10.2913%" y="303.50"></text></g><g><title>[benchmark1_q_complete] (1 samples, 0.03%)</title><rect x="10.0413%" y="277" width="0.0344%" height="15" fill="rgb(252,8,32)" fg:x="292" fg:w="1"/><text x="10.2913%" y="287.50"></text></g><g><title>rust_alloc_zeroed (3 samples, 0.10%)</title><rect x="10.0069%" y="389" width="0.1032%" height="15" fill="rgb(223,20,43)" fg:x="291" fg:w="3"/><text x="10.2569%" y="399.50"></text></g><g><title>snmalloc::ThreadAllocCommon::get_noncachable (1 samples, 0.03%)</title><rect x="10.0757%" y="373" width="0.0344%" height="15" fill="rgb(229,81,49)" fg:x="293" fg:w="1"/><text x="10.3257%" y="383.50"></text></g><g><title>[unknown] (33 samples, 1.13%)</title><rect x="9.0096%" y="405" width="1.1348%" height="15" fill="rgb(236,28,36)" fg:x="262" fg:w="33"/><text x="9.2596%" y="415.50"></text></g><g><title>rust_dealloc (1 samples, 0.03%)</title><rect x="10.1100%" y="389" width="0.0344%" height="15" fill="rgb(249,185,26)" fg:x="294" fg:w="1"/><text x="10.3600%" y="399.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::dealloc (1 samples, 0.03%)</title><rect x="10.1100%" y="373" width="0.0344%" height="15" fill="rgb(249,174,33)" fg:x="294" fg:w="1"/><text x="10.3600%" y="383.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_unchecked (1 samples, 0.03%)</title><rect x="10.1100%" y="357" width="0.0344%" height="15" fill="rgb(233,201,37)" fg:x="294" fg:w="1"/><text x="10.3600%" y="367.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_checked_chunkmap (1 samples, 0.03%)</title><rect x="10.1100%" y="341" width="0.0344%" height="15" fill="rgb(221,78,26)" fg:x="294" fg:w="1"/><text x="10.3600%" y="351.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_checked_sizeclass (1 samples, 0.03%)</title><rect x="10.1100%" y="325" width="0.0344%" height="15" fill="rgb(250,127,30)" fg:x="294" fg:w="1"/><text x="10.3600%" y="335.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_start (1 samples, 0.03%)</title><rect x="10.1100%" y="309" width="0.0344%" height="15" fill="rgb(230,49,44)" fg:x="294" fg:w="1"/><text x="10.3600%" y="319.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_offseted (1 samples, 0.03%)</title><rect x="10.1100%" y="293" width="0.0344%" height="15" fill="rgb(229,67,23)" fg:x="294" fg:w="1"/><text x="10.3600%" y="303.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_offseted_inner (1 samples, 0.03%)</title><rect x="10.1100%" y="277" width="0.0344%" height="15" fill="rgb(249,83,47)" fg:x="294" fg:w="1"/><text x="10.3600%" y="287.50"></text></g><g><title>snmalloc::Slab::dealloc_fast (1 samples, 0.03%)</title><rect x="10.1100%" y="261" width="0.0344%" height="15" fill="rgb(215,43,3)" fg:x="294" fg:w="1"/><text x="10.3600%" y="271.50"></text></g><g><title>snmalloc::Superslab::get_meta&lt;(snmalloc::capptr_bounds)1&gt; (1 samples, 0.03%)</title><rect x="10.1100%" y="245" width="0.0344%" height="15" fill="rgb(238,154,13)" fg:x="294" fg:w="1"/><text x="10.3600%" y="255.50"></text></g><g><title>snmalloc::ModArray&lt;64ul, snmalloc::Metaslab&gt;::operator[] (1 samples, 0.03%)</title><rect x="10.1100%" y="229" width="0.0344%" height="15" fill="rgb(219,56,2)" fg:x="294" fg:w="1"/><text x="10.3600%" y="239.50"></text></g><g><title>__GI___clone (26 samples, 0.89%)</title><rect x="10.1444%" y="405" width="0.8941%" height="15" fill="rgb(233,0,4)" fg:x="295" fg:w="26"/><text x="10.3944%" y="415.50"></text></g><g><title>[unknown] (26 samples, 0.89%)</title><rect x="10.1444%" y="389" width="0.8941%" height="15" fill="rgb(235,30,7)" fg:x="295" fg:w="26"/><text x="10.3944%" y="399.50"></text></g><g><title>[unknown] (25 samples, 0.86%)</title><rect x="10.1788%" y="373" width="0.8597%" height="15" fill="rgb(250,79,13)" fg:x="296" fg:w="25"/><text x="10.4288%" y="383.50"></text></g><g><title>[unknown] (25 samples, 0.86%)</title><rect x="10.1788%" y="357" width="0.8597%" height="15" fill="rgb(211,146,34)" fg:x="296" fg:w="25"/><text x="10.4288%" y="367.50"></text></g><g><title>[unknown] (25 samples, 0.86%)</title><rect x="10.1788%" y="341" width="0.8597%" height="15" fill="rgb(228,22,38)" fg:x="296" fg:w="25"/><text x="10.4288%" y="351.50"></text></g><g><title>[unknown] (25 samples, 0.86%)</title><rect x="10.1788%" y="325" width="0.8597%" height="15" fill="rgb(235,168,5)" fg:x="296" fg:w="25"/><text x="10.4288%" y="335.50"></text></g><g><title>[unknown] (25 samples, 0.86%)</title><rect x="10.1788%" y="309" width="0.8597%" height="15" fill="rgb(221,155,16)" fg:x="296" fg:w="25"/><text x="10.4288%" y="319.50"></text></g><g><title>[unknown] (25 samples, 0.86%)</title><rect x="10.1788%" y="293" width="0.8597%" height="15" fill="rgb(215,215,53)" fg:x="296" fg:w="25"/><text x="10.4288%" y="303.50"></text></g><g><title>[unknown] (25 samples, 0.86%)</title><rect x="10.1788%" y="277" width="0.8597%" height="15" fill="rgb(223,4,10)" fg:x="296" fg:w="25"/><text x="10.4288%" y="287.50"></text></g><g><title>__rg_alloc_zeroed (1 samples, 0.03%)</title><rect x="11.0385%" y="405" width="0.0344%" height="15" fill="rgb(234,103,6)" fg:x="321" fg:w="1"/><text x="11.2885%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc_zeroed (1 samples, 0.03%)</title><rect x="11.0385%" y="389" width="0.0344%" height="15" fill="rgb(227,97,0)" fg:x="321" fg:w="1"/><text x="11.2885%" y="399.50"></text></g><g><title>_start (1 samples, 0.03%)</title><rect x="11.0729%" y="405" width="0.0344%" height="15" fill="rgb(234,150,53)" fg:x="322" fg:w="1"/><text x="11.3229%" y="415.50"></text></g><g><title>_dl_start (1 samples, 0.03%)</title><rect x="11.0729%" y="389" width="0.0344%" height="15" fill="rgb(228,201,54)" fg:x="322" fg:w="1"/><text x="11.3229%" y="399.50"></text></g><g><title>_dl_start_final (1 samples, 0.03%)</title><rect x="11.0729%" y="373" width="0.0344%" height="15" fill="rgb(222,22,37)" fg:x="322" fg:w="1"/><text x="11.3229%" y="383.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.03%)</title><rect x="11.0729%" y="357" width="0.0344%" height="15" fill="rgb(237,53,32)" fg:x="322" fg:w="1"/><text x="11.3229%" y="367.50"></text></g><g><title>dl_main (1 samples, 0.03%)</title><rect x="11.0729%" y="341" width="0.0344%" height="15" fill="rgb(233,25,53)" fg:x="322" fg:w="1"/><text x="11.3229%" y="351.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.03%)</title><rect x="11.0729%" y="325" width="0.0344%" height="15" fill="rgb(210,40,34)" fg:x="322" fg:w="1"/><text x="11.3229%" y="335.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.03%)</title><rect x="11.0729%" y="309" width="0.0344%" height="15" fill="rgb(241,220,44)" fg:x="322" fg:w="1"/><text x="11.3229%" y="319.50"></text></g><g><title>elf_machine_rela_relative (1 samples, 0.03%)</title><rect x="11.0729%" y="293" width="0.0344%" height="15" fill="rgb(235,28,35)" fg:x="322" fg:w="1"/><text x="11.3229%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="11.0729%" y="277" width="0.0344%" height="15" fill="rgb(210,56,17)" fg:x="322" fg:w="1"/><text x="11.3229%" y="287.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.03%)</title><rect x="11.1761%" y="373" width="0.0344%" height="15" fill="rgb(224,130,29)" fg:x="325" fg:w="1"/><text x="11.4261%" y="383.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.03%)</title><rect x="11.1761%" y="357" width="0.0344%" height="15" fill="rgb(235,212,8)" fg:x="325" fg:w="1"/><text x="11.4261%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.03%)</title><rect x="11.1761%" y="341" width="0.0344%" height="15" fill="rgb(223,33,50)" fg:x="325" fg:w="1"/><text x="11.4261%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="11.1761%" y="325" width="0.0344%" height="15" fill="rgb(219,149,13)" fg:x="325" fg:w="1"/><text x="11.4261%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1 samples, 0.03%)</title><rect x="11.1761%" y="309" width="0.0344%" height="15" fill="rgb(250,156,29)" fg:x="325" fg:w="1"/><text x="11.4261%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="11.1761%" y="293" width="0.0344%" height="15" fill="rgb(216,193,19)" fg:x="325" fg:w="1"/><text x="11.4261%" y="303.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.03%)</title><rect x="11.1761%" y="277" width="0.0344%" height="15" fill="rgb(216,135,14)" fg:x="325" fg:w="1"/><text x="11.4261%" y="287.50"></text></g><g><title>&lt;alloc::string::String as pegasus_common::codec::Decode&gt;::read_from (2 samples, 0.07%)</title><rect x="11.1761%" y="389" width="0.0688%" height="15" fill="rgb(241,47,5)" fg:x="325" fg:w="2"/><text x="11.4261%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (1 samples, 0.03%)</title><rect x="11.2105%" y="373" width="0.0344%" height="15" fill="rgb(233,42,35)" fg:x="326" fg:w="1"/><text x="11.4605%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.03%)</title><rect x="11.2105%" y="357" width="0.0344%" height="15" fill="rgb(231,13,6)" fg:x="326" fg:w="1"/><text x="11.4605%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="11.2105%" y="341" width="0.0344%" height="15" fill="rgb(207,181,40)" fg:x="326" fg:w="1"/><text x="11.4605%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="11.2105%" y="325" width="0.0344%" height="15" fill="rgb(254,173,49)" fg:x="326" fg:w="1"/><text x="11.4605%" y="335.50"></text></g><g><title>dyn_type::serde::&lt;impl pegasus_common::codec::Decode for dyn_type::object::Object&gt;::read_from (5 samples, 0.17%)</title><rect x="11.1073%" y="405" width="0.1719%" height="15" fill="rgb(221,1,38)" fg:x="323" fg:w="5"/><text x="11.3573%" y="415.50"></text></g><g><title>dyn_type::serde::&lt;impl pegasus_common::codec::Decode for dyn_type::object::Primitives&gt;::read_from (1 samples, 0.03%)</title><rect x="11.2448%" y="389" width="0.0344%" height="15" fill="rgb(206,124,46)" fg:x="327" fg:w="1"/><text x="11.4948%" y="399.50"></text></g><g><title>pegasus_common::io::ReadExt::read_u8 (1 samples, 0.03%)</title><rect x="11.2448%" y="373" width="0.0344%" height="15" fill="rgb(249,21,11)" fg:x="327" fg:w="1"/><text x="11.4948%" y="383.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u8 (1 samples, 0.03%)</title><rect x="11.2448%" y="357" width="0.0344%" height="15" fill="rgb(222,201,40)" fg:x="327" fg:w="1"/><text x="11.4948%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (1 samples, 0.03%)</title><rect x="11.2448%" y="341" width="0.0344%" height="15" fill="rgb(235,61,29)" fg:x="327" fg:w="1"/><text x="11.4948%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.03%)</title><rect x="11.2448%" y="325" width="0.0344%" height="15" fill="rgb(219,207,3)" fg:x="327" fg:w="1"/><text x="11.4948%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.03%)</title><rect x="11.2448%" y="309" width="0.0344%" height="15" fill="rgb(222,56,46)" fg:x="327" fg:w="1"/><text x="11.4948%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="11.2448%" y="293" width="0.0344%" height="15" fill="rgb(239,76,54)" fg:x="327" fg:w="1"/><text x="11.4948%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="11.2448%" y="277" width="0.0344%" height="15" fill="rgb(231,124,27)" fg:x="327" fg:w="1"/><text x="11.4948%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="11.2448%" y="261" width="0.0344%" height="15" fill="rgb(249,195,6)" fg:x="327" fg:w="1"/><text x="11.4948%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="11.2448%" y="245" width="0.0344%" height="15" fill="rgb(237,174,47)" fg:x="327" fg:w="1"/><text x="11.4948%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.03%)</title><rect x="11.2448%" y="229" width="0.0344%" height="15" fill="rgb(206,201,31)" fg:x="327" fg:w="1"/><text x="11.4948%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="11.4168%" y="325" width="0.0344%" height="15" fill="rgb(231,57,52)" fg:x="332" fg:w="1"/><text x="11.6668%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="11.4168%" y="309" width="0.0344%" height="15" fill="rgb(248,177,22)" fg:x="332" fg:w="1"/><text x="11.6668%" y="319.50"></text></g><g><title>hashbrown::map::make_insert_hash (4 samples, 0.14%)</title><rect x="11.4168%" y="389" width="0.1376%" height="15" fill="rgb(215,211,37)" fg:x="332" fg:w="4"/><text x="11.6668%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.14%)</title><rect x="11.4168%" y="373" width="0.1376%" height="15" fill="rgb(241,128,51)" fg:x="332" fg:w="4"/><text x="11.6668%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.14%)</title><rect x="11.4168%" y="357" width="0.1376%" height="15" fill="rgb(227,165,31)" fg:x="332" fg:w="4"/><text x="11.6668%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.14%)</title><rect x="11.4168%" y="341" width="0.1376%" height="15" fill="rgb(228,167,24)" fg:x="332" fg:w="4"/><text x="11.6668%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.10%)</title><rect x="11.4512%" y="325" width="0.1032%" height="15" fill="rgb(228,143,12)" fg:x="333" fg:w="3"/><text x="11.7012%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="11.5199%" y="309" width="0.0344%" height="15" fill="rgb(249,149,8)" fg:x="335" fg:w="1"/><text x="11.7699%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="11.7263%" y="357" width="0.0344%" height="15" fill="rgb(243,35,44)" fg:x="341" fg:w="1"/><text x="11.9763%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="11.7263%" y="341" width="0.0344%" height="15" fill="rgb(246,89,9)" fg:x="341" fg:w="1"/><text x="11.9763%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="11.7263%" y="325" width="0.0344%" height="15" fill="rgb(233,213,13)" fg:x="341" fg:w="1"/><text x="11.9763%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.03%)</title><rect x="11.7263%" y="309" width="0.0344%" height="15" fill="rgb(233,141,41)" fg:x="341" fg:w="1"/><text x="11.9763%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.03%)</title><rect x="11.7607%" y="309" width="0.0344%" height="15" fill="rgb(239,167,4)" fg:x="342" fg:w="1"/><text x="12.0107%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 0.83%)</title><rect x="11.2792%" y="405" width="0.8253%" height="15" fill="rgb(209,217,16)" fg:x="328" fg:w="24"/><text x="11.5292%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (16 samples, 0.55%)</title><rect x="11.5543%" y="389" width="0.5502%" height="15" fill="rgb(219,88,35)" fg:x="336" fg:w="16"/><text x="11.8043%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16 samples, 0.55%)</title><rect x="11.5543%" y="373" width="0.5502%" height="15" fill="rgb(220,193,23)" fg:x="336" fg:w="16"/><text x="11.8043%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (10 samples, 0.34%)</title><rect x="11.7607%" y="357" width="0.3439%" height="15" fill="rgb(230,90,52)" fg:x="342" fg:w="10"/><text x="12.0107%" y="367.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (10 samples, 0.34%)</title><rect x="11.7607%" y="341" width="0.3439%" height="15" fill="rgb(252,106,19)" fg:x="342" fg:w="10"/><text x="12.0107%" y="351.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (10 samples, 0.34%)</title><rect x="11.7607%" y="325" width="0.3439%" height="15" fill="rgb(206,74,20)" fg:x="342" fg:w="10"/><text x="12.0107%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (9 samples, 0.31%)</title><rect x="11.7950%" y="309" width="0.3095%" height="15" fill="rgb(230,138,44)" fg:x="343" fg:w="9"/><text x="12.0450%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (9 samples, 0.31%)</title><rect x="11.7950%" y="293" width="0.3095%" height="15" fill="rgb(235,182,43)" fg:x="343" fg:w="9"/><text x="12.0450%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.31%)</title><rect x="11.7950%" y="277" width="0.3095%" height="15" fill="rgb(242,16,51)" fg:x="343" fg:w="9"/><text x="12.0450%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="12.2765%" y="325" width="0.0344%" height="15" fill="rgb(248,9,4)" fg:x="357" fg:w="1"/><text x="12.5265%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.10%)</title><rect x="12.2421%" y="389" width="0.1032%" height="15" fill="rgb(210,31,22)" fg:x="356" fg:w="3"/><text x="12.4921%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.10%)</title><rect x="12.2421%" y="373" width="0.1032%" height="15" fill="rgb(239,54,39)" fg:x="356" fg:w="3"/><text x="12.4921%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.10%)</title><rect x="12.2421%" y="357" width="0.1032%" height="15" fill="rgb(230,99,41)" fg:x="356" fg:w="3"/><text x="12.4921%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.07%)</title><rect x="12.2765%" y="341" width="0.0688%" height="15" fill="rgb(253,106,12)" fg:x="357" fg:w="2"/><text x="12.5265%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="12.3109%" y="325" width="0.0344%" height="15" fill="rgb(213,46,41)" fg:x="358" fg:w="1"/><text x="12.5609%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.31%)</title><rect x="12.1045%" y="405" width="0.3095%" height="15" fill="rgb(215,133,35)" fg:x="352" fg:w="9"/><text x="12.3545%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.07%)</title><rect x="12.3453%" y="389" width="0.0688%" height="15" fill="rgb(213,28,5)" fg:x="359" fg:w="2"/><text x="12.5953%" y="399.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.07%)</title><rect x="12.3453%" y="373" width="0.0688%" height="15" fill="rgb(215,77,49)" fg:x="359" fg:w="2"/><text x="12.5953%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.07%)</title><rect x="12.4828%" y="389" width="0.0688%" height="15" fill="rgb(248,100,22)" fg:x="363" fg:w="2"/><text x="12.7328%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.07%)</title><rect x="12.4828%" y="373" width="0.0688%" height="15" fill="rgb(208,67,9)" fg:x="363" fg:w="2"/><text x="12.7328%" y="383.50"></text></g><g><title>core::ptr::write (2 samples, 0.07%)</title><rect x="12.4828%" y="357" width="0.0688%" height="15" fill="rgb(219,133,21)" fg:x="363" fg:w="2"/><text x="12.7328%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (5 samples, 0.17%)</title><rect x="12.4140%" y="405" width="0.1719%" height="15" fill="rgb(246,46,29)" fg:x="361" fg:w="5"/><text x="12.6640%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (1 samples, 0.03%)</title><rect x="12.5516%" y="389" width="0.0344%" height="15" fill="rgb(246,185,52)" fg:x="365" fg:w="1"/><text x="12.8016%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (1 samples, 0.03%)</title><rect x="12.5516%" y="373" width="0.0344%" height="15" fill="rgb(252,136,11)" fg:x="365" fg:w="1"/><text x="12.8016%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (1 samples, 0.03%)</title><rect x="12.5516%" y="357" width="0.0344%" height="15" fill="rgb(219,138,53)" fg:x="365" fg:w="1"/><text x="12.8016%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="12.5860%" y="373" width="0.0344%" height="15" fill="rgb(211,51,23)" fg:x="366" fg:w="1"/><text x="12.8360%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="12.5860%" y="357" width="0.0344%" height="15" fill="rgb(247,221,28)" fg:x="366" fg:w="1"/><text x="12.8360%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.03%)</title><rect x="12.5860%" y="341" width="0.0344%" height="15" fill="rgb(251,222,45)" fg:x="366" fg:w="1"/><text x="12.8360%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.03%)</title><rect x="12.5860%" y="325" width="0.0344%" height="15" fill="rgb(217,162,53)" fg:x="366" fg:w="1"/><text x="12.8360%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.24%)</title><rect x="12.5860%" y="405" width="0.2407%" height="15" fill="rgb(229,93,14)" fg:x="366" fg:w="7"/><text x="12.8360%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (7 samples, 0.24%)</title><rect x="12.5860%" y="389" width="0.2407%" height="15" fill="rgb(209,67,49)" fg:x="366" fg:w="7"/><text x="12.8360%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (6 samples, 0.21%)</title><rect x="12.6204%" y="373" width="0.2063%" height="15" fill="rgb(213,87,29)" fg:x="367" fg:w="6"/><text x="12.8704%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (6 samples, 0.21%)</title><rect x="12.6204%" y="357" width="0.2063%" height="15" fill="rgb(205,151,52)" fg:x="367" fg:w="6"/><text x="12.8704%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.21%)</title><rect x="12.6204%" y="341" width="0.2063%" height="15" fill="rgb(253,215,39)" fg:x="367" fg:w="6"/><text x="12.8704%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="12.6204%" y="325" width="0.2063%" height="15" fill="rgb(221,220,41)" fg:x="367" fg:w="6"/><text x="12.8704%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="12.6204%" y="309" width="0.2063%" height="15" fill="rgb(218,133,21)" fg:x="367" fg:w="6"/><text x="12.8704%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="12.6204%" y="293" width="0.2063%" height="15" fill="rgb(221,193,43)" fg:x="367" fg:w="6"/><text x="12.8704%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="12.6547%" y="277" width="0.1719%" height="15" fill="rgb(240,128,52)" fg:x="368" fg:w="5"/><text x="12.9047%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="12.6891%" y="261" width="0.1376%" height="15" fill="rgb(253,114,12)" fg:x="369" fg:w="4"/><text x="12.9391%" y="271.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="12.6891%" y="245" width="0.1376%" height="15" fill="rgb(215,223,47)" fg:x="369" fg:w="4"/><text x="12.9391%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="12.6891%" y="229" width="0.1376%" height="15" fill="rgb(248,225,23)" fg:x="369" fg:w="4"/><text x="12.9391%" y="239.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="12.6891%" y="213" width="0.1376%" height="15" fill="rgb(250,108,0)" fg:x="369" fg:w="4"/><text x="12.9391%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="12.7235%" y="197" width="0.1032%" height="15" fill="rgb(228,208,7)" fg:x="370" fg:w="3"/><text x="12.9735%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="12.7579%" y="181" width="0.0688%" height="15" fill="rgb(244,45,10)" fg:x="371" fg:w="2"/><text x="13.0079%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="12.8267%" y="389" width="0.0344%" height="15" fill="rgb(207,125,25)" fg:x="373" fg:w="1"/><text x="13.0767%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="12.8267%" y="373" width="0.0344%" height="15" fill="rgb(210,195,18)" fg:x="373" fg:w="1"/><text x="13.0767%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="12.8267%" y="357" width="0.0344%" height="15" fill="rgb(249,80,12)" fg:x="373" fg:w="1"/><text x="13.0767%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="12.8267%" y="341" width="0.0344%" height="15" fill="rgb(221,65,9)" fg:x="373" fg:w="1"/><text x="13.0767%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (7 samples, 0.24%)</title><rect x="12.8611%" y="389" width="0.2407%" height="15" fill="rgb(235,49,36)" fg:x="374" fg:w="7"/><text x="13.1111%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (7 samples, 0.24%)</title><rect x="12.8611%" y="373" width="0.2407%" height="15" fill="rgb(225,32,20)" fg:x="374" fg:w="7"/><text x="13.1111%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.24%)</title><rect x="12.8611%" y="357" width="0.2407%" height="15" fill="rgb(215,141,46)" fg:x="374" fg:w="7"/><text x="13.1111%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="12.8955%" y="341" width="0.2063%" height="15" fill="rgb(250,160,47)" fg:x="375" fg:w="6"/><text x="13.1455%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="12.8955%" y="325" width="0.2063%" height="15" fill="rgb(216,222,40)" fg:x="375" fg:w="6"/><text x="13.1455%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="12.8955%" y="309" width="0.2063%" height="15" fill="rgb(234,217,39)" fg:x="375" fg:w="6"/><text x="13.1455%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="12.8955%" y="293" width="0.2063%" height="15" fill="rgb(207,178,40)" fg:x="375" fg:w="6"/><text x="13.1455%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="12.8955%" y="277" width="0.2063%" height="15" fill="rgb(221,136,13)" fg:x="375" fg:w="6"/><text x="13.1455%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="12.8955%" y="261" width="0.2063%" height="15" fill="rgb(249,199,10)" fg:x="375" fg:w="6"/><text x="13.1455%" y="271.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="12.8955%" y="245" width="0.2063%" height="15" fill="rgb(249,222,13)" fg:x="375" fg:w="6"/><text x="13.1455%" y="255.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="12.8955%" y="229" width="0.2063%" height="15" fill="rgb(244,185,38)" fg:x="375" fg:w="6"/><text x="13.1455%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="12.9298%" y="213" width="0.1719%" height="15" fill="rgb(236,202,9)" fg:x="376" fg:w="5"/><text x="13.1798%" y="223.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="12.9642%" y="197" width="0.1376%" height="15" fill="rgb(250,229,37)" fg:x="377" fg:w="4"/><text x="13.2142%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="13.0674%" y="181" width="0.0344%" height="15" fill="rgb(206,174,23)" fg:x="380" fg:w="1"/><text x="13.3174%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="13.1018%" y="357" width="0.0344%" height="15" fill="rgb(211,33,43)" fg:x="381" fg:w="1"/><text x="13.3518%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2 samples, 0.07%)</title><rect x="13.1018%" y="373" width="0.0688%" height="15" fill="rgb(245,58,50)" fg:x="381" fg:w="2"/><text x="13.3518%" y="383.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.03%)</title><rect x="13.1362%" y="357" width="0.0344%" height="15" fill="rgb(244,68,36)" fg:x="382" fg:w="1"/><text x="13.3862%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (12 samples, 0.41%)</title><rect x="12.8267%" y="405" width="0.4127%" height="15" fill="rgb(232,229,15)" fg:x="373" fg:w="12"/><text x="13.0767%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (4 samples, 0.14%)</title><rect x="13.1018%" y="389" width="0.1376%" height="15" fill="rgb(254,30,23)" fg:x="381" fg:w="4"/><text x="13.3518%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (2 samples, 0.07%)</title><rect x="13.1706%" y="373" width="0.0688%" height="15" fill="rgb(235,160,14)" fg:x="383" fg:w="2"/><text x="13.4206%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (2 samples, 0.07%)</title><rect x="13.1706%" y="357" width="0.0688%" height="15" fill="rgb(212,155,44)" fg:x="383" fg:w="2"/><text x="13.4206%" y="367.50"></text></g><g><title>petgraph::graph_impl::serialization::&lt;impl serde::de::Deserialize for petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;&gt;::deserialize (8 samples, 0.28%)</title><rect x="13.2393%" y="405" width="0.2751%" height="15" fill="rgb(226,2,50)" fg:x="385" fg:w="8"/><text x="13.4893%" y="415.50"></text></g><g><title>petgraph::graph_impl::serialization::&lt;impl petgraph::serde_utils::FromDeserialized for petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;&gt;::from_deserialized (8 samples, 0.28%)</title><rect x="13.2393%" y="389" width="0.2751%" height="15" fill="rgb(234,177,6)" fg:x="385" fg:w="8"/><text x="13.4893%" y="399.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::link_edges (8 samples, 0.28%)</title><rect x="13.2393%" y="373" width="0.2751%" height="15" fill="rgb(217,24,9)" fg:x="385" fg:w="8"/><text x="13.4893%" y="383.50"></text></g><g><title>petgraph::graph_impl::index_twice (2 samples, 0.07%)</title><rect x="13.4457%" y="357" width="0.0688%" height="15" fill="rgb(220,13,46)" fg:x="391" fg:w="2"/><text x="13.6957%" y="367.50"></text></g><g><title>core::cmp::max (1 samples, 0.03%)</title><rect x="13.4801%" y="341" width="0.0344%" height="15" fill="rgb(239,221,27)" fg:x="392" fg:w="1"/><text x="13.7301%" y="351.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="13.4801%" y="325" width="0.0344%" height="15" fill="rgb(222,198,25)" fg:x="392" fg:w="1"/><text x="13.7301%" y="335.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="13.4801%" y="309" width="0.0344%" height="15" fill="rgb(211,99,13)" fg:x="392" fg:w="1"/><text x="13.7301%" y="319.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (2 samples, 0.07%)</title><rect x="14.2022%" y="261" width="0.0688%" height="15" fill="rgb(232,111,31)" fg:x="413" fg:w="2"/><text x="14.4522%" y="271.50"></text></g><g><title>core::cmp::min (2 samples, 0.07%)</title><rect x="14.2022%" y="245" width="0.0688%" height="15" fill="rgb(245,82,37)" fg:x="413" fg:w="2"/><text x="14.4522%" y="255.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.07%)</title><rect x="14.2022%" y="229" width="0.0688%" height="15" fill="rgb(227,149,46)" fg:x="413" fg:w="2"/><text x="14.4522%" y="239.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.07%)</title><rect x="14.2022%" y="213" width="0.0688%" height="15" fill="rgb(218,36,50)" fg:x="413" fg:w="2"/><text x="14.4522%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.03%)</title><rect x="14.2710%" y="261" width="0.0344%" height="15" fill="rgb(226,80,48)" fg:x="415" fg:w="1"/><text x="14.5210%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="14.2710%" y="245" width="0.0344%" height="15" fill="rgb(238,224,15)" fg:x="415" fg:w="1"/><text x="14.5210%" y="255.50"></text></g><g><title>petgraph::graph_impl::serialization::&lt;impl serde::de::Deserialize for petgraph::graph_impl::NodeIndex&lt;Ix&gt;&gt;::deserialize (26 samples, 0.89%)</title><rect x="13.5144%" y="405" width="0.8941%" height="15" fill="rgb(241,136,10)" fg:x="393" fg:w="26"/><text x="13.7644%" y="415.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (7 samples, 0.24%)</title><rect x="14.1678%" y="389" width="0.2407%" height="15" fill="rgb(208,32,45)" fg:x="412" fg:w="7"/><text x="14.4178%" y="399.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (7 samples, 0.24%)</title><rect x="14.1678%" y="373" width="0.2407%" height="15" fill="rgb(207,135,9)" fg:x="412" fg:w="7"/><text x="14.4178%" y="383.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (7 samples, 0.24%)</title><rect x="14.1678%" y="357" width="0.2407%" height="15" fill="rgb(206,86,44)" fg:x="412" fg:w="7"/><text x="14.4178%" y="367.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (7 samples, 0.24%)</title><rect x="14.1678%" y="341" width="0.2407%" height="15" fill="rgb(245,177,15)" fg:x="412" fg:w="7"/><text x="14.4178%" y="351.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (7 samples, 0.24%)</title><rect x="14.1678%" y="325" width="0.2407%" height="15" fill="rgb(206,64,50)" fg:x="412" fg:w="7"/><text x="14.4178%" y="335.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (7 samples, 0.24%)</title><rect x="14.1678%" y="309" width="0.2407%" height="15" fill="rgb(234,36,40)" fg:x="412" fg:w="7"/><text x="14.4178%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (7 samples, 0.24%)</title><rect x="14.1678%" y="293" width="0.2407%" height="15" fill="rgb(213,64,8)" fg:x="412" fg:w="7"/><text x="14.4178%" y="303.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (7 samples, 0.24%)</title><rect x="14.1678%" y="277" width="0.2407%" height="15" fill="rgb(210,75,36)" fg:x="412" fg:w="7"/><text x="14.4178%" y="287.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::buffer (3 samples, 0.10%)</title><rect x="14.3054%" y="261" width="0.1032%" height="15" fill="rgb(229,88,21)" fg:x="416" fg:w="3"/><text x="14.5554%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.10%)</title><rect x="14.3054%" y="245" width="0.1032%" height="15" fill="rgb(252,204,47)" fg:x="416" fg:w="3"/><text x="14.5554%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.10%)</title><rect x="14.3054%" y="229" width="0.1032%" height="15" fill="rgb(208,77,27)" fg:x="416" fg:w="3"/><text x="14.5554%" y="239.50"></text></g><g><title>rust_realloc (20 samples, 0.69%)</title><rect x="14.4085%" y="405" width="0.6878%" height="15" fill="rgb(221,76,26)" fg:x="419" fg:w="20"/><text x="14.6585%" y="415.50"></text></g><g><title>rust_realloc (20 samples, 0.69%)</title><rect x="14.4085%" y="389" width="0.6878%" height="15" fill="rgb(225,139,18)" fg:x="419" fg:w="20"/><text x="14.6585%" y="399.50"></text></g><g><title>__memmove_avx_unaligned_erms (20 samples, 0.69%)</title><rect x="14.4085%" y="373" width="0.6878%" height="15" fill="rgb(230,137,11)" fg:x="419" fg:w="20"/><text x="14.6585%" y="383.50"></text></g><g><title>[unknown] (12 samples, 0.41%)</title><rect x="14.6836%" y="357" width="0.4127%" height="15" fill="rgb(212,28,1)" fg:x="427" fg:w="12"/><text x="14.9336%" y="367.50"></text></g><g><title>[unknown] (12 samples, 0.41%)</title><rect x="14.6836%" y="341" width="0.4127%" height="15" fill="rgb(248,164,17)" fg:x="427" fg:w="12"/><text x="14.9336%" y="351.50"></text></g><g><title>[unknown] (12 samples, 0.41%)</title><rect x="14.6836%" y="325" width="0.4127%" height="15" fill="rgb(222,171,42)" fg:x="427" fg:w="12"/><text x="14.9336%" y="335.50"></text></g><g><title>[unknown] (11 samples, 0.38%)</title><rect x="14.7180%" y="309" width="0.3783%" height="15" fill="rgb(243,84,45)" fg:x="428" fg:w="11"/><text x="14.9680%" y="319.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="14.7524%" y="293" width="0.3439%" height="15" fill="rgb(252,49,23)" fg:x="429" fg:w="10"/><text x="15.0024%" y="303.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="14.7524%" y="277" width="0.3439%" height="15" fill="rgb(215,19,7)" fg:x="429" fg:w="10"/><text x="15.0024%" y="287.50"></text></g><g><title>[unknown] (9 samples, 0.31%)</title><rect x="14.7868%" y="261" width="0.3095%" height="15" fill="rgb(238,81,41)" fg:x="430" fg:w="9"/><text x="15.0368%" y="271.50"></text></g><g><title>[unknown] (9 samples, 0.31%)</title><rect x="14.7868%" y="245" width="0.3095%" height="15" fill="rgb(210,199,37)" fg:x="430" fg:w="9"/><text x="15.0368%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="14.9587%" y="229" width="0.1376%" height="15" fill="rgb(244,192,49)" fg:x="435" fg:w="4"/><text x="15.2087%" y="239.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="14.9587%" y="213" width="0.1376%" height="15" fill="rgb(226,211,11)" fg:x="435" fg:w="4"/><text x="15.2087%" y="223.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_alloc_first_alloc&lt;(snmalloc::ZeroMem)0&gt; (1 samples, 0.03%)</title><rect x="15.0963%" y="405" width="0.0344%" height="15" fill="rgb(236,162,54)" fg:x="439" fg:w="1"/><text x="15.3463%" y="415.50"></text></g><g><title>snmalloc::init_thread_allocator (1 samples, 0.03%)</title><rect x="15.0963%" y="389" width="0.0344%" height="15" fill="rgb(220,229,9)" fg:x="439" fg:w="1"/><text x="15.3463%" y="399.50"></text></g><g><title>snmalloc::ThreadAllocThreadDestructor::register_cleanup (1 samples, 0.03%)</title><rect x="15.0963%" y="373" width="0.0344%" height="15" fill="rgb(250,87,22)" fg:x="439" fg:w="1"/><text x="15.3463%" y="383.50"></text></g><g><title>__cxa_thread_atexit (1 samples, 0.03%)</title><rect x="15.0963%" y="357" width="0.0344%" height="15" fill="rgb(239,43,17)" fg:x="439" fg:w="1"/><text x="15.3463%" y="367.50"></text></g><g><title>__cxa_thread_atexit_impl (1 samples, 0.03%)</title><rect x="15.0963%" y="341" width="0.0344%" height="15" fill="rgb(231,177,25)" fg:x="439" fg:w="1"/><text x="15.3463%" y="351.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_alloc_new_slab&lt;(snmalloc::ZeroMem)0&gt; (24 samples, 0.83%)</title><rect x="15.1307%" y="405" width="0.8253%" height="15" fill="rgb(219,179,1)" fg:x="440" fg:w="24"/><text x="15.3807%" y="415.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_alloc_build_free_list&lt;(snmalloc::ZeroMem)0&gt; (24 samples, 0.83%)</title><rect x="15.1307%" y="389" width="0.8253%" height="15" fill="rgb(238,219,53)" fg:x="440" fg:w="24"/><text x="15.3807%" y="399.50"></text></g><g><title>snmalloc::Slab::alloc_new_list (24 samples, 0.83%)</title><rect x="15.1307%" y="373" width="0.8253%" height="15" fill="rgb(232,167,36)" fg:x="440" fg:w="24"/><text x="15.3807%" y="383.50"></text></g><g><title>snmalloc::FreeListBuilder&lt;false, unsigned int&gt;::add (24 samples, 0.83%)</title><rect x="15.1307%" y="357" width="0.8253%" height="15" fill="rgb(244,19,51)" fg:x="440" fg:w="24"/><text x="15.3807%" y="367.50"></text></g><g><title>snmalloc::EncodeFreeObjectReference::store (24 samples, 0.83%)</title><rect x="15.1307%" y="341" width="0.8253%" height="15" fill="rgb(224,6,22)" fg:x="440" fg:w="24"/><text x="15.3807%" y="351.50"></text></g><g><title>[unknown] (24 samples, 0.83%)</title><rect x="15.1307%" y="325" width="0.8253%" height="15" fill="rgb(224,145,5)" fg:x="440" fg:w="24"/><text x="15.3807%" y="335.50"></text></g><g><title>[unknown] (17 samples, 0.58%)</title><rect x="15.3714%" y="309" width="0.5846%" height="15" fill="rgb(234,130,49)" fg:x="447" fg:w="17"/><text x="15.6214%" y="319.50"></text></g><g><title>[unknown] (17 samples, 0.58%)</title><rect x="15.3714%" y="293" width="0.5846%" height="15" fill="rgb(254,6,2)" fg:x="447" fg:w="17"/><text x="15.6214%" y="303.50"></text></g><g><title>[unknown] (16 samples, 0.55%)</title><rect x="15.4058%" y="277" width="0.5502%" height="15" fill="rgb(208,96,46)" fg:x="448" fg:w="16"/><text x="15.6558%" y="287.50"></text></g><g><title>[unknown] (15 samples, 0.52%)</title><rect x="15.4402%" y="261" width="0.5158%" height="15" fill="rgb(239,3,39)" fg:x="449" fg:w="15"/><text x="15.6902%" y="271.50"></text></g><g><title>[unknown] (12 samples, 0.41%)</title><rect x="15.5433%" y="245" width="0.4127%" height="15" fill="rgb(233,210,1)" fg:x="452" fg:w="12"/><text x="15.7933%" y="255.50"></text></g><g><title>[unknown] (11 samples, 0.38%)</title><rect x="15.5777%" y="229" width="0.3783%" height="15" fill="rgb(244,137,37)" fg:x="453" fg:w="11"/><text x="15.8277%" y="239.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="15.6121%" y="213" width="0.3439%" height="15" fill="rgb(240,136,2)" fg:x="454" fg:w="10"/><text x="15.8621%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="15.7840%" y="197" width="0.1719%" height="15" fill="rgb(239,18,37)" fg:x="459" fg:w="5"/><text x="16.0340%" y="207.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="15.8184%" y="181" width="0.1376%" height="15" fill="rgb(218,185,22)" fg:x="460" fg:w="4"/><text x="16.0684%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="15.9216%" y="165" width="0.0344%" height="15" fill="rgb(225,218,4)" fg:x="463" fg:w="1"/><text x="16.1716%" y="175.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_alloc_new_slab&lt;(snmalloc::ZeroMem)1&gt; (6 samples, 0.21%)</title><rect x="15.9560%" y="405" width="0.2063%" height="15" fill="rgb(230,182,32)" fg:x="464" fg:w="6"/><text x="16.2060%" y="415.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_alloc_build_free_list&lt;(snmalloc::ZeroMem)1&gt; (6 samples, 0.21%)</title><rect x="15.9560%" y="389" width="0.2063%" height="15" fill="rgb(242,56,43)" fg:x="464" fg:w="6"/><text x="16.2060%" y="399.50"></text></g><g><title>snmalloc::Slab::alloc_new_list (6 samples, 0.21%)</title><rect x="15.9560%" y="373" width="0.2063%" height="15" fill="rgb(233,99,24)" fg:x="464" fg:w="6"/><text x="16.2060%" y="383.50"></text></g><g><title>snmalloc::FreeListBuilder&lt;false, unsigned int&gt;::add (6 samples, 0.21%)</title><rect x="15.9560%" y="357" width="0.2063%" height="15" fill="rgb(234,209,42)" fg:x="464" fg:w="6"/><text x="16.2060%" y="367.50"></text></g><g><title>snmalloc::EncodeFreeObjectReference::store (6 samples, 0.21%)</title><rect x="15.9560%" y="341" width="0.2063%" height="15" fill="rgb(227,7,12)" fg:x="464" fg:w="6"/><text x="16.2060%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="15.9560%" y="325" width="0.2063%" height="15" fill="rgb(245,203,43)" fg:x="464" fg:w="6"/><text x="16.2060%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="15.9560%" y="309" width="0.2063%" height="15" fill="rgb(238,205,33)" fg:x="464" fg:w="6"/><text x="16.2060%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="15.9560%" y="293" width="0.2063%" height="15" fill="rgb(231,56,7)" fg:x="464" fg:w="6"/><text x="16.2060%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="15.9560%" y="277" width="0.2063%" height="15" fill="rgb(244,186,29)" fg:x="464" fg:w="6"/><text x="16.2060%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="15.9904%" y="261" width="0.1719%" height="15" fill="rgb(234,111,31)" fg:x="465" fg:w="5"/><text x="16.2404%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="16.0591%" y="245" width="0.1032%" height="15" fill="rgb(241,149,10)" fg:x="467" fg:w="3"/><text x="16.3091%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="16.0591%" y="229" width="0.1032%" height="15" fill="rgb(249,206,44)" fg:x="467" fg:w="3"/><text x="16.3091%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="16.0591%" y="213" width="0.1032%" height="15" fill="rgb(251,153,30)" fg:x="467" fg:w="3"/><text x="16.3091%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="16.0591%" y="197" width="0.1032%" height="15" fill="rgb(239,152,38)" fg:x="467" fg:w="3"/><text x="16.3091%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="16.0935%" y="181" width="0.0688%" height="15" fill="rgb(249,139,47)" fg:x="468" fg:w="2"/><text x="16.3435%" y="191.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.10%)</title><rect x="16.1623%" y="357" width="0.1032%" height="15" fill="rgb(244,64,35)" fg:x="470" fg:w="3"/><text x="16.4123%" y="367.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.10%)</title><rect x="16.1623%" y="341" width="0.1032%" height="15" fill="rgb(216,46,15)" fg:x="470" fg:w="3"/><text x="16.4123%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="16.1623%" y="325" width="0.1032%" height="15" fill="rgb(250,74,19)" fg:x="470" fg:w="3"/><text x="16.4123%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="16.1623%" y="309" width="0.1032%" height="15" fill="rgb(249,42,33)" fg:x="470" fg:w="3"/><text x="16.4123%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="16.1623%" y="293" width="0.1032%" height="15" fill="rgb(242,149,17)" fg:x="470" fg:w="3"/><text x="16.4123%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="16.1623%" y="277" width="0.1032%" height="15" fill="rgb(244,29,21)" fg:x="470" fg:w="3"/><text x="16.4123%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="16.1623%" y="261" width="0.1032%" height="15" fill="rgb(220,130,37)" fg:x="470" fg:w="3"/><text x="16.4123%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="16.1623%" y="245" width="0.1032%" height="15" fill="rgb(211,67,2)" fg:x="470" fg:w="3"/><text x="16.4123%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="16.1623%" y="229" width="0.1032%" height="15" fill="rgb(235,68,52)" fg:x="470" fg:w="3"/><text x="16.4123%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="16.2311%" y="213" width="0.0344%" height="15" fill="rgb(246,142,3)" fg:x="472" fg:w="1"/><text x="16.4811%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="16.2311%" y="197" width="0.0344%" height="15" fill="rgb(241,25,7)" fg:x="472" fg:w="1"/><text x="16.4811%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="16.2311%" y="181" width="0.0344%" height="15" fill="rgb(242,119,39)" fg:x="472" fg:w="1"/><text x="16.4811%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="16.2311%" y="165" width="0.0344%" height="15" fill="rgb(241,98,45)" fg:x="472" fg:w="1"/><text x="16.4811%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="16.2311%" y="149" width="0.0344%" height="15" fill="rgb(254,28,30)" fg:x="472" fg:w="1"/><text x="16.4811%" y="159.50"></text></g><g><title>benchmark1_q_co (474 samples, 16.30%)</title><rect x="0.0000%" y="421" width="16.2999%" height="15" fill="rgb(241,142,54)" fg:x="0" fg:w="474"/><text x="0.2500%" y="431.50">benchmark1_q_co</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (4 samples, 0.14%)</title><rect x="16.1623%" y="405" width="0.1376%" height="15" fill="rgb(222,85,15)" fg:x="470" fg:w="4"/><text x="16.4123%" y="415.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (4 samples, 0.14%)</title><rect x="16.1623%" y="389" width="0.1376%" height="15" fill="rgb(210,85,47)" fg:x="470" fg:w="4"/><text x="16.4123%" y="399.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (4 samples, 0.14%)</title><rect x="16.1623%" y="373" width="0.1376%" height="15" fill="rgb(224,206,25)" fg:x="470" fg:w="4"/><text x="16.4123%" y="383.50"></text></g><g><title>__GI___mprotect (1 samples, 0.03%)</title><rect x="16.2655%" y="357" width="0.0344%" height="15" fill="rgb(243,201,19)" fg:x="473" fg:w="1"/><text x="16.5155%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="16.2655%" y="341" width="0.0344%" height="15" fill="rgb(236,59,4)" fg:x="473" fg:w="1"/><text x="16.5155%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="16.2655%" y="325" width="0.0344%" height="15" fill="rgb(254,179,45)" fg:x="473" fg:w="1"/><text x="16.5155%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="16.2655%" y="309" width="0.0344%" height="15" fill="rgb(226,14,10)" fg:x="473" fg:w="1"/><text x="16.5155%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="16.2655%" y="293" width="0.0344%" height="15" fill="rgb(244,27,41)" fg:x="473" fg:w="1"/><text x="16.5155%" y="303.50"></text></g><g><title>perf (5 samples, 0.17%)</title><rect x="16.2999%" y="421" width="0.1719%" height="15" fill="rgb(235,35,32)" fg:x="474" fg:w="5"/><text x="16.5499%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="405" width="0.1719%" height="15" fill="rgb(218,68,31)" fg:x="474" fg:w="5"/><text x="16.5499%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="389" width="0.1719%" height="15" fill="rgb(207,120,37)" fg:x="474" fg:w="5"/><text x="16.5499%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="373" width="0.1719%" height="15" fill="rgb(227,98,0)" fg:x="474" fg:w="5"/><text x="16.5499%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="357" width="0.1719%" height="15" fill="rgb(207,7,3)" fg:x="474" fg:w="5"/><text x="16.5499%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="341" width="0.1719%" height="15" fill="rgb(206,98,19)" fg:x="474" fg:w="5"/><text x="16.5499%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="325" width="0.1719%" height="15" fill="rgb(217,5,26)" fg:x="474" fg:w="5"/><text x="16.5499%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="309" width="0.1719%" height="15" fill="rgb(235,190,38)" fg:x="474" fg:w="5"/><text x="16.5499%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="293" width="0.1719%" height="15" fill="rgb(247,86,24)" fg:x="474" fg:w="5"/><text x="16.5499%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="277" width="0.1719%" height="15" fill="rgb(205,101,16)" fg:x="474" fg:w="5"/><text x="16.5499%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="261" width="0.1719%" height="15" fill="rgb(246,168,33)" fg:x="474" fg:w="5"/><text x="16.5499%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="245" width="0.1719%" height="15" fill="rgb(231,114,1)" fg:x="474" fg:w="5"/><text x="16.5499%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="229" width="0.1719%" height="15" fill="rgb(207,184,53)" fg:x="474" fg:w="5"/><text x="16.5499%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="213" width="0.1719%" height="15" fill="rgb(224,95,51)" fg:x="474" fg:w="5"/><text x="16.5499%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="16.2999%" y="197" width="0.1719%" height="15" fill="rgb(212,188,45)" fg:x="474" fg:w="5"/><text x="16.5499%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (462 samples, 15.89%)</title><rect x="23.2806%" y="341" width="15.8872%" height="15" fill="rgb(223,154,38)" fg:x="677" fg:w="462"/><text x="23.5306%" y="351.50">&lt;petgraph::graph_impl::E..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (19 samples, 0.65%)</title><rect x="38.5144%" y="325" width="0.6534%" height="15" fill="rgb(251,22,52)" fg:x="1120" fg:w="19"/><text x="38.7644%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (19 samples, 0.65%)</title><rect x="38.5144%" y="309" width="0.6534%" height="15" fill="rgb(229,209,22)" fg:x="1120" fg:w="19"/><text x="38.7644%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (146 samples, 5.02%)</title><rect x="40.0963%" y="293" width="5.0206%" height="15" fill="rgb(234,138,34)" fg:x="1166" fg:w="146"/><text x="40.3463%" y="303.50">&lt;core:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (21 samples, 0.72%)</title><rect x="44.3948%" y="277" width="0.7221%" height="15" fill="rgb(212,95,11)" fg:x="1291" fg:w="21"/><text x="44.6448%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (21 samples, 0.72%)</title><rect x="44.3948%" y="261" width="0.7221%" height="15" fill="rgb(240,179,47)" fg:x="1291" fg:w="21"/><text x="44.6448%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (13 samples, 0.45%)</title><rect x="45.1169%" y="293" width="0.4470%" height="15" fill="rgb(240,163,11)" fg:x="1312" fg:w="13"/><text x="45.3669%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (58 samples, 1.99%)</title><rect x="45.5640%" y="277" width="1.9945%" height="15" fill="rgb(236,37,12)" fg:x="1325" fg:w="58"/><text x="45.8140%" y="287.50">c..</text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.5241%" y="261" width="0.0344%" height="15" fill="rgb(232,164,16)" fg:x="1382" fg:w="1"/><text x="47.7741%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.5241%" y="245" width="0.0344%" height="15" fill="rgb(244,205,15)" fg:x="1382" fg:w="1"/><text x="47.7741%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.5241%" y="229" width="0.0344%" height="15" fill="rgb(223,117,47)" fg:x="1382" fg:w="1"/><text x="47.7741%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.5241%" y="213" width="0.0344%" height="15" fill="rgb(244,107,35)" fg:x="1382" fg:w="1"/><text x="47.7741%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.5241%" y="197" width="0.0344%" height="15" fill="rgb(205,140,8)" fg:x="1382" fg:w="1"/><text x="47.7741%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.5241%" y="181" width="0.0344%" height="15" fill="rgb(228,84,46)" fg:x="1382" fg:w="1"/><text x="47.7741%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.5241%" y="165" width="0.0344%" height="15" fill="rgb(254,188,9)" fg:x="1382" fg:w="1"/><text x="47.7741%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.5241%" y="149" width="0.0344%" height="15" fill="rgb(206,112,54)" fg:x="1382" fg:w="1"/><text x="47.7741%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.5241%" y="133" width="0.0344%" height="15" fill="rgb(216,84,49)" fg:x="1382" fg:w="1"/><text x="47.7741%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.5241%" y="117" width="0.0344%" height="15" fill="rgb(214,194,35)" fg:x="1382" fg:w="1"/><text x="47.7741%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.5241%" y="101" width="0.0344%" height="15" fill="rgb(249,28,3)" fg:x="1382" fg:w="1"/><text x="47.7741%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (72 samples, 2.48%)</title><rect x="47.5585%" y="277" width="2.4759%" height="15" fill="rgb(222,56,52)" fg:x="1383" fg:w="72"/><text x="47.8085%" y="287.50">co..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (72 samples, 2.48%)</title><rect x="47.5585%" y="261" width="2.4759%" height="15" fill="rgb(245,217,50)" fg:x="1383" fg:w="72"/><text x="47.8085%" y="271.50">&lt;u..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (919 samples, 31.60%)</title><rect x="19.0165%" y="389" width="31.6025%" height="15" fill="rgb(213,201,24)" fg:x="553" fg:w="919"/><text x="19.2665%" y="399.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core:..</text></g><g><title>core::iter::traits::iterator::Iterator::find (919 samples, 31.60%)</title><rect x="19.0165%" y="373" width="31.6025%" height="15" fill="rgb(248,116,28)" fg:x="553" fg:w="919"/><text x="19.2665%" y="383.50">core::iter::traits::iterator::Iterator::find</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (919 samples, 31.60%)</title><rect x="19.0165%" y="357" width="31.6025%" height="15" fill="rgb(219,72,43)" fg:x="553" fg:w="919"/><text x="19.2665%" y="367.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (333 samples, 11.45%)</title><rect x="39.1678%" y="341" width="11.4512%" height="15" fill="rgb(209,138,14)" fg:x="1139" fg:w="333"/><text x="39.4178%" y="351.50">core::iter::trait..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (333 samples, 11.45%)</title><rect x="39.1678%" y="325" width="11.4512%" height="15" fill="rgb(222,18,33)" fg:x="1139" fg:w="333"/><text x="39.4178%" y="335.50">core::ops::functi..</text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices::{{closure}} (333 samples, 11.45%)</title><rect x="39.1678%" y="309" width="11.4512%" height="15" fill="rgb(213,199,7)" fg:x="1139" fg:w="333"/><text x="39.4178%" y="319.50">graph_store::grap..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_weight (147 samples, 5.06%)</title><rect x="45.5640%" y="293" width="5.0550%" height="15" fill="rgb(250,110,10)" fg:x="1325" fg:w="147"/><text x="45.8140%" y="303.50">petgra..</text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (17 samples, 0.58%)</title><rect x="50.0344%" y="277" width="0.5846%" height="15" fill="rgb(248,123,6)" fg:x="1455" fg:w="17"/><text x="50.2844%" y="287.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (17 samples, 0.58%)</title><rect x="50.0344%" y="261" width="0.5846%" height="15" fill="rgb(206,91,31)" fg:x="1455" fg:w="17"/><text x="50.2844%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,647 samples, 56.64%)</title><rect x="16.4718%" y="405" width="56.6369%" height="15" fill="rgb(211,154,13)" fg:x="479" fg:w="1647"/><text x="16.7218%" y="415.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (654 samples, 22.49%)</title><rect x="50.6190%" y="389" width="22.4897%" height="15" fill="rgb(225,148,7)" fg:x="1472" fg:w="654"/><text x="50.8690%" y="399.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (487 samples, 16.75%)</title><rect x="56.3618%" y="373" width="16.7469%" height="15" fill="rgb(220,160,43)" fg:x="1639" fg:w="487"/><text x="56.6118%" y="383.50">core::ops::function::impls..</text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices::{{closure}} (487 samples, 16.75%)</title><rect x="56.3618%" y="357" width="16.7469%" height="15" fill="rgb(213,52,39)" fg:x="1639" fg:w="487"/><text x="56.6118%" y="367.50">graph_store::graph_db_impl..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (18 samples, 0.62%)</title><rect x="72.4897%" y="341" width="0.6190%" height="15" fill="rgb(243,137,7)" fg:x="2108" fg:w="18"/><text x="72.7397%" y="351.50"></text></g><g><title>&lt;graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt; as graph_store::graph_db::GlobalStoreTrait&lt;G,I&gt;&gt;::get_adj_vertices (5 samples, 0.17%)</title><rect x="73.1087%" y="405" width="0.1719%" height="15" fill="rgb(230,79,13)" fg:x="2126" fg:w="5"/><text x="73.3587%" y="415.50"></text></g><g><title>&lt;graph_store::utils::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="73.4525%" y="373" width="0.0344%" height="15" fill="rgb(247,105,23)" fg:x="2136" fg:w="1"/><text x="73.7025%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;I,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="73.4525%" y="357" width="0.0344%" height="15" fill="rgb(223,179,41)" fg:x="2136" fg:w="1"/><text x="73.7025%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.21%)</title><rect x="73.4525%" y="389" width="0.2063%" height="15" fill="rgb(218,9,34)" fg:x="2136" fg:w="6"/><text x="73.7025%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.17%)</title><rect x="73.4869%" y="373" width="0.1719%" height="15" fill="rgb(222,106,8)" fg:x="2137" fg:w="5"/><text x="73.7369%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="73.6589%" y="389" width="0.0344%" height="15" fill="rgb(211,220,0)" fg:x="2142" fg:w="1"/><text x="73.9089%" y="399.50"></text></g><g><title>&lt;pegasus::communication::buffer::rob::BufferedPush&lt;D,P&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (15 samples, 0.52%)</title><rect x="73.2806%" y="405" width="0.5158%" height="15" fill="rgb(229,52,16)" fg:x="2131" fg:w="15"/><text x="73.5306%" y="415.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::is_full (3 samples, 0.10%)</title><rect x="73.6933%" y="389" width="0.1032%" height="15" fill="rgb(212,155,18)" fg:x="2143" fg:w="3"/><text x="73.9433%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.10%)</title><rect x="73.6933%" y="373" width="0.1032%" height="15" fill="rgb(242,21,14)" fg:x="2143" fg:w="3"/><text x="73.9433%" y="383.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::is_full::{{closure}} (3 samples, 0.10%)</title><rect x="73.6933%" y="357" width="0.1032%" height="15" fill="rgb(222,19,48)" fg:x="2143" fg:w="3"/><text x="73.9433%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (3 samples, 0.10%)</title><rect x="73.6933%" y="341" width="0.1032%" height="15" fill="rgb(232,45,27)" fg:x="2143" fg:w="3"/><text x="73.9433%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::count (3 samples, 0.10%)</title><rect x="73.6933%" y="325" width="0.1032%" height="15" fill="rgb(249,103,42)" fg:x="2143" fg:w="3"/><text x="73.9433%" y="335.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::ChannelPush&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::push (1 samples, 0.03%)</title><rect x="73.7964%" y="405" width="0.0344%" height="15" fill="rgb(246,81,33)" fg:x="2146" fg:w="1"/><text x="74.0464%" y="415.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::Tee&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::push (1 samples, 0.03%)</title><rect x="73.8308%" y="405" width="0.0344%" height="15" fill="rgb(252,33,42)" fg:x="2147" fg:w="1"/><text x="74.0808%" y="415.50"></text></g><g><title>&lt;pegasus::data_plane::intra_thread::ThreadPull&lt;T&gt; as pegasus::data_plane::Pull&lt;T&gt;&gt;::next (1 samples, 0.03%)</title><rect x="73.8652%" y="405" width="0.0344%" height="15" fill="rgb(209,212,41)" fg:x="2148" fg:w="1"/><text x="74.1152%" y="415.50"></text></g><g><title>&lt;pegasus_common::buffer::rob::Batch&lt;D&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="73.8996%" y="405" width="0.0344%" height="15" fill="rgb(207,154,6)" fg:x="2149" fg:w="1"/><text x="74.1496%" y="415.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::recycle (1 samples, 0.03%)</title><rect x="73.8996%" y="389" width="0.0344%" height="15" fill="rgb(223,64,47)" fg:x="2149" fg:w="1"/><text x="74.1496%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.03%)</title><rect x="73.8996%" y="373" width="0.0344%" height="15" fill="rgb(211,161,38)" fg:x="2149" fg:w="1"/><text x="74.1496%" y="383.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="73.8996%" y="357" width="0.0344%" height="15" fill="rgb(219,138,40)" fg:x="2149" fg:w="1"/><text x="74.1496%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.07%)</title><rect x="74.0371%" y="357" width="0.0688%" height="15" fill="rgb(241,228,46)" fg:x="2153" fg:w="2"/><text x="74.2871%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="74.0715%" y="341" width="0.0344%" height="15" fill="rgb(223,209,38)" fg:x="2154" fg:w="1"/><text x="74.3215%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.21%)</title><rect x="73.9340%" y="405" width="0.2063%" height="15" fill="rgb(236,164,45)" fg:x="2150" fg:w="6"/><text x="74.1840%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.17%)</title><rect x="73.9684%" y="389" width="0.1719%" height="15" fill="rgb(231,15,5)" fg:x="2151" fg:w="5"/><text x="74.2184%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.17%)</title><rect x="73.9684%" y="373" width="0.1719%" height="15" fill="rgb(252,35,15)" fg:x="2151" fg:w="5"/><text x="74.2184%" y="383.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.03%)</title><rect x="74.1059%" y="357" width="0.0344%" height="15" fill="rgb(248,181,18)" fg:x="2155" fg:w="1"/><text x="74.3559%" y="367.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::dealloc (1 samples, 0.03%)</title><rect x="74.1403%" y="373" width="0.0344%" height="15" fill="rgb(233,39,42)" fg:x="2156" fg:w="1"/><text x="74.3903%" y="383.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_unchecked (1 samples, 0.03%)</title><rect x="74.1403%" y="357" width="0.0344%" height="15" fill="rgb(238,110,33)" fg:x="2156" fg:w="1"/><text x="74.3903%" y="367.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_checked_chunkmap (1 samples, 0.03%)</title><rect x="74.1403%" y="341" width="0.0344%" height="15" fill="rgb(233,195,10)" fg:x="2156" fg:w="1"/><text x="74.3903%" y="351.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_checked_sizeclass (1 samples, 0.03%)</title><rect x="74.1403%" y="325" width="0.0344%" height="15" fill="rgb(254,105,3)" fg:x="2156" fg:w="1"/><text x="74.3903%" y="335.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_start (1 samples, 0.03%)</title><rect x="74.1403%" y="309" width="0.0344%" height="15" fill="rgb(221,225,9)" fg:x="2156" fg:w="1"/><text x="74.3903%" y="319.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_offseted (1 samples, 0.03%)</title><rect x="74.1403%" y="293" width="0.0344%" height="15" fill="rgb(224,227,45)" fg:x="2156" fg:w="1"/><text x="74.3903%" y="303.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_offseted_inner (1 samples, 0.03%)</title><rect x="74.1403%" y="277" width="0.0344%" height="15" fill="rgb(229,198,43)" fg:x="2156" fg:w="1"/><text x="74.3903%" y="287.50"></text></g><g><title>snmalloc::Slab::dealloc_fast (1 samples, 0.03%)</title><rect x="74.1403%" y="261" width="0.0344%" height="15" fill="rgb(206,209,35)" fg:x="2156" fg:w="1"/><text x="74.3903%" y="271.50"></text></g><g><title>snmalloc::FreeListBuilder&lt;false, snmalloc::MetaslabEnd&gt;::add (1 samples, 0.03%)</title><rect x="74.1403%" y="245" width="0.0344%" height="15" fill="rgb(245,195,53)" fg:x="2156" fg:w="1"/><text x="74.3903%" y="255.50"></text></g><g><title>snmalloc::EncodeFreeObjectReference::store (1 samples, 0.03%)</title><rect x="74.1403%" y="229" width="0.0344%" height="15" fill="rgb(240,92,26)" fg:x="2156" fg:w="1"/><text x="74.3903%" y="239.50"></text></g><g><title>[anon] (2 samples, 0.07%)</title><rect x="74.1403%" y="405" width="0.0688%" height="15" fill="rgb(207,40,23)" fg:x="2156" fg:w="2"/><text x="74.3903%" y="415.50"></text></g><g><title>rust_dealloc (2 samples, 0.07%)</title><rect x="74.1403%" y="389" width="0.0688%" height="15" fill="rgb(223,111,35)" fg:x="2156" fg:w="2"/><text x="74.3903%" y="399.50"></text></g><g><title>snmalloc::ThreadAllocCommon::get_noncachable (1 samples, 0.03%)</title><rect x="74.1747%" y="373" width="0.0344%" height="15" fill="rgb(229,147,28)" fg:x="2157" fg:w="1"/><text x="74.4247%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="77.1320%" y="357" width="0.0344%" height="15" fill="rgb(211,29,28)" fg:x="2243" fg:w="1"/><text x="77.3820%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="77.1320%" y="341" width="0.0344%" height="15" fill="rgb(228,72,33)" fg:x="2243" fg:w="1"/><text x="77.3820%" y="351.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::index_to_local_vertex (113 samples, 3.89%)</title><rect x="74.2435%" y="389" width="3.8858%" height="15" fill="rgb(205,214,31)" fg:x="2159" fg:w="113"/><text x="74.4935%" y="399.50">grap..</text></g><g><title>graph_store::graph_db_impl::IndexData&lt;G,I&gt;::get_global_id (29 samples, 1.00%)</title><rect x="77.1320%" y="373" width="0.9972%" height="15" fill="rgb(224,111,15)" fg:x="2243" fg:w="29"/><text x="77.3820%" y="383.50"></text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (28 samples, 0.96%)</title><rect x="77.1664%" y="357" width="0.9629%" height="15" fill="rgb(253,21,26)" fg:x="2244" fg:w="28"/><text x="77.4164%" y="367.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (28 samples, 0.96%)</title><rect x="77.1664%" y="341" width="0.9629%" height="15" fill="rgb(245,139,43)" fg:x="2244" fg:w="28"/><text x="77.4164%" y="351.50"></text></g><g><title>rust_dealloc (6 samples, 0.21%)</title><rect x="78.1293%" y="357" width="0.2063%" height="15" fill="rgb(252,170,7)" fg:x="2272" fg:w="6"/><text x="78.3793%" y="367.50"></text></g><g><title>snmalloc::FreeListBuilder&lt;false, snmalloc::MetaslabEnd&gt;::add (2 samples, 0.07%)</title><rect x="78.3356%" y="245" width="0.0688%" height="15" fill="rgb(231,118,14)" fg:x="2278" fg:w="2"/><text x="78.5856%" y="255.50"></text></g><g><title>snmalloc::EncodeFreeObjectReference::store (2 samples, 0.07%)</title><rect x="78.3356%" y="229" width="0.0688%" height="15" fill="rgb(238,83,0)" fg:x="2278" fg:w="2"/><text x="78.5856%" y="239.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::dealloc (9 samples, 0.31%)</title><rect x="78.1293%" y="373" width="0.3095%" height="15" fill="rgb(221,39,39)" fg:x="2272" fg:w="9"/><text x="78.3793%" y="383.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_unchecked (3 samples, 0.10%)</title><rect x="78.3356%" y="357" width="0.1032%" height="15" fill="rgb(222,119,46)" fg:x="2278" fg:w="3"/><text x="78.5856%" y="367.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_checked_chunkmap (3 samples, 0.10%)</title><rect x="78.3356%" y="341" width="0.1032%" height="15" fill="rgb(222,165,49)" fg:x="2278" fg:w="3"/><text x="78.5856%" y="351.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_checked_sizeclass (3 samples, 0.10%)</title><rect x="78.3356%" y="325" width="0.1032%" height="15" fill="rgb(219,113,52)" fg:x="2278" fg:w="3"/><text x="78.5856%" y="335.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_start (3 samples, 0.10%)</title><rect x="78.3356%" y="309" width="0.1032%" height="15" fill="rgb(214,7,15)" fg:x="2278" fg:w="3"/><text x="78.5856%" y="319.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_offseted (3 samples, 0.10%)</title><rect x="78.3356%" y="293" width="0.1032%" height="15" fill="rgb(235,32,4)" fg:x="2278" fg:w="3"/><text x="78.5856%" y="303.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_offseted_inner (3 samples, 0.10%)</title><rect x="78.3356%" y="277" width="0.1032%" height="15" fill="rgb(238,90,54)" fg:x="2278" fg:w="3"/><text x="78.5856%" y="287.50"></text></g><g><title>snmalloc::Slab::dealloc_fast (3 samples, 0.10%)</title><rect x="78.3356%" y="261" width="0.1032%" height="15" fill="rgb(213,208,19)" fg:x="2278" fg:w="3"/><text x="78.5856%" y="271.50"></text></g><g><title>snmalloc::Superslab::get_meta&lt;(snmalloc::capptr_bounds)1&gt; (1 samples, 0.03%)</title><rect x="78.4044%" y="245" width="0.0344%" height="15" fill="rgb(233,156,4)" fg:x="2280" fg:w="1"/><text x="78.6544%" y="255.50"></text></g><g><title>snmalloc::ModArray&lt;64ul, snmalloc::Metaslab&gt;::operator[] (1 samples, 0.03%)</title><rect x="78.4044%" y="229" width="0.0344%" height="15" fill="rgb(207,194,5)" fg:x="2280" fg:w="1"/><text x="78.6544%" y="239.50"></text></g><g><title>[unknown] (126 samples, 4.33%)</title><rect x="74.2091%" y="405" width="4.3329%" height="15" fill="rgb(206,111,30)" fg:x="2158" fg:w="126"/><text x="74.4591%" y="415.50">[unkn..</text></g><g><title>rust_dealloc (12 samples, 0.41%)</title><rect x="78.1293%" y="389" width="0.4127%" height="15" fill="rgb(243,70,54)" fg:x="2272" fg:w="12"/><text x="78.3793%" y="399.50"></text></g><g><title>snmalloc::ThreadAllocCommon::get_noncachable (3 samples, 0.10%)</title><rect x="78.4388%" y="373" width="0.1032%" height="15" fill="rgb(242,28,8)" fg:x="2281" fg:w="3"/><text x="78.6888%" y="383.50"></text></g><g><title>__GI___clone (5 samples, 0.17%)</title><rect x="78.5420%" y="405" width="0.1719%" height="15" fill="rgb(219,106,18)" fg:x="2284" fg:w="5"/><text x="78.7920%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="78.5420%" y="389" width="0.1719%" height="15" fill="rgb(244,222,10)" fg:x="2284" fg:w="5"/><text x="78.7920%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="78.5420%" y="373" width="0.1719%" height="15" fill="rgb(236,179,52)" fg:x="2284" fg:w="5"/><text x="78.7920%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="78.5420%" y="357" width="0.1719%" height="15" fill="rgb(213,23,39)" fg:x="2284" fg:w="5"/><text x="78.7920%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="78.5420%" y="341" width="0.1719%" height="15" fill="rgb(238,48,10)" fg:x="2284" fg:w="5"/><text x="78.7920%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="78.5420%" y="325" width="0.1719%" height="15" fill="rgb(251,196,23)" fg:x="2284" fg:w="5"/><text x="78.7920%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="78.5420%" y="309" width="0.1719%" height="15" fill="rgb(250,152,24)" fg:x="2284" fg:w="5"/><text x="78.7920%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="78.5420%" y="293" width="0.1719%" height="15" fill="rgb(209,150,17)" fg:x="2284" fg:w="5"/><text x="78.7920%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="78.5420%" y="277" width="0.1719%" height="15" fill="rgb(234,202,34)" fg:x="2284" fg:w="5"/><text x="78.7920%" y="287.50"></text></g><g><title>__rg_alloc (1 samples, 0.03%)</title><rect x="78.7139%" y="405" width="0.0344%" height="15" fill="rgb(253,148,53)" fg:x="2289" fg:w="1"/><text x="78.9639%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.03%)</title><rect x="78.7139%" y="389" width="0.0344%" height="15" fill="rgb(218,129,16)" fg:x="2289" fg:w="1"/><text x="78.9639%" y="399.50"></text></g><g><title>__rg_dealloc (1 samples, 0.03%)</title><rect x="78.7483%" y="405" width="0.0344%" height="15" fill="rgb(216,85,19)" fg:x="2290" fg:w="1"/><text x="78.9983%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.03%)</title><rect x="78.7483%" y="389" width="0.0344%" height="15" fill="rgb(235,228,7)" fg:x="2290" fg:w="1"/><text x="78.9983%" y="399.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="78.7827%" y="405" width="0.0344%" height="15" fill="rgb(245,175,0)" fg:x="2291" fg:w="1"/><text x="79.0327%" y="415.50"></text></g><g><title>__rust_dealloc (3 samples, 0.10%)</title><rect x="78.8171%" y="405" width="0.1032%" height="15" fill="rgb(208,168,36)" fg:x="2292" fg:w="3"/><text x="79.0671%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="78.9202%" y="373" width="0.0344%" height="15" fill="rgb(246,171,24)" fg:x="2295" fg:w="1"/><text x="79.1702%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.10%)</title><rect x="78.9546%" y="373" width="0.1032%" height="15" fill="rgb(215,142,24)" fg:x="2296" fg:w="3"/><text x="79.2046%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (1 samples, 0.03%)</title><rect x="79.0578%" y="373" width="0.0344%" height="15" fill="rgb(250,187,7)" fg:x="2299" fg:w="1"/><text x="79.3078%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.21%)</title><rect x="78.9202%" y="405" width="0.2063%" height="15" fill="rgb(228,66,33)" fg:x="2295" fg:w="6"/><text x="79.1702%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.21%)</title><rect x="78.9202%" y="389" width="0.2063%" height="15" fill="rgb(234,215,21)" fg:x="2295" fg:w="6"/><text x="79.1702%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="79.0922%" y="373" width="0.0344%" height="15" fill="rgb(222,191,20)" fg:x="2300" fg:w="1"/><text x="79.3422%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.03%)</title><rect x="79.0922%" y="357" width="0.0344%" height="15" fill="rgb(245,79,54)" fg:x="2300" fg:w="1"/><text x="79.3422%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.14%)</title><rect x="79.1265%" y="405" width="0.1376%" height="15" fill="rgb(240,10,37)" fg:x="2301" fg:w="4"/><text x="79.3765%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.21%)</title><rect x="79.3329%" y="373" width="0.2063%" height="15" fill="rgb(214,192,32)" fg:x="2307" fg:w="6"/><text x="79.5829%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.21%)</title><rect x="79.3329%" y="357" width="0.2063%" height="15" fill="rgb(209,36,54)" fg:x="2307" fg:w="6"/><text x="79.5829%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.21%)</title><rect x="79.3329%" y="341" width="0.2063%" height="15" fill="rgb(220,10,11)" fg:x="2307" fg:w="6"/><text x="79.5829%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.21%)</title><rect x="79.3329%" y="325" width="0.2063%" height="15" fill="rgb(221,106,17)" fg:x="2307" fg:w="6"/><text x="79.5829%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6 samples, 0.21%)</title><rect x="79.3329%" y="309" width="0.2063%" height="15" fill="rgb(251,142,44)" fg:x="2307" fg:w="6"/><text x="79.5829%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.21%)</title><rect x="79.3329%" y="293" width="0.2063%" height="15" fill="rgb(238,13,15)" fg:x="2307" fg:w="6"/><text x="79.5829%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.07%)</title><rect x="79.4704%" y="277" width="0.0688%" height="15" fill="rgb(208,107,27)" fg:x="2311" fg:w="2"/><text x="79.7204%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="79.5392%" y="373" width="0.0344%" height="15" fill="rgb(205,136,37)" fg:x="2313" fg:w="1"/><text x="79.7892%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt; (1 samples, 0.03%)</title><rect x="79.5736%" y="373" width="0.0344%" height="15" fill="rgb(250,205,27)" fg:x="2314" fg:w="1"/><text x="79.8236%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;graph_store::graph_db::RowWithSchema&gt;&gt; (1 samples, 0.03%)</title><rect x="79.5736%" y="357" width="0.0344%" height="15" fill="rgb(210,80,43)" fg:x="2314" fg:w="1"/><text x="79.8236%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (13 samples, 0.45%)</title><rect x="79.2641%" y="405" width="0.4470%" height="15" fill="rgb(247,160,36)" fg:x="2305" fg:w="13"/><text x="79.5141%" y="415.50"></text></g><g><title>benchmark1_q_complete::q_benchmark_composition3::{{closure}}::{{closure}}::{{closure}}::{{closure}} (11 samples, 0.38%)</title><rect x="79.3329%" y="389" width="0.3783%" height="15" fill="rgb(234,13,49)" fg:x="2307" fg:w="11"/><text x="79.5829%" y="399.50"></text></g><g><title>graph_store::graph_db::LocalVertex&lt;G&gt;::get_id (3 samples, 0.10%)</title><rect x="79.6080%" y="373" width="0.1032%" height="15" fill="rgb(234,122,0)" fg:x="2315" fg:w="3"/><text x="79.8580%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt; (80 samples, 2.75%)</title><rect x="79.7111%" y="405" width="2.7510%" height="15" fill="rgb(207,146,38)" fg:x="2318" fg:w="80"/><text x="79.9611%" y="415.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;graph_store::graph_db::RowWithSchema&gt;&gt; (23 samples, 0.79%)</title><rect x="81.6713%" y="389" width="0.7909%" height="15" fill="rgb(207,177,25)" fg:x="2375" fg:w="23"/><text x="81.9213%" y="399.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (1 samples, 0.03%)</title><rect x="82.4622%" y="405" width="0.0344%" height="15" fill="rgb(211,178,42)" fg:x="2398" fg:w="1"/><text x="82.7122%" y="415.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::{{closure}} (1 samples, 0.03%)</title><rect x="82.4622%" y="389" width="0.0344%" height="15" fill="rgb(230,69,54)" fg:x="2398" fg:w="1"/><text x="82.7122%" y="399.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (1 samples, 0.03%)</title><rect x="82.4622%" y="373" width="0.0344%" height="15" fill="rgb(214,135,41)" fg:x="2398" fg:w="1"/><text x="82.7122%" y="383.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (1 samples, 0.03%)</title><rect x="82.4622%" y="357" width="0.0344%" height="15" fill="rgb(237,67,25)" fg:x="2398" fg:w="1"/><text x="82.7122%" y="367.50"></text></g><g><title>__GI___sched_yield (1 samples, 0.03%)</title><rect x="82.4622%" y="341" width="0.0344%" height="15" fill="rgb(222,189,50)" fg:x="2398" fg:w="1"/><text x="82.7122%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="82.4622%" y="325" width="0.0344%" height="15" fill="rgb(245,148,34)" fg:x="2398" fg:w="1"/><text x="82.7122%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="82.4622%" y="309" width="0.0344%" height="15" fill="rgb(222,29,6)" fg:x="2398" fg:w="1"/><text x="82.7122%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="82.4622%" y="293" width="0.0344%" height="15" fill="rgb(221,189,43)" fg:x="2398" fg:w="1"/><text x="82.7122%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="83.1499%" y="277" width="0.0344%" height="15" fill="rgb(207,36,27)" fg:x="2418" fg:w="1"/><text x="83.3999%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="83.1499%" y="261" width="0.0344%" height="15" fill="rgb(217,90,24)" fg:x="2418" fg:w="1"/><text x="83.3999%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="83.1499%" y="245" width="0.0344%" height="15" fill="rgb(224,66,35)" fg:x="2418" fg:w="1"/><text x="83.3999%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="83.1499%" y="293" width="0.0688%" height="15" fill="rgb(221,13,50)" fg:x="2418" fg:w="2"/><text x="83.3999%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (1 samples, 0.03%)</title><rect x="83.1843%" y="277" width="0.0344%" height="15" fill="rgb(236,68,49)" fg:x="2419" fg:w="1"/><text x="83.4343%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.03%)</title><rect x="83.1843%" y="261" width="0.0344%" height="15" fill="rgb(229,146,28)" fg:x="2419" fg:w="1"/><text x="83.4343%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.03%)</title><rect x="83.1843%" y="245" width="0.0344%" height="15" fill="rgb(225,31,38)" fg:x="2419" fg:w="1"/><text x="83.4343%" y="255.50"></text></g><g><title>graph_store::graph_db_impl::IndexData&lt;G,I&gt;::get_internal_id (21 samples, 0.72%)</title><rect x="82.6341%" y="389" width="0.7221%" height="15" fill="rgb(250,208,3)" fg:x="2403" fg:w="21"/><text x="82.8841%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (20 samples, 0.69%)</title><rect x="82.6685%" y="373" width="0.6878%" height="15" fill="rgb(246,54,23)" fg:x="2404" fg:w="20"/><text x="82.9185%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (20 samples, 0.69%)</title><rect x="82.6685%" y="357" width="0.6878%" height="15" fill="rgb(243,76,11)" fg:x="2404" fg:w="20"/><text x="82.9185%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (20 samples, 0.69%)</title><rect x="82.6685%" y="341" width="0.6878%" height="15" fill="rgb(245,21,50)" fg:x="2404" fg:w="20"/><text x="82.9185%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (19 samples, 0.65%)</title><rect x="82.7029%" y="325" width="0.6534%" height="15" fill="rgb(228,9,43)" fg:x="2405" fg:w="19"/><text x="82.9529%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (19 samples, 0.65%)</title><rect x="82.7029%" y="309" width="0.6534%" height="15" fill="rgb(208,100,47)" fg:x="2405" fg:w="19"/><text x="82.9529%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (4 samples, 0.14%)</title><rect x="83.2187%" y="293" width="0.1376%" height="15" fill="rgb(232,26,8)" fg:x="2420" fg:w="4"/><text x="83.4687%" y="303.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (4 samples, 0.14%)</title><rect x="83.2187%" y="277" width="0.1376%" height="15" fill="rgb(216,166,38)" fg:x="2420" fg:w="4"/><text x="83.4687%" y="287.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (4 samples, 0.14%)</title><rect x="83.2187%" y="261" width="0.1376%" height="15" fill="rgb(251,202,51)" fg:x="2420" fg:w="4"/><text x="83.4687%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.14%)</title><rect x="83.2187%" y="245" width="0.1376%" height="15" fill="rgb(254,216,34)" fg:x="2420" fg:w="4"/><text x="83.4687%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.14%)</title><rect x="83.2187%" y="229" width="0.1376%" height="15" fill="rgb(251,32,27)" fg:x="2420" fg:w="4"/><text x="83.4687%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.14%)</title><rect x="83.2187%" y="213" width="0.1376%" height="15" fill="rgb(208,127,28)" fg:x="2420" fg:w="4"/><text x="83.4687%" y="223.50"></text></g><g><title>graph_store::utils::Iter&lt;T&gt;::from_iter (2 samples, 0.07%)</title><rect x="83.3563%" y="389" width="0.0688%" height="15" fill="rgb(224,137,22)" fg:x="2424" fg:w="2"/><text x="83.6063%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.07%)</title><rect x="83.3563%" y="373" width="0.0688%" height="15" fill="rgb(254,70,32)" fg:x="2424" fg:w="2"/><text x="83.6063%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.03%)</title><rect x="83.3906%" y="357" width="0.0344%" height="15" fill="rgb(229,75,37)" fg:x="2425" fg:w="1"/><text x="83.6406%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="83.3906%" y="341" width="0.0344%" height="15" fill="rgb(252,64,23)" fg:x="2425" fg:w="1"/><text x="83.6406%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="83.3906%" y="325" width="0.0344%" height="15" fill="rgb(232,162,48)" fg:x="2425" fg:w="1"/><text x="83.6406%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="83.3906%" y="309" width="0.0344%" height="15" fill="rgb(246,160,12)" fg:x="2425" fg:w="1"/><text x="83.6406%" y="319.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices (30 samples, 1.03%)</title><rect x="82.4966%" y="405" width="1.0316%" height="15" fill="rgb(247,166,0)" fg:x="2399" fg:w="30"/><text x="82.7466%" y="415.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (3 samples, 0.10%)</title><rect x="83.4250%" y="389" width="0.1032%" height="15" fill="rgb(249,219,21)" fg:x="2426" fg:w="3"/><text x="83.6750%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="86.8294%" y="389" width="0.0344%" height="15" fill="rgb(205,209,3)" fg:x="2525" fg:w="1"/><text x="87.0794%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="86.8294%" y="373" width="0.0344%" height="15" fill="rgb(243,44,1)" fg:x="2525" fg:w="1"/><text x="87.0794%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="86.8294%" y="357" width="0.0344%" height="15" fill="rgb(206,159,16)" fg:x="2525" fg:w="1"/><text x="87.0794%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="86.8294%" y="341" width="0.0344%" height="15" fill="rgb(244,77,30)" fg:x="2525" fg:w="1"/><text x="87.0794%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="86.8294%" y="325" width="0.0344%" height="15" fill="rgb(218,69,12)" fg:x="2525" fg:w="1"/><text x="87.0794%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="86.8294%" y="309" width="0.0344%" height="15" fill="rgb(212,87,7)" fg:x="2525" fg:w="1"/><text x="87.0794%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="86.8294%" y="293" width="0.0344%" height="15" fill="rgb(245,114,25)" fg:x="2525" fg:w="1"/><text x="87.0794%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="86.8294%" y="277" width="0.0344%" height="15" fill="rgb(210,61,42)" fg:x="2525" fg:w="1"/><text x="87.0794%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="86.8294%" y="261" width="0.0344%" height="15" fill="rgb(211,52,33)" fg:x="2525" fg:w="1"/><text x="87.0794%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="86.8294%" y="245" width="0.0344%" height="15" fill="rgb(234,58,33)" fg:x="2525" fg:w="1"/><text x="87.0794%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="86.8294%" y="229" width="0.0344%" height="15" fill="rgb(220,115,36)" fg:x="2525" fg:w="1"/><text x="87.0794%" y="239.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::index_to_local_vertex (119 samples, 4.09%)</title><rect x="83.5282%" y="405" width="4.0922%" height="15" fill="rgb(243,153,54)" fg:x="2429" fg:w="119"/><text x="83.7782%" y="415.50">grap..</text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (22 samples, 0.76%)</title><rect x="86.8638%" y="389" width="0.7565%" height="15" fill="rgb(251,47,18)" fg:x="2526" fg:w="22"/><text x="87.1138%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (22 samples, 0.76%)</title><rect x="86.8638%" y="373" width="0.7565%" height="15" fill="rgb(242,102,42)" fg:x="2526" fg:w="22"/><text x="87.1138%" y="383.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (22 samples, 0.76%)</title><rect x="86.8638%" y="357" width="0.7565%" height="15" fill="rgb(234,31,38)" fg:x="2526" fg:w="22"/><text x="87.1138%" y="367.50"></text></g><g><title>core::clone::Clone::clone (22 samples, 0.76%)</title><rect x="86.8638%" y="341" width="0.7565%" height="15" fill="rgb(221,117,51)" fg:x="2526" fg:w="22"/><text x="87.1138%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.17%)</title><rect x="87.6547%" y="341" width="0.1719%" height="15" fill="rgb(212,20,18)" fg:x="2549" fg:w="5"/><text x="87.9047%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.14%)</title><rect x="87.6891%" y="325" width="0.1376%" height="15" fill="rgb(245,133,36)" fg:x="2550" fg:w="4"/><text x="87.9391%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="87.8267%" y="325" width="0.0688%" height="15" fill="rgb(212,6,19)" fg:x="2554" fg:w="2"/><text x="88.0767%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (9 samples, 0.31%)</title><rect x="87.6204%" y="389" width="0.3095%" height="15" fill="rgb(218,1,36)" fg:x="2548" fg:w="9"/><text x="87.8704%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (9 samples, 0.31%)</title><rect x="87.6204%" y="373" width="0.3095%" height="15" fill="rgb(246,84,54)" fg:x="2548" fg:w="9"/><text x="87.8704%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (9 samples, 0.31%)</title><rect x="87.6204%" y="357" width="0.3095%" height="15" fill="rgb(242,110,6)" fg:x="2548" fg:w="9"/><text x="87.8704%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.10%)</title><rect x="87.8267%" y="341" width="0.1032%" height="15" fill="rgb(214,47,5)" fg:x="2554" fg:w="3"/><text x="88.0767%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="87.8955%" y="325" width="0.0344%" height="15" fill="rgb(218,159,25)" fg:x="2556" fg:w="1"/><text x="88.1455%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (12 samples, 0.41%)</title><rect x="87.6204%" y="405" width="0.4127%" height="15" fill="rgb(215,211,28)" fg:x="2548" fg:w="12"/><text x="87.8704%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (3 samples, 0.10%)</title><rect x="87.9298%" y="389" width="0.1032%" height="15" fill="rgb(238,59,32)" fg:x="2557" fg:w="3"/><text x="88.1798%" y="399.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.10%)</title><rect x="87.9298%" y="373" width="0.1032%" height="15" fill="rgb(226,82,3)" fg:x="2557" fg:w="3"/><text x="88.1798%" y="383.50"></text></g><g><title>pegasus::api::scope::MergedScopeDelta::evolve (1 samples, 0.03%)</title><rect x="88.0330%" y="405" width="0.0344%" height="15" fill="rgb(240,164,32)" fg:x="2560" fg:w="1"/><text x="88.2830%" y="415.50"></text></g><g><title>&lt;graph_store::utils::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.89%)</title><rect x="97.0770%" y="373" width="0.8941%" height="15" fill="rgb(232,46,7)" fg:x="2823" fg:w="26"/><text x="97.3270%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;I,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.89%)</title><rect x="97.0770%" y="357" width="0.8941%" height="15" fill="rgb(229,129,53)" fg:x="2823" fg:w="26"/><text x="97.3270%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.03%)</title><rect x="97.9711%" y="373" width="0.0344%" height="15" fill="rgb(234,188,29)" fg:x="2849" fg:w="1"/><text x="98.2211%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="97.9711%" y="357" width="0.0344%" height="15" fill="rgb(246,141,4)" fg:x="2849" fg:w="1"/><text x="98.2211%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="97.9711%" y="341" width="0.0344%" height="15" fill="rgb(229,23,39)" fg:x="2849" fg:w="1"/><text x="98.2211%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="97.9711%" y="325" width="0.0344%" height="15" fill="rgb(206,12,3)" fg:x="2849" fg:w="1"/><text x="98.2211%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (1 samples, 0.03%)</title><rect x="98.0055%" y="373" width="0.0344%" height="15" fill="rgb(252,226,20)" fg:x="2850" fg:w="1"/><text x="98.2555%" y="383.50"></text></g><g><title>alloc::slice::hack::into_vec (1 samples, 0.03%)</title><rect x="98.0055%" y="357" width="0.0344%" height="15" fill="rgb(216,123,35)" fg:x="2850" fg:w="1"/><text x="98.2555%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (1 samples, 0.03%)</title><rect x="98.0055%" y="341" width="0.0344%" height="15" fill="rgb(212,68,40)" fg:x="2850" fg:w="1"/><text x="98.2555%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.07%)</title><rect x="98.0399%" y="373" width="0.0688%" height="15" fill="rgb(254,125,32)" fg:x="2851" fg:w="2"/><text x="98.2899%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.07%)</title><rect x="98.0399%" y="357" width="0.0688%" height="15" fill="rgb(253,97,22)" fg:x="2851" fg:w="2"/><text x="98.2899%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="98.0399%" y="341" width="0.0688%" height="15" fill="rgb(241,101,14)" fg:x="2851" fg:w="2"/><text x="98.2899%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="98.0743%" y="325" width="0.0344%" height="15" fill="rgb(238,103,29)" fg:x="2852" fg:w="1"/><text x="98.3243%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="98.0743%" y="309" width="0.0344%" height="15" fill="rgb(233,195,47)" fg:x="2852" fg:w="1"/><text x="98.3243%" y="319.50"></text></g><g><title>benchmark1_q_complete::q_benchmark_composition4::{{closure}}::{{closure}}::{{closure}} (296 samples, 10.18%)</title><rect x="88.0674%" y="389" width="10.1788%" height="15" fill="rgb(246,218,30)" fg:x="2561" fg:w="296"/><text x="88.3174%" y="399.50">benchmark1_q_co..</text></g><g><title>core::ptr::drop_in_place&lt;graph_store::utils::Iter&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt;&gt; (4 samples, 0.14%)</title><rect x="98.1087%" y="373" width="0.1376%" height="15" fill="rgb(219,145,47)" fg:x="2853" fg:w="4"/><text x="98.3587%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::iter::traits::iterator::Iterator+Item = graph_store::graph_db::LocalVertex&lt;usize&gt;+core::marker::Send&gt;&gt; (4 samples, 0.14%)</title><rect x="98.1087%" y="357" width="0.1376%" height="15" fill="rgb(243,12,26)" fg:x="2853" fg:w="4"/><text x="98.3587%" y="367.50"></text></g><g><title>alloc::alloc::box_free (2 samples, 0.07%)</title><rect x="98.1774%" y="341" width="0.0688%" height="15" fill="rgb(214,87,16)" fg:x="2855" fg:w="2"/><text x="98.4274%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="98.1774%" y="325" width="0.0688%" height="15" fill="rgb(208,99,42)" fg:x="2855" fg:w="2"/><text x="98.4274%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="98.1774%" y="309" width="0.0688%" height="15" fill="rgb(253,99,2)" fg:x="2855" fg:w="2"/><text x="98.4274%" y="319.50"></text></g><g><title>pegasus::operator::concise::filter::&lt;impl pegasus::api::concise::filter::Filter&lt;D&gt; for pegasus::stream::Stream&lt;D&gt;&gt;::filter::{{closure}} (297 samples, 10.21%)</title><rect x="88.0674%" y="405" width="10.2132%" height="15" fill="rgb(220,168,23)" fg:x="2561" fg:w="297"/><text x="88.3174%" y="415.50">pegasus::operat..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (1 samples, 0.03%)</title><rect x="98.2462%" y="389" width="0.0344%" height="15" fill="rgb(242,38,24)" fg:x="2857" fg:w="1"/><text x="98.4962%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (1 samples, 0.03%)</title><rect x="98.2462%" y="373" width="0.0344%" height="15" fill="rgb(225,182,9)" fg:x="2857" fg:w="1"/><text x="98.4962%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="98.2462%" y="357" width="0.0344%" height="15" fill="rgb(243,178,37)" fg:x="2857" fg:w="1"/><text x="98.4962%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="98.2462%" y="341" width="0.0344%" height="15" fill="rgb(232,139,19)" fg:x="2857" fg:w="1"/><text x="98.4962%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="98.2462%" y="325" width="0.0344%" height="15" fill="rgb(225,201,24)" fg:x="2857" fg:w="1"/><text x="98.4962%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_read (3 samples, 0.10%)</title><rect x="98.4182%" y="341" width="0.1032%" height="15" fill="rgb(221,47,46)" fg:x="2862" fg:w="3"/><text x="98.6682%" y="351.50"></text></g><g><title>core::ptr::read (3 samples, 0.10%)</title><rect x="98.4182%" y="325" width="0.1032%" height="15" fill="rgb(249,23,13)" fg:x="2862" fg:w="3"/><text x="98.6682%" y="335.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.14%)</title><rect x="98.4182%" y="389" width="0.1376%" height="15" fill="rgb(219,9,5)" fg:x="2862" fg:w="4"/><text x="98.6682%" y="399.50"></text></g><g><title>&lt;pegasus_common::buffer::rob::Batch&lt;D&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.14%)</title><rect x="98.4182%" y="373" width="0.1376%" height="15" fill="rgb(254,171,16)" fg:x="2862" fg:w="4"/><text x="98.6682%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (4 samples, 0.14%)</title><rect x="98.4182%" y="357" width="0.1376%" height="15" fill="rgb(230,171,20)" fg:x="2862" fg:w="4"/><text x="98.6682%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (1 samples, 0.03%)</title><rect x="98.5213%" y="341" width="0.0344%" height="15" fill="rgb(210,71,41)" fg:x="2865" fg:w="1"/><text x="98.7713%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (1 samples, 0.03%)</title><rect x="98.5213%" y="325" width="0.0344%" height="15" fill="rgb(206,173,20)" fg:x="2865" fg:w="1"/><text x="98.7713%" y="335.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::filter_map::{{closure}}::{{closure}}::{{closure}} (10 samples, 0.34%)</title><rect x="98.2806%" y="405" width="0.3439%" height="15" fill="rgb(233,88,34)" fg:x="2858" fg:w="10"/><text x="98.5306%" y="415.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give (2 samples, 0.07%)</title><rect x="98.5557%" y="389" width="0.0688%" height="15" fill="rgb(223,209,46)" fg:x="2866" fg:w="2"/><text x="98.8057%" y="399.50"></text></g><g><title>&lt;pegasus::communication::output::output::rob::OutputHandle&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::push (1 samples, 0.03%)</title><rect x="98.5901%" y="373" width="0.0344%" height="15" fill="rgb(250,43,18)" fg:x="2867" fg:w="1"/><text x="98.8401%" y="383.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (3 samples, 0.10%)</title><rect x="98.6245%" y="405" width="0.1032%" height="15" fill="rgb(208,13,10)" fg:x="2868" fg:w="3"/><text x="98.8745%" y="415.50"></text></g><g><title>benchmark1_q_complete::q_benchmark_composition4::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="98.6933%" y="389" width="0.0344%" height="15" fill="rgb(212,200,36)" fg:x="2870" fg:w="1"/><text x="98.9433%" y="399.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::push (9 samples, 0.31%)</title><rect x="98.7276%" y="405" width="0.3095%" height="15" fill="rgb(225,90,30)" fg:x="2871" fg:w="9"/><text x="98.9776%" y="415.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_back (1 samples, 0.03%)</title><rect x="99.0028%" y="389" width="0.0344%" height="15" fill="rgb(236,182,39)" fg:x="2879" fg:w="1"/><text x="99.2528%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (1 samples, 0.03%)</title><rect x="99.0028%" y="373" width="0.0344%" height="15" fill="rgb(212,144,35)" fg:x="2879" fg:w="1"/><text x="99.2528%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="99.0028%" y="357" width="0.0344%" height="15" fill="rgb(228,63,44)" fg:x="2879" fg:w="1"/><text x="99.2528%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.0028%" y="341" width="0.0344%" height="15" fill="rgb(228,109,6)" fg:x="2879" fg:w="1"/><text x="99.2528%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.0028%" y="325" width="0.0344%" height="15" fill="rgb(238,117,24)" fg:x="2879" fg:w="1"/><text x="99.2528%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.0028%" y="309" width="0.0344%" height="15" fill="rgb(242,26,26)" fg:x="2879" fg:w="1"/><text x="99.2528%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.0028%" y="293" width="0.0344%" height="15" fill="rgb(221,92,48)" fg:x="2879" fg:w="1"/><text x="99.2528%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.0028%" y="277" width="0.0344%" height="15" fill="rgb(209,209,32)" fg:x="2879" fg:w="1"/><text x="99.2528%" y="287.50"></text></g><g><title>rust_alloc (1 samples, 0.03%)</title><rect x="99.1059%" y="389" width="0.0344%" height="15" fill="rgb(221,70,22)" fg:x="2882" fg:w="1"/><text x="99.3559%" y="399.50"></text></g><g><title>rust_alloc (6 samples, 0.21%)</title><rect x="99.0371%" y="405" width="0.2063%" height="15" fill="rgb(248,145,5)" fg:x="2880" fg:w="6"/><text x="99.2871%" y="415.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::alloc&lt;(snmalloc::ZeroMem)0&gt; (3 samples, 0.10%)</title><rect x="99.1403%" y="389" width="0.1032%" height="15" fill="rgb(226,116,26)" fg:x="2883" fg:w="3"/><text x="99.3903%" y="399.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (2 samples, 0.07%)</title><rect x="99.1747%" y="373" width="0.0688%" height="15" fill="rgb(244,5,17)" fg:x="2884" fg:w="2"/><text x="99.4247%" y="383.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_alloc_inner&lt;(snmalloc::ZeroMem)0&gt; (2 samples, 0.07%)</title><rect x="99.1747%" y="357" width="0.0688%" height="15" fill="rgb(252,159,33)" fg:x="2884" fg:w="2"/><text x="99.4247%" y="367.50"></text></g><g><title>snmalloc::FreeListIter::take (1 samples, 0.03%)</title><rect x="99.2091%" y="341" width="0.0344%" height="15" fill="rgb(206,71,0)" fg:x="2885" fg:w="1"/><text x="99.4591%" y="351.50"></text></g><g><title>snmalloc::FreeListIter::update_cursor (1 samples, 0.03%)</title><rect x="99.2091%" y="325" width="0.0344%" height="15" fill="rgb(233,118,54)" fg:x="2885" fg:w="1"/><text x="99.4591%" y="335.50"></text></g><g><title>rust_dealloc (1 samples, 0.03%)</title><rect x="99.2435%" y="373" width="0.0344%" height="15" fill="rgb(234,83,48)" fg:x="2886" fg:w="1"/><text x="99.4935%" y="383.50"></text></g><g><title>rust_dealloc (3 samples, 0.10%)</title><rect x="99.2435%" y="405" width="0.1032%" height="15" fill="rgb(228,3,54)" fg:x="2886" fg:w="3"/><text x="99.4935%" y="415.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::dealloc (3 samples, 0.10%)</title><rect x="99.2435%" y="389" width="0.1032%" height="15" fill="rgb(226,155,13)" fg:x="2886" fg:w="3"/><text x="99.4935%" y="399.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_unchecked (2 samples, 0.07%)</title><rect x="99.2779%" y="373" width="0.0688%" height="15" fill="rgb(241,28,37)" fg:x="2887" fg:w="2"/><text x="99.5279%" y="383.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_checked_chunkmap (2 samples, 0.07%)</title><rect x="99.2779%" y="357" width="0.0688%" height="15" fill="rgb(233,93,10)" fg:x="2887" fg:w="2"/><text x="99.5279%" y="367.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_checked_sizeclass (2 samples, 0.07%)</title><rect x="99.2779%" y="341" width="0.0688%" height="15" fill="rgb(225,113,19)" fg:x="2887" fg:w="2"/><text x="99.5279%" y="351.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_start (2 samples, 0.07%)</title><rect x="99.2779%" y="325" width="0.0688%" height="15" fill="rgb(241,2,18)" fg:x="2887" fg:w="2"/><text x="99.5279%" y="335.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_offseted (2 samples, 0.07%)</title><rect x="99.2779%" y="309" width="0.0688%" height="15" fill="rgb(228,207,21)" fg:x="2887" fg:w="2"/><text x="99.5279%" y="319.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_offseted_inner (2 samples, 0.07%)</title><rect x="99.2779%" y="293" width="0.0688%" height="15" fill="rgb(213,211,35)" fg:x="2887" fg:w="2"/><text x="99.5279%" y="303.50"></text></g><g><title>snmalloc::Slab::dealloc_fast (2 samples, 0.07%)</title><rect x="99.2779%" y="277" width="0.0688%" height="15" fill="rgb(209,83,10)" fg:x="2887" fg:w="2"/><text x="99.5279%" y="287.50"></text></g><g><title>snmalloc::FreeListBuilder&lt;false, snmalloc::MetaslabEnd&gt;::add (2 samples, 0.07%)</title><rect x="99.2779%" y="261" width="0.0688%" height="15" fill="rgb(209,164,1)" fg:x="2887" fg:w="2"/><text x="99.5279%" y="271.50"></text></g><g><title>snmalloc::EncodeFreeObjectReference::store (2 samples, 0.07%)</title><rect x="99.2779%" y="245" width="0.0688%" height="15" fill="rgb(213,184,43)" fg:x="2887" fg:w="2"/><text x="99.5279%" y="255.50"></text></g><g><title>[benchmark1_q_complete] (1 samples, 0.03%)</title><rect x="99.5873%" y="373" width="0.0344%" height="15" fill="rgb(231,61,34)" fg:x="2896" fg:w="1"/><text x="99.8373%" y="383.50"></text></g><g><title>rust_realloc (8 samples, 0.28%)</title><rect x="99.4498%" y="389" width="0.2751%" height="15" fill="rgb(235,75,3)" fg:x="2892" fg:w="8"/><text x="99.6998%" y="399.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.10%)</title><rect x="99.6217%" y="373" width="0.1032%" height="15" fill="rgb(220,106,47)" fg:x="2897" fg:w="3"/><text x="99.8717%" y="383.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::alloc&lt;(snmalloc::ZeroMem)0&gt; (1 samples, 0.03%)</title><rect x="99.7249%" y="389" width="0.0344%" height="15" fill="rgb(210,196,33)" fg:x="2900" fg:w="1"/><text x="99.9749%" y="399.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (1 samples, 0.03%)</title><rect x="99.7249%" y="373" width="0.0344%" height="15" fill="rgb(229,154,42)" fg:x="2900" fg:w="1"/><text x="99.9749%" y="383.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_alloc_inner&lt;(snmalloc::ZeroMem)0&gt; (1 samples, 0.03%)</title><rect x="99.7249%" y="357" width="0.0344%" height="15" fill="rgb(228,114,26)" fg:x="2900" fg:w="1"/><text x="99.9749%" y="367.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::dealloc (1 samples, 0.03%)</title><rect x="99.7593%" y="389" width="0.0344%" height="15" fill="rgb(208,144,1)" fg:x="2901" fg:w="1"/><text x="100.0093%" y="399.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_unchecked (1 samples, 0.03%)</title><rect x="99.7593%" y="373" width="0.0344%" height="15" fill="rgb(239,112,37)" fg:x="2901" fg:w="1"/><text x="100.0093%" y="383.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_checked_chunkmap (1 samples, 0.03%)</title><rect x="99.7593%" y="357" width="0.0344%" height="15" fill="rgb(210,96,50)" fg:x="2901" fg:w="1"/><text x="100.0093%" y="367.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_checked_sizeclass (1 samples, 0.03%)</title><rect x="99.7593%" y="341" width="0.0344%" height="15" fill="rgb(222,178,2)" fg:x="2901" fg:w="1"/><text x="100.0093%" y="351.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_start (1 samples, 0.03%)</title><rect x="99.7593%" y="325" width="0.0344%" height="15" fill="rgb(226,74,18)" fg:x="2901" fg:w="1"/><text x="100.0093%" y="335.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_offseted (1 samples, 0.03%)</title><rect x="99.7593%" y="309" width="0.0344%" height="15" fill="rgb(225,67,54)" fg:x="2901" fg:w="1"/><text x="100.0093%" y="319.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_dealloc_offseted_inner (1 samples, 0.03%)</title><rect x="99.7593%" y="293" width="0.0344%" height="15" fill="rgb(251,92,32)" fg:x="2901" fg:w="1"/><text x="100.0093%" y="303.50"></text></g><g><title>snmalloc::Slab::dealloc_fast (1 samples, 0.03%)</title><rect x="99.7593%" y="277" width="0.0344%" height="15" fill="rgb(228,149,22)" fg:x="2901" fg:w="1"/><text x="100.0093%" y="287.50"></text></g><g><title>snmalloc::Superslab::get_meta&lt;(snmalloc::capptr_bounds)1&gt; (1 samples, 0.03%)</title><rect x="99.7593%" y="261" width="0.0344%" height="15" fill="rgb(243,54,13)" fg:x="2901" fg:w="1"/><text x="100.0093%" y="271.50"></text></g><g><title>snmalloc::ModArray&lt;64ul, snmalloc::Metaslab&gt;::operator[] (1 samples, 0.03%)</title><rect x="99.7593%" y="245" width="0.0344%" height="15" fill="rgb(243,180,28)" fg:x="2901" fg:w="1"/><text x="100.0093%" y="255.50"></text></g><g><title>rust_realloc (14 samples, 0.48%)</title><rect x="99.3466%" y="405" width="0.4814%" height="15" fill="rgb(208,167,24)" fg:x="2889" fg:w="14"/><text x="99.5966%" y="415.50"></text></g><g><title>snmalloc::ThreadAllocCommon::get_noncachable (1 samples, 0.03%)</title><rect x="99.7937%" y="389" width="0.0344%" height="15" fill="rgb(245,73,45)" fg:x="2902" fg:w="1"/><text x="100.0437%" y="399.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_alloc_new_slab&lt;(snmalloc::ZeroMem)0&gt; (4 samples, 0.14%)</title><rect x="99.8281%" y="405" width="0.1376%" height="15" fill="rgb(237,203,48)" fg:x="2903" fg:w="4"/><text x="100.0781%" y="415.50"></text></g><g><title>snmalloc::Allocator&lt;&amp;snmalloc::needs_initialisation, &amp;snmalloc::init_thread_allocator, snmalloc::MemoryProviderStateMixin&lt;snmalloc::PALLinux, snmalloc::DefaultArenaMapTemplate&lt;snmalloc::PALLinux, snmalloc::GlobalPagemapTemplate&lt;snmalloc::default_auth_pagemap, snmalloc::ForAuthmap&gt; &gt; &gt;, snmalloc::DefaultChunkMap&lt;snmalloc::GlobalPagemapTemplate&lt;snmalloc::FlatPagemap&lt;20ul, unsigned char&gt;, snmalloc::ForChunkmap&gt; &gt;, true&gt;::small_alloc_build_free_list&lt;(snmalloc::ZeroMem)0&gt; (4 samples, 0.14%)</title><rect x="99.8281%" y="389" width="0.1376%" height="15" fill="rgb(211,197,16)" fg:x="2903" fg:w="4"/><text x="100.0781%" y="399.50"></text></g><g><title>snmalloc::Slab::alloc_new_list (4 samples, 0.14%)</title><rect x="99.8281%" y="373" width="0.1376%" height="15" fill="rgb(243,99,51)" fg:x="2903" fg:w="4"/><text x="100.0781%" y="383.50"></text></g><g><title>snmalloc::FreeListBuilder&lt;false, unsigned int&gt;::add (2 samples, 0.07%)</title><rect x="99.8968%" y="357" width="0.0688%" height="15" fill="rgb(215,123,29)" fg:x="2905" fg:w="2"/><text x="100.1468%" y="367.50"></text></g><g><title>snmalloc::EncodeFreeObjectReference::store (2 samples, 0.07%)</title><rect x="99.8968%" y="341" width="0.0688%" height="15" fill="rgb(239,186,37)" fg:x="2905" fg:w="2"/><text x="100.1468%" y="351.50"></text></g><g><title>all (2,908 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(252,136,39)" fg:x="0" fg:w="2908"/><text x="0.2500%" y="447.50"></text></g><g><title>reactor (2,429 samples, 83.53%)</title><rect x="16.4718%" y="421" width="83.5282%" height="15" fill="rgb(223,213,32)" fg:x="479" fg:w="2429"/><text x="16.7218%" y="431.50">reactor</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.03%)</title><rect x="99.9656%" y="405" width="0.0344%" height="15" fill="rgb(233,115,5)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="415.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.03%)</title><rect x="99.9656%" y="389" width="0.0344%" height="15" fill="rgb(207,226,44)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="399.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.03%)</title><rect x="99.9656%" y="373" width="0.0344%" height="15" fill="rgb(208,126,0)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="383.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.03%)</title><rect x="99.9656%" y="357" width="0.0344%" height="15" fill="rgb(244,66,21)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="367.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.03%)</title><rect x="99.9656%" y="341" width="0.0344%" height="15" fill="rgb(222,97,12)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9656%" y="325" width="0.0344%" height="15" fill="rgb(219,213,19)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9656%" y="309" width="0.0344%" height="15" fill="rgb(252,169,30)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9656%" y="293" width="0.0344%" height="15" fill="rgb(206,32,51)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9656%" y="277" width="0.0344%" height="15" fill="rgb(250,172,42)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9656%" y="261" width="0.0344%" height="15" fill="rgb(209,34,43)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9656%" y="245" width="0.0344%" height="15" fill="rgb(223,11,35)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9656%" y="229" width="0.0344%" height="15" fill="rgb(251,219,26)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9656%" y="213" width="0.0344%" height="15" fill="rgb(231,119,3)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9656%" y="197" width="0.0344%" height="15" fill="rgb(216,97,11)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9656%" y="181" width="0.0344%" height="15" fill="rgb(223,59,9)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9656%" y="165" width="0.0344%" height="15" fill="rgb(233,93,31)" fg:x="2907" fg:w="1"/><text x="100.2156%" y="175.50"></text></g></svg></svg>