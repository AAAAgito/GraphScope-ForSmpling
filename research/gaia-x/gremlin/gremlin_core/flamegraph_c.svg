<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1526" onload="init(evt)" viewBox="0 0 1200 1526" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1526" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1509.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1509.00"> </text><svg id="frames" x="10" width="1180" total_samples="11941"><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (2 samples, 0.02%)</title><rect x="0.0084%" y="1445" width="0.0167%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.2584%" y="1455.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (36 samples, 0.30%)</title><rect x="0.0335%" y="1429" width="0.3015%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="36"/><text x="0.2835%" y="1439.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (7 samples, 0.06%)</title><rect x="0.3517%" y="1429" width="0.0586%" height="15" fill="rgb(221,193,54)" fg:x="42" fg:w="7"/><text x="0.6017%" y="1439.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.05%)</title><rect x="0.3601%" y="1413" width="0.0502%" height="15" fill="rgb(248,212,6)" fg:x="43" fg:w="6"/><text x="0.6101%" y="1423.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="0.4187%" y="1429" width="0.0251%" height="15" fill="rgb(208,68,35)" fg:x="50" fg:w="3"/><text x="0.6687%" y="1439.50"></text></g><g><title>dyn_type::serde::&lt;impl pegasus_common::codec::Decode for dyn_type::object::Object&gt;::read_from (4 samples, 0.03%)</title><rect x="0.4438%" y="1429" width="0.0335%" height="15" fill="rgb(232,128,0)" fg:x="53" fg:w="4"/><text x="0.6938%" y="1439.50"></text></g><g><title>[anon] (58 samples, 0.49%)</title><rect x="0.0251%" y="1445" width="0.4857%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="58"/><text x="0.2751%" y="1455.50"></text></g><g><title>petgraph::graph_impl::serialization::&lt;impl serde::de::Deserialize for petgraph::graph_impl::NodeIndex&lt;Ix&gt;&gt;::deserialize (3 samples, 0.03%)</title><rect x="0.4857%" y="1429" width="0.0251%" height="15" fill="rgb(228,23,34)" fg:x="58" fg:w="3"/><text x="0.7357%" y="1439.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (3 samples, 0.03%)</title><rect x="0.4857%" y="1413" width="0.0251%" height="15" fill="rgb(218,30,26)" fg:x="58" fg:w="3"/><text x="0.7357%" y="1423.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (3 samples, 0.03%)</title><rect x="0.4857%" y="1397" width="0.0251%" height="15" fill="rgb(220,122,19)" fg:x="58" fg:w="3"/><text x="0.7357%" y="1407.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (3 samples, 0.03%)</title><rect x="0.4857%" y="1381" width="0.0251%" height="15" fill="rgb(250,228,42)" fg:x="58" fg:w="3"/><text x="0.7357%" y="1391.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (3 samples, 0.03%)</title><rect x="0.4857%" y="1365" width="0.0251%" height="15" fill="rgb(240,193,28)" fg:x="58" fg:w="3"/><text x="0.7357%" y="1375.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (3 samples, 0.03%)</title><rect x="0.4857%" y="1349" width="0.0251%" height="15" fill="rgb(216,20,37)" fg:x="58" fg:w="3"/><text x="0.7357%" y="1359.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.02%)</title><rect x="0.5108%" y="1445" width="0.0167%" height="15" fill="rgb(206,188,39)" fg:x="61" fg:w="2"/><text x="0.7608%" y="1455.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (2 samples, 0.02%)</title><rect x="0.7453%" y="1429" width="0.0167%" height="15" fill="rgb(217,207,13)" fg:x="89" fg:w="2"/><text x="0.9953%" y="1439.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.02%)</title><rect x="0.7788%" y="1429" width="0.0167%" height="15" fill="rgb(231,73,38)" fg:x="93" fg:w="2"/><text x="1.0288%" y="1439.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="0.8123%" y="1429" width="0.0167%" height="15" fill="rgb(225,20,46)" fg:x="97" fg:w="2"/><text x="1.0623%" y="1439.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="0.8291%" y="1429" width="0.0837%" height="15" fill="rgb(210,31,41)" fg:x="99" fg:w="10"/><text x="1.0791%" y="1439.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="0.8291%" y="1413" width="0.0837%" height="15" fill="rgb(221,200,47)" fg:x="99" fg:w="10"/><text x="1.0791%" y="1423.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="0.8291%" y="1397" width="0.0837%" height="15" fill="rgb(226,26,5)" fg:x="99" fg:w="10"/><text x="1.0791%" y="1407.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="0.8291%" y="1381" width="0.0837%" height="15" fill="rgb(249,33,26)" fg:x="99" fg:w="10"/><text x="1.0791%" y="1391.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="0.8291%" y="1365" width="0.0837%" height="15" fill="rgb(235,183,28)" fg:x="99" fg:w="10"/><text x="1.0791%" y="1375.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="0.8291%" y="1349" width="0.0837%" height="15" fill="rgb(221,5,38)" fg:x="99" fg:w="10"/><text x="1.0791%" y="1359.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="0.8291%" y="1333" width="0.0837%" height="15" fill="rgb(247,18,42)" fg:x="99" fg:w="10"/><text x="1.0791%" y="1343.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="0.8291%" y="1317" width="0.0837%" height="15" fill="rgb(241,131,45)" fg:x="99" fg:w="10"/><text x="1.0791%" y="1327.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="0.8291%" y="1301" width="0.0837%" height="15" fill="rgb(249,31,29)" fg:x="99" fg:w="10"/><text x="1.0791%" y="1311.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="0.8291%" y="1285" width="0.0837%" height="15" fill="rgb(225,111,53)" fg:x="99" fg:w="10"/><text x="1.0791%" y="1295.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="0.8542%" y="1269" width="0.0586%" height="15" fill="rgb(238,160,17)" fg:x="102" fg:w="7"/><text x="1.1042%" y="1279.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="0.8542%" y="1253" width="0.0586%" height="15" fill="rgb(214,148,48)" fg:x="102" fg:w="7"/><text x="1.1042%" y="1263.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="0.8709%" y="1237" width="0.0419%" height="15" fill="rgb(232,36,49)" fg:x="104" fg:w="5"/><text x="1.1209%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.8793%" y="1221" width="0.0335%" height="15" fill="rgb(209,103,24)" fg:x="105" fg:w="4"/><text x="1.1293%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.8793%" y="1205" width="0.0335%" height="15" fill="rgb(229,88,8)" fg:x="105" fg:w="4"/><text x="1.1293%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.8793%" y="1189" width="0.0335%" height="15" fill="rgb(213,181,19)" fg:x="105" fg:w="4"/><text x="1.1293%" y="1199.50"></text></g><g><title>__libc_calloc (3 samples, 0.03%)</title><rect x="0.9128%" y="1429" width="0.0251%" height="15" fill="rgb(254,191,54)" fg:x="109" fg:w="3"/><text x="1.1628%" y="1439.50"></text></g><g><title>dyn_type::serde::&lt;impl pegasus_common::codec::Decode for dyn_type::object::Object&gt;::read_from (2 samples, 0.02%)</title><rect x="0.9463%" y="1429" width="0.0167%" height="15" fill="rgb(241,83,37)" fg:x="113" fg:w="2"/><text x="1.1963%" y="1439.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.03%)</title><rect x="0.9631%" y="1429" width="0.0251%" height="15" fill="rgb(233,36,39)" fg:x="115" fg:w="3"/><text x="1.2131%" y="1439.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="0.9882%" y="1429" width="0.0167%" height="15" fill="rgb(226,3,54)" fg:x="118" fg:w="2"/><text x="1.2382%" y="1439.50"></text></g><g><title>[unknown] (63 samples, 0.53%)</title><rect x="0.5276%" y="1445" width="0.5276%" height="15" fill="rgb(245,192,40)" fg:x="63" fg:w="63"/><text x="0.7776%" y="1455.50"></text></g><g><title>petgraph::graph_impl::serialization::&lt;impl serde::de::Deserialize for petgraph::graph_impl::NodeIndex&lt;Ix&gt;&gt;::deserialize (3 samples, 0.03%)</title><rect x="1.0301%" y="1429" width="0.0251%" height="15" fill="rgb(238,167,29)" fg:x="123" fg:w="3"/><text x="1.2801%" y="1439.50"></text></g><g><title>[unknown] (29 samples, 0.24%)</title><rect x="1.0552%" y="1429" width="0.2429%" height="15" fill="rgb(232,182,51)" fg:x="126" fg:w="29"/><text x="1.3052%" y="1439.50"></text></g><g><title>[unknown] (29 samples, 0.24%)</title><rect x="1.0552%" y="1413" width="0.2429%" height="15" fill="rgb(231,60,39)" fg:x="126" fg:w="29"/><text x="1.3052%" y="1423.50"></text></g><g><title>[unknown] (29 samples, 0.24%)</title><rect x="1.0552%" y="1397" width="0.2429%" height="15" fill="rgb(208,69,12)" fg:x="126" fg:w="29"/><text x="1.3052%" y="1407.50"></text></g><g><title>[unknown] (29 samples, 0.24%)</title><rect x="1.0552%" y="1381" width="0.2429%" height="15" fill="rgb(235,93,37)" fg:x="126" fg:w="29"/><text x="1.3052%" y="1391.50"></text></g><g><title>[unknown] (28 samples, 0.23%)</title><rect x="1.0636%" y="1365" width="0.2345%" height="15" fill="rgb(213,116,39)" fg:x="127" fg:w="28"/><text x="1.3136%" y="1375.50"></text></g><g><title>[unknown] (28 samples, 0.23%)</title><rect x="1.0636%" y="1349" width="0.2345%" height="15" fill="rgb(222,207,29)" fg:x="127" fg:w="28"/><text x="1.3136%" y="1359.50"></text></g><g><title>[unknown] (28 samples, 0.23%)</title><rect x="1.0636%" y="1333" width="0.2345%" height="15" fill="rgb(206,96,30)" fg:x="127" fg:w="28"/><text x="1.3136%" y="1343.50"></text></g><g><title>[unknown] (28 samples, 0.23%)</title><rect x="1.0636%" y="1317" width="0.2345%" height="15" fill="rgb(218,138,4)" fg:x="127" fg:w="28"/><text x="1.3136%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (10 samples, 0.08%)</title><rect x="1.2980%" y="805" width="0.0837%" height="15" fill="rgb(250,191,14)" fg:x="155" fg:w="10"/><text x="1.5480%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.08%)</title><rect x="1.2980%" y="789" width="0.0837%" height="15" fill="rgb(239,60,40)" fg:x="155" fg:w="10"/><text x="1.5480%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.08%)</title><rect x="1.2980%" y="773" width="0.0837%" height="15" fill="rgb(206,27,48)" fg:x="155" fg:w="10"/><text x="1.5480%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.08%)</title><rect x="1.2980%" y="757" width="0.0837%" height="15" fill="rgb(225,35,8)" fg:x="155" fg:w="10"/><text x="1.5480%" y="767.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.08%)</title><rect x="1.2980%" y="741" width="0.0837%" height="15" fill="rgb(250,213,24)" fg:x="155" fg:w="10"/><text x="1.5480%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (10 samples, 0.08%)</title><rect x="1.2980%" y="725" width="0.0837%" height="15" fill="rgb(247,123,22)" fg:x="155" fg:w="10"/><text x="1.5480%" y="735.50"></text></g><g><title>alloc::alloc::Global::grow_impl (10 samples, 0.08%)</title><rect x="1.2980%" y="709" width="0.0837%" height="15" fill="rgb(231,138,38)" fg:x="155" fg:w="10"/><text x="1.5480%" y="719.50"></text></g><g><title>alloc::alloc::realloc (10 samples, 0.08%)</title><rect x="1.2980%" y="693" width="0.0837%" height="15" fill="rgb(231,145,46)" fg:x="155" fg:w="10"/><text x="1.5480%" y="703.50"></text></g><g><title>__rdl_realloc (10 samples, 0.08%)</title><rect x="1.2980%" y="677" width="0.0837%" height="15" fill="rgb(251,118,11)" fg:x="155" fg:w="10"/><text x="1.5480%" y="687.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (10 samples, 0.08%)</title><rect x="1.2980%" y="661" width="0.0837%" height="15" fill="rgb(217,147,25)" fg:x="155" fg:w="10"/><text x="1.5480%" y="671.50"></text></g><g><title>__GI___libc_realloc (10 samples, 0.08%)</title><rect x="1.2980%" y="645" width="0.0837%" height="15" fill="rgb(247,81,37)" fg:x="155" fg:w="10"/><text x="1.5480%" y="655.50"></text></g><g><title>_int_realloc (10 samples, 0.08%)</title><rect x="1.2980%" y="629" width="0.0837%" height="15" fill="rgb(209,12,38)" fg:x="155" fg:w="10"/><text x="1.5480%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.08%)</title><rect x="1.2980%" y="613" width="0.0837%" height="15" fill="rgb(227,1,9)" fg:x="155" fg:w="10"/><text x="1.5480%" y="623.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="1.3148%" y="597" width="0.0670%" height="15" fill="rgb(248,47,43)" fg:x="157" fg:w="8"/><text x="1.5648%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="1.3399%" y="581" width="0.0419%" height="15" fill="rgb(221,10,30)" fg:x="160" fg:w="5"/><text x="1.5899%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="1.3399%" y="565" width="0.0419%" height="15" fill="rgb(210,229,1)" fg:x="160" fg:w="5"/><text x="1.5899%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="1.3483%" y="549" width="0.0335%" height="15" fill="rgb(222,148,37)" fg:x="161" fg:w="4"/><text x="1.5983%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="1.3567%" y="533" width="0.0251%" height="15" fill="rgb(234,67,33)" fg:x="162" fg:w="3"/><text x="1.6067%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.3650%" y="517" width="0.0167%" height="15" fill="rgb(247,98,35)" fg:x="163" fg:w="2"/><text x="1.6150%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.3650%" y="501" width="0.0167%" height="15" fill="rgb(247,138,52)" fg:x="163" fg:w="2"/><text x="1.6150%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.3650%" y="485" width="0.0167%" height="15" fill="rgb(213,79,30)" fg:x="163" fg:w="2"/><text x="1.6150%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.3650%" y="469" width="0.0167%" height="15" fill="rgb(246,177,23)" fg:x="163" fg:w="2"/><text x="1.6150%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.3650%" y="453" width="0.0167%" height="15" fill="rgb(230,62,27)" fg:x="163" fg:w="2"/><text x="1.6150%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 0.12%)</title><rect x="1.2980%" y="821" width="0.1172%" height="15" fill="rgb(216,154,8)" fg:x="155" fg:w="14"/><text x="1.5480%" y="831.50"></text></g><g><title>core::ptr::write (4 samples, 0.03%)</title><rect x="1.3818%" y="805" width="0.0335%" height="15" fill="rgb(244,35,45)" fg:x="165" fg:w="4"/><text x="1.6318%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.3985%" y="789" width="0.0167%" height="15" fill="rgb(251,115,12)" fg:x="167" fg:w="2"/><text x="1.6485%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.3985%" y="773" width="0.0167%" height="15" fill="rgb(240,54,50)" fg:x="167" fg:w="2"/><text x="1.6485%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.3985%" y="757" width="0.0167%" height="15" fill="rgb(233,84,52)" fg:x="167" fg:w="2"/><text x="1.6485%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.3985%" y="741" width="0.0167%" height="15" fill="rgb(207,117,47)" fg:x="167" fg:w="2"/><text x="1.6485%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.3985%" y="725" width="0.0167%" height="15" fill="rgb(249,43,39)" fg:x="167" fg:w="2"/><text x="1.6485%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.3985%" y="709" width="0.0167%" height="15" fill="rgb(209,38,44)" fg:x="167" fg:w="2"/><text x="1.6485%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="1.4237%" y="757" width="0.0167%" height="15" fill="rgb(236,212,23)" fg:x="170" fg:w="2"/><text x="1.6737%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 0.16%)</title><rect x="1.4404%" y="725" width="0.1591%" height="15" fill="rgb(242,79,21)" fg:x="172" fg:w="19"/><text x="1.6904%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19 samples, 0.16%)</title><rect x="1.5995%" y="725" width="0.1591%" height="15" fill="rgb(211,96,35)" fg:x="191" fg:w="19"/><text x="1.8495%" y="735.50"></text></g><g><title>core::ptr::write (19 samples, 0.16%)</title><rect x="1.5995%" y="709" width="0.1591%" height="15" fill="rgb(253,215,40)" fg:x="191" fg:w="19"/><text x="1.8495%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.8843%" y="549" width="0.0167%" height="15" fill="rgb(211,81,21)" fg:x="225" fg:w="2"/><text x="2.1343%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.8843%" y="533" width="0.0167%" height="15" fill="rgb(208,190,38)" fg:x="225" fg:w="2"/><text x="2.1343%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.8843%" y="517" width="0.0167%" height="15" fill="rgb(235,213,38)" fg:x="225" fg:w="2"/><text x="2.1343%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.8843%" y="501" width="0.0167%" height="15" fill="rgb(237,122,38)" fg:x="225" fg:w="2"/><text x="2.1343%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="1.8843%" y="485" width="0.0167%" height="15" fill="rgb(244,218,35)" fg:x="225" fg:w="2"/><text x="2.1343%" y="495.50"></text></g><g><title>[unknown] (24 samples, 0.20%)</title><rect x="1.9178%" y="533" width="0.2010%" height="15" fill="rgb(240,68,47)" fg:x="229" fg:w="24"/><text x="2.1678%" y="543.50"></text></g><g><title>[unknown] (21 samples, 0.18%)</title><rect x="1.9429%" y="517" width="0.1759%" height="15" fill="rgb(210,16,53)" fg:x="232" fg:w="21"/><text x="2.1929%" y="527.50"></text></g><g><title>[unknown] (21 samples, 0.18%)</title><rect x="1.9429%" y="501" width="0.1759%" height="15" fill="rgb(235,124,12)" fg:x="232" fg:w="21"/><text x="2.1929%" y="511.50"></text></g><g><title>[unknown] (20 samples, 0.17%)</title><rect x="1.9513%" y="485" width="0.1675%" height="15" fill="rgb(224,169,11)" fg:x="233" fg:w="20"/><text x="2.2013%" y="495.50"></text></g><g><title>[unknown] (11 samples, 0.09%)</title><rect x="2.0266%" y="469" width="0.0921%" height="15" fill="rgb(250,166,2)" fg:x="242" fg:w="11"/><text x="2.2766%" y="479.50"></text></g><g><title>[unknown] (11 samples, 0.09%)</title><rect x="2.0266%" y="453" width="0.0921%" height="15" fill="rgb(242,216,29)" fg:x="242" fg:w="11"/><text x="2.2766%" y="463.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="2.0350%" y="437" width="0.0837%" height="15" fill="rgb(230,116,27)" fg:x="243" fg:w="10"/><text x="2.2850%" y="447.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="2.0518%" y="421" width="0.0670%" height="15" fill="rgb(228,99,48)" fg:x="245" fg:w="8"/><text x="2.3018%" y="431.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="2.0601%" y="405" width="0.0586%" height="15" fill="rgb(253,11,6)" fg:x="246" fg:w="7"/><text x="2.3101%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="2.0601%" y="389" width="0.0586%" height="15" fill="rgb(247,143,39)" fg:x="246" fg:w="7"/><text x="2.3101%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (71 samples, 0.59%)</title><rect x="1.7586%" y="725" width="0.5946%" height="15" fill="rgb(236,97,10)" fg:x="210" fg:w="71"/><text x="2.0086%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (71 samples, 0.59%)</title><rect x="1.7586%" y="709" width="0.5946%" height="15" fill="rgb(233,208,19)" fg:x="210" fg:w="71"/><text x="2.0086%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (71 samples, 0.59%)</title><rect x="1.7586%" y="693" width="0.5946%" height="15" fill="rgb(216,164,2)" fg:x="210" fg:w="71"/><text x="2.0086%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (71 samples, 0.59%)</title><rect x="1.7586%" y="677" width="0.5946%" height="15" fill="rgb(220,129,5)" fg:x="210" fg:w="71"/><text x="2.0086%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (71 samples, 0.59%)</title><rect x="1.7586%" y="661" width="0.5946%" height="15" fill="rgb(242,17,10)" fg:x="210" fg:w="71"/><text x="2.0086%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (71 samples, 0.59%)</title><rect x="1.7586%" y="645" width="0.5946%" height="15" fill="rgb(242,107,0)" fg:x="210" fg:w="71"/><text x="2.0086%" y="655.50"></text></g><g><title>alloc::alloc::alloc (71 samples, 0.59%)</title><rect x="1.7586%" y="629" width="0.5946%" height="15" fill="rgb(251,28,31)" fg:x="210" fg:w="71"/><text x="2.0086%" y="639.50"></text></g><g><title>__rdl_alloc (71 samples, 0.59%)</title><rect x="1.7586%" y="613" width="0.5946%" height="15" fill="rgb(233,223,10)" fg:x="210" fg:w="71"/><text x="2.0086%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (71 samples, 0.59%)</title><rect x="1.7586%" y="597" width="0.5946%" height="15" fill="rgb(215,21,27)" fg:x="210" fg:w="71"/><text x="2.0086%" y="607.50"></text></g><g><title>__GI___libc_malloc (71 samples, 0.59%)</title><rect x="1.7586%" y="581" width="0.5946%" height="15" fill="rgb(232,23,21)" fg:x="210" fg:w="71"/><text x="2.0086%" y="591.50"></text></g><g><title>_int_malloc (62 samples, 0.52%)</title><rect x="1.8340%" y="565" width="0.5192%" height="15" fill="rgb(244,5,23)" fg:x="219" fg:w="62"/><text x="2.0840%" y="575.50"></text></g><g><title>sysmalloc (54 samples, 0.45%)</title><rect x="1.9010%" y="549" width="0.4522%" height="15" fill="rgb(226,81,46)" fg:x="227" fg:w="54"/><text x="2.1510%" y="559.50"></text></g><g><title>grow_heap (28 samples, 0.23%)</title><rect x="2.1188%" y="533" width="0.2345%" height="15" fill="rgb(247,70,30)" fg:x="253" fg:w="28"/><text x="2.3688%" y="543.50"></text></g><g><title>__GI___mprotect (28 samples, 0.23%)</title><rect x="2.1188%" y="517" width="0.2345%" height="15" fill="rgb(212,68,19)" fg:x="253" fg:w="28"/><text x="2.3688%" y="527.50"></text></g><g><title>[unknown] (27 samples, 0.23%)</title><rect x="2.1271%" y="501" width="0.2261%" height="15" fill="rgb(240,187,13)" fg:x="254" fg:w="27"/><text x="2.3771%" y="511.50"></text></g><g><title>[unknown] (22 samples, 0.18%)</title><rect x="2.1690%" y="485" width="0.1842%" height="15" fill="rgb(223,113,26)" fg:x="259" fg:w="22"/><text x="2.4190%" y="495.50"></text></g><g><title>[unknown] (22 samples, 0.18%)</title><rect x="2.1690%" y="469" width="0.1842%" height="15" fill="rgb(206,192,2)" fg:x="259" fg:w="22"/><text x="2.4190%" y="479.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="2.2192%" y="453" width="0.1340%" height="15" fill="rgb(241,108,4)" fg:x="265" fg:w="16"/><text x="2.4692%" y="463.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="2.2192%" y="437" width="0.1340%" height="15" fill="rgb(247,173,49)" fg:x="265" fg:w="16"/><text x="2.4692%" y="447.50"></text></g><g><title>[unknown] (14 samples, 0.12%)</title><rect x="2.2360%" y="421" width="0.1172%" height="15" fill="rgb(224,114,35)" fg:x="267" fg:w="14"/><text x="2.4860%" y="431.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="2.2695%" y="405" width="0.0837%" height="15" fill="rgb(245,159,27)" fg:x="271" fg:w="10"/><text x="2.5195%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="2.2946%" y="389" width="0.0586%" height="15" fill="rgb(245,172,44)" fg:x="274" fg:w="7"/><text x="2.5446%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="2.3114%" y="373" width="0.0419%" height="15" fill="rgb(236,23,11)" fg:x="276" fg:w="5"/><text x="2.5614%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="2.3281%" y="357" width="0.0251%" height="15" fill="rgb(205,117,38)" fg:x="278" fg:w="3"/><text x="2.5781%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="2.7636%" y="517" width="0.0419%" height="15" fill="rgb(237,72,25)" fg:x="330" fg:w="5"/><text x="3.0136%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="2.7720%" y="501" width="0.0335%" height="15" fill="rgb(244,70,9)" fg:x="331" fg:w="4"/><text x="3.0220%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="2.7720%" y="485" width="0.0335%" height="15" fill="rgb(217,125,39)" fg:x="331" fg:w="4"/><text x="3.0220%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="2.7720%" y="469" width="0.0335%" height="15" fill="rgb(235,36,10)" fg:x="331" fg:w="4"/><text x="3.0220%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="2.7720%" y="453" width="0.0335%" height="15" fill="rgb(251,123,47)" fg:x="331" fg:w="4"/><text x="3.0220%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="2.7720%" y="437" width="0.0335%" height="15" fill="rgb(221,13,13)" fg:x="331" fg:w="4"/><text x="3.0220%" y="447.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="2.7720%" y="421" width="0.0335%" height="15" fill="rgb(238,131,9)" fg:x="331" fg:w="4"/><text x="3.0220%" y="431.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="2.7720%" y="405" width="0.0335%" height="15" fill="rgb(211,50,8)" fg:x="331" fg:w="4"/><text x="3.0220%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="2.7720%" y="389" width="0.0335%" height="15" fill="rgb(245,182,24)" fg:x="331" fg:w="4"/><text x="3.0220%" y="399.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="2.7720%" y="373" width="0.0335%" height="15" fill="rgb(242,14,37)" fg:x="331" fg:w="4"/><text x="3.0220%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="2.8222%" y="501" width="0.0335%" height="15" fill="rgb(246,228,12)" fg:x="337" fg:w="4"/><text x="3.0722%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="2.8222%" y="485" width="0.0335%" height="15" fill="rgb(213,55,15)" fg:x="337" fg:w="4"/><text x="3.0722%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="2.8222%" y="469" width="0.0335%" height="15" fill="rgb(209,9,3)" fg:x="337" fg:w="4"/><text x="3.0722%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="2.8306%" y="453" width="0.0251%" height="15" fill="rgb(230,59,30)" fg:x="338" fg:w="3"/><text x="3.0806%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="2.8390%" y="437" width="0.0167%" height="15" fill="rgb(209,121,21)" fg:x="339" fg:w="2"/><text x="3.0890%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="2.8390%" y="421" width="0.0167%" height="15" fill="rgb(220,109,13)" fg:x="339" fg:w="2"/><text x="3.0890%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="2.8390%" y="405" width="0.0167%" height="15" fill="rgb(232,18,1)" fg:x="339" fg:w="2"/><text x="3.0890%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="2.8390%" y="389" width="0.0167%" height="15" fill="rgb(215,41,42)" fg:x="339" fg:w="2"/><text x="3.0890%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="2.8390%" y="373" width="0.0167%" height="15" fill="rgb(224,123,36)" fg:x="339" fg:w="2"/><text x="3.0890%" y="383.50"></text></g><g><title>alloc::vec::from_elem (73 samples, 0.61%)</title><rect x="2.3867%" y="693" width="0.6113%" height="15" fill="rgb(240,125,3)" fg:x="285" fg:w="73"/><text x="2.6367%" y="703.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (73 samples, 0.61%)</title><rect x="2.3867%" y="677" width="0.6113%" height="15" fill="rgb(205,98,50)" fg:x="285" fg:w="73"/><text x="2.6367%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (73 samples, 0.61%)</title><rect x="2.3867%" y="661" width="0.6113%" height="15" fill="rgb(205,185,37)" fg:x="285" fg:w="73"/><text x="2.6367%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (73 samples, 0.61%)</title><rect x="2.3867%" y="645" width="0.6113%" height="15" fill="rgb(238,207,15)" fg:x="285" fg:w="73"/><text x="2.6367%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (73 samples, 0.61%)</title><rect x="2.3867%" y="629" width="0.6113%" height="15" fill="rgb(213,199,42)" fg:x="285" fg:w="73"/><text x="2.6367%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (73 samples, 0.61%)</title><rect x="2.3867%" y="613" width="0.6113%" height="15" fill="rgb(235,201,11)" fg:x="285" fg:w="73"/><text x="2.6367%" y="623.50"></text></g><g><title>alloc::alloc::alloc_zeroed (73 samples, 0.61%)</title><rect x="2.3867%" y="597" width="0.6113%" height="15" fill="rgb(207,46,11)" fg:x="285" fg:w="73"/><text x="2.6367%" y="607.50"></text></g><g><title>__rdl_alloc_zeroed (73 samples, 0.61%)</title><rect x="2.3867%" y="581" width="0.6113%" height="15" fill="rgb(241,35,35)" fg:x="285" fg:w="73"/><text x="2.6367%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (73 samples, 0.61%)</title><rect x="2.3867%" y="565" width="0.6113%" height="15" fill="rgb(243,32,47)" fg:x="285" fg:w="73"/><text x="2.6367%" y="575.50"></text></g><g><title>__libc_calloc (73 samples, 0.61%)</title><rect x="2.3867%" y="549" width="0.6113%" height="15" fill="rgb(247,202,23)" fg:x="285" fg:w="73"/><text x="2.6367%" y="559.50"></text></g><g><title>_int_malloc (44 samples, 0.37%)</title><rect x="2.6296%" y="533" width="0.3685%" height="15" fill="rgb(219,102,11)" fg:x="314" fg:w="44"/><text x="2.8796%" y="543.50"></text></g><g><title>sysmalloc (23 samples, 0.19%)</title><rect x="2.8055%" y="517" width="0.1926%" height="15" fill="rgb(243,110,44)" fg:x="335" fg:w="23"/><text x="3.0555%" y="527.50"></text></g><g><title>grow_heap (17 samples, 0.14%)</title><rect x="2.8557%" y="501" width="0.1424%" height="15" fill="rgb(222,74,54)" fg:x="341" fg:w="17"/><text x="3.1057%" y="511.50"></text></g><g><title>__GI___mprotect (17 samples, 0.14%)</title><rect x="2.8557%" y="485" width="0.1424%" height="15" fill="rgb(216,99,12)" fg:x="341" fg:w="17"/><text x="3.1057%" y="495.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="2.8641%" y="469" width="0.1340%" height="15" fill="rgb(226,22,26)" fg:x="342" fg:w="16"/><text x="3.1141%" y="479.50"></text></g><g><title>[unknown] (13 samples, 0.11%)</title><rect x="2.8892%" y="453" width="0.1089%" height="15" fill="rgb(217,163,10)" fg:x="345" fg:w="13"/><text x="3.1392%" y="463.50"></text></g><g><title>[unknown] (12 samples, 0.10%)</title><rect x="2.8976%" y="437" width="0.1005%" height="15" fill="rgb(213,25,53)" fg:x="346" fg:w="12"/><text x="3.1476%" y="447.50"></text></g><g><title>[unknown] (11 samples, 0.09%)</title><rect x="2.9060%" y="421" width="0.0921%" height="15" fill="rgb(252,105,26)" fg:x="347" fg:w="11"/><text x="3.1560%" y="431.50"></text></g><g><title>[unknown] (11 samples, 0.09%)</title><rect x="2.9060%" y="405" width="0.0921%" height="15" fill="rgb(220,39,43)" fg:x="347" fg:w="11"/><text x="3.1560%" y="415.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="2.9143%" y="389" width="0.0837%" height="15" fill="rgb(229,68,48)" fg:x="348" fg:w="10"/><text x="3.1643%" y="399.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="2.9395%" y="373" width="0.0586%" height="15" fill="rgb(252,8,32)" fg:x="351" fg:w="7"/><text x="3.1895%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="2.9646%" y="357" width="0.0335%" height="15" fill="rgb(223,20,43)" fg:x="354" fg:w="4"/><text x="3.2146%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="2.9813%" y="341" width="0.0167%" height="15" fill="rgb(229,81,49)" fg:x="356" fg:w="2"/><text x="3.2313%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="2.9813%" y="325" width="0.0167%" height="15" fill="rgb(236,28,36)" fg:x="356" fg:w="2"/><text x="3.2313%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="2.9813%" y="309" width="0.0167%" height="15" fill="rgb(249,185,26)" fg:x="356" fg:w="2"/><text x="3.2313%" y="319.50"></text></g><g><title>pegasus_common::io::ReadExt::read_u32 (2 samples, 0.02%)</title><rect x="2.9981%" y="693" width="0.0167%" height="15" fill="rgb(249,174,33)" fg:x="358" fg:w="2"/><text x="3.2481%" y="703.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u32 (2 samples, 0.02%)</title><rect x="2.9981%" y="677" width="0.0167%" height="15" fill="rgb(233,201,37)" fg:x="358" fg:w="2"/><text x="3.2481%" y="687.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (2 samples, 0.02%)</title><rect x="2.9981%" y="661" width="0.0167%" height="15" fill="rgb(221,78,26)" fg:x="358" fg:w="2"/><text x="3.2481%" y="671.50"></text></g><g><title>&lt;alloc::string::String as pegasus_common::codec::Decode&gt;::read_from (80 samples, 0.67%)</title><rect x="2.3867%" y="709" width="0.6700%" height="15" fill="rgb(250,127,30)" fg:x="285" fg:w="80"/><text x="2.6367%" y="719.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (5 samples, 0.04%)</title><rect x="3.0148%" y="693" width="0.0419%" height="15" fill="rgb(230,49,44)" fg:x="360" fg:w="5"/><text x="3.2648%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.03%)</title><rect x="3.0316%" y="677" width="0.0251%" height="15" fill="rgb(229,67,23)" fg:x="362" fg:w="3"/><text x="3.2816%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="3.0316%" y="661" width="0.0251%" height="15" fill="rgb(249,83,47)" fg:x="362" fg:w="3"/><text x="3.2816%" y="671.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="3.0316%" y="645" width="0.0251%" height="15" fill="rgb(215,43,3)" fg:x="362" fg:w="3"/><text x="3.2816%" y="655.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="3.0567%" y="709" width="0.0502%" height="15" fill="rgb(238,154,13)" fg:x="365" fg:w="6"/><text x="3.3067%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="3.0651%" y="693" width="0.0419%" height="15" fill="rgb(219,56,2)" fg:x="366" fg:w="5"/><text x="3.3151%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="3.0651%" y="677" width="0.0419%" height="15" fill="rgb(233,0,4)" fg:x="366" fg:w="5"/><text x="3.3151%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="3.0651%" y="661" width="0.0419%" height="15" fill="rgb(235,30,7)" fg:x="366" fg:w="5"/><text x="3.3151%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="3.0651%" y="645" width="0.0419%" height="15" fill="rgb(250,79,13)" fg:x="366" fg:w="5"/><text x="3.3151%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="3.0651%" y="629" width="0.0419%" height="15" fill="rgb(211,146,34)" fg:x="366" fg:w="5"/><text x="3.3151%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="3.0651%" y="613" width="0.0419%" height="15" fill="rgb(228,22,38)" fg:x="366" fg:w="5"/><text x="3.3151%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="3.0651%" y="597" width="0.0419%" height="15" fill="rgb(235,168,5)" fg:x="366" fg:w="5"/><text x="3.3151%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="3.0651%" y="581" width="0.0419%" height="15" fill="rgb(221,155,16)" fg:x="366" fg:w="5"/><text x="3.3151%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="3.0651%" y="565" width="0.0419%" height="15" fill="rgb(215,215,53)" fg:x="366" fg:w="5"/><text x="3.3151%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="3.0651%" y="549" width="0.0419%" height="15" fill="rgb(223,4,10)" fg:x="366" fg:w="5"/><text x="3.3151%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="3.0651%" y="533" width="0.0419%" height="15" fill="rgb(234,103,6)" fg:x="366" fg:w="5"/><text x="3.3151%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="3.0651%" y="517" width="0.0419%" height="15" fill="rgb(227,97,0)" fg:x="366" fg:w="5"/><text x="3.3151%" y="527.50"></text></g><g><title>dyn_type::serde::&lt;impl pegasus_common::codec::Decode for dyn_type::object::Primitives&gt;::read_from (2 samples, 0.02%)</title><rect x="3.1069%" y="709" width="0.0167%" height="15" fill="rgb(234,150,53)" fg:x="371" fg:w="2"/><text x="3.3569%" y="719.50"></text></g><g><title>&lt;graph_store::table::Row as pegasus_common::codec::Decode&gt;::read_from (202 samples, 1.69%)</title><rect x="1.4404%" y="757" width="1.6917%" height="15" fill="rgb(228,201,54)" fg:x="172" fg:w="202"/><text x="1.6904%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as pegasus_common::codec::Decode&gt;::read_from (202 samples, 1.69%)</title><rect x="1.4404%" y="741" width="1.6917%" height="15" fill="rgb(222,22,37)" fg:x="172" fg:w="202"/><text x="1.6904%" y="751.50"></text></g><g><title>dyn_type::serde::&lt;impl pegasus_common::codec::Decode for dyn_type::object::Object&gt;::read_from (93 samples, 0.78%)</title><rect x="2.3532%" y="725" width="0.7788%" height="15" fill="rgb(237,53,32)" fg:x="281" fg:w="93"/><text x="2.6032%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="3.1321%" y="757" width="0.0251%" height="15" fill="rgb(233,25,53)" fg:x="374" fg:w="3"/><text x="3.3821%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="3.1321%" y="741" width="0.0251%" height="15" fill="rgb(210,40,34)" fg:x="374" fg:w="3"/><text x="3.3821%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="3.1321%" y="725" width="0.0251%" height="15" fill="rgb(241,220,44)" fg:x="374" fg:w="3"/><text x="3.3821%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="3.1321%" y="709" width="0.0251%" height="15" fill="rgb(235,28,35)" fg:x="374" fg:w="3"/><text x="3.3821%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="3.1321%" y="693" width="0.0251%" height="15" fill="rgb(210,56,17)" fg:x="374" fg:w="3"/><text x="3.3821%" y="703.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.03%)</title><rect x="3.1321%" y="677" width="0.0251%" height="15" fill="rgb(224,130,29)" fg:x="374" fg:w="3"/><text x="3.3821%" y="687.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.03%)</title><rect x="3.1321%" y="661" width="0.0251%" height="15" fill="rgb(235,212,8)" fg:x="374" fg:w="3"/><text x="3.3821%" y="671.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="3.1404%" y="645" width="0.0167%" height="15" fill="rgb(223,33,50)" fg:x="375" fg:w="2"/><text x="3.3904%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="3.3414%" y="693" width="0.0167%" height="15" fill="rgb(219,149,13)" fg:x="399" fg:w="2"/><text x="3.5914%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="3.3414%" y="677" width="0.0167%" height="15" fill="rgb(250,156,29)" fg:x="399" fg:w="2"/><text x="3.5914%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="3.3414%" y="661" width="0.0167%" height="15" fill="rgb(216,193,19)" fg:x="399" fg:w="2"/><text x="3.5914%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="3.3414%" y="645" width="0.0167%" height="15" fill="rgb(216,135,14)" fg:x="399" fg:w="2"/><text x="3.5914%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="3.3414%" y="629" width="0.0167%" height="15" fill="rgb(241,47,5)" fg:x="399" fg:w="2"/><text x="3.5914%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="3.3414%" y="613" width="0.0167%" height="15" fill="rgb(233,42,35)" fg:x="399" fg:w="2"/><text x="3.5914%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="3.3414%" y="597" width="0.0167%" height="15" fill="rgb(231,13,6)" fg:x="399" fg:w="2"/><text x="3.5914%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="3.4419%" y="677" width="0.0167%" height="15" fill="rgb(207,181,40)" fg:x="411" fg:w="2"/><text x="3.6919%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="3.4419%" y="661" width="0.0167%" height="15" fill="rgb(254,173,49)" fg:x="411" fg:w="2"/><text x="3.6919%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="3.4419%" y="645" width="0.0167%" height="15" fill="rgb(221,1,38)" fg:x="411" fg:w="2"/><text x="3.6919%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6 samples, 0.05%)</title><rect x="3.4587%" y="677" width="0.0502%" height="15" fill="rgb(206,124,46)" fg:x="413" fg:w="6"/><text x="3.7087%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (33 samples, 0.28%)</title><rect x="3.3582%" y="693" width="0.2764%" height="15" fill="rgb(249,21,11)" fg:x="401" fg:w="33"/><text x="3.6082%" y="703.50"></text></g><g><title>core::ptr::write (15 samples, 0.13%)</title><rect x="3.5089%" y="677" width="0.1256%" height="15" fill="rgb(222,201,40)" fg:x="419" fg:w="15"/><text x="3.7589%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="3.6345%" y="693" width="0.0167%" height="15" fill="rgb(235,61,29)" fg:x="434" fg:w="2"/><text x="3.8845%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="3.6345%" y="677" width="0.0167%" height="15" fill="rgb(219,207,3)" fg:x="434" fg:w="2"/><text x="3.8845%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="3.6345%" y="661" width="0.0167%" height="15" fill="rgb(222,56,46)" fg:x="434" fg:w="2"/><text x="3.8845%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="3.6345%" y="645" width="0.0167%" height="15" fill="rgb(239,76,54)" fg:x="434" fg:w="2"/><text x="3.8845%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="3.6345%" y="629" width="0.0167%" height="15" fill="rgb(231,124,27)" fg:x="434" fg:w="2"/><text x="3.8845%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="3.6345%" y="613" width="0.0167%" height="15" fill="rgb(249,195,6)" fg:x="434" fg:w="2"/><text x="3.8845%" y="623.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for u8&gt;::deserialize::PrimitiveVisitor as serde::de::Visitor&gt;::visit_u8 (12 samples, 0.10%)</title><rect x="4.4804%" y="613" width="0.1005%" height="15" fill="rgb(237,174,47)" fg:x="535" fg:w="12"/><text x="4.7304%" y="623.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (18 samples, 0.15%)</title><rect x="4.8321%" y="533" width="0.1507%" height="15" fill="rgb(206,201,31)" fg:x="577" fg:w="18"/><text x="5.0821%" y="543.50"></text></g><g><title>core::cmp::min (15 samples, 0.13%)</title><rect x="4.8572%" y="517" width="0.1256%" height="15" fill="rgb(231,57,52)" fg:x="580" fg:w="15"/><text x="5.1072%" y="527.50"></text></g><g><title>core::cmp::Ord::min (15 samples, 0.13%)</title><rect x="4.8572%" y="501" width="0.1256%" height="15" fill="rgb(248,177,22)" fg:x="580" fg:w="15"/><text x="5.1072%" y="511.50"></text></g><g><title>core::cmp::min_by (15 samples, 0.13%)</title><rect x="4.8572%" y="485" width="0.1256%" height="15" fill="rgb(215,211,37)" fg:x="580" fg:w="15"/><text x="5.1072%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (23 samples, 0.19%)</title><rect x="4.9828%" y="533" width="0.1926%" height="15" fill="rgb(241,128,51)" fg:x="595" fg:w="23"/><text x="5.2328%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.19%)</title><rect x="4.9828%" y="517" width="0.1926%" height="15" fill="rgb(227,165,31)" fg:x="595" fg:w="23"/><text x="5.2328%" y="527.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::buffer (24 samples, 0.20%)</title><rect x="5.1754%" y="533" width="0.2010%" height="15" fill="rgb(228,167,24)" fg:x="618" fg:w="24"/><text x="5.4254%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (15 samples, 0.13%)</title><rect x="5.2508%" y="517" width="0.1256%" height="15" fill="rgb(228,143,12)" fg:x="627" fg:w="15"/><text x="5.5008%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (15 samples, 0.13%)</title><rect x="5.2508%" y="501" width="0.1256%" height="15" fill="rgb(249,149,8)" fg:x="627" fg:w="15"/><text x="5.5008%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (138 samples, 1.16%)</title><rect x="4.4804%" y="661" width="1.1557%" height="15" fill="rgb(243,35,44)" fg:x="535" fg:w="138"/><text x="4.7304%" y="671.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u8&gt;::deserialize (138 samples, 1.16%)</title><rect x="4.4804%" y="645" width="1.1557%" height="15" fill="rgb(246,89,9)" fg:x="535" fg:w="138"/><text x="4.7304%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u8 (138 samples, 1.16%)</title><rect x="4.4804%" y="629" width="1.1557%" height="15" fill="rgb(233,213,13)" fg:x="535" fg:w="138"/><text x="4.7304%" y="639.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (126 samples, 1.06%)</title><rect x="4.5809%" y="613" width="1.0552%" height="15" fill="rgb(233,141,41)" fg:x="547" fg:w="126"/><text x="4.8309%" y="623.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (126 samples, 1.06%)</title><rect x="4.5809%" y="597" width="1.0552%" height="15" fill="rgb(239,167,4)" fg:x="547" fg:w="126"/><text x="4.8309%" y="607.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (106 samples, 0.89%)</title><rect x="4.7483%" y="581" width="0.8877%" height="15" fill="rgb(209,217,16)" fg:x="567" fg:w="106"/><text x="4.9983%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (106 samples, 0.89%)</title><rect x="4.7483%" y="565" width="0.8877%" height="15" fill="rgb(219,88,35)" fg:x="567" fg:w="106"/><text x="4.9983%" y="575.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (106 samples, 0.89%)</title><rect x="4.7483%" y="549" width="0.8877%" height="15" fill="rgb(220,193,23)" fg:x="567" fg:w="106"/><text x="4.9983%" y="559.50"></text></g><g><title>std::io::default_read_exact (31 samples, 0.26%)</title><rect x="5.3764%" y="533" width="0.2596%" height="15" fill="rgb(230,90,52)" fg:x="642" fg:w="31"/><text x="5.6264%" y="543.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (31 samples, 0.26%)</title><rect x="5.3764%" y="517" width="0.2596%" height="15" fill="rgb(252,106,19)" fg:x="642" fg:w="31"/><text x="5.6264%" y="527.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (31 samples, 0.26%)</title><rect x="5.3764%" y="501" width="0.2596%" height="15" fill="rgb(206,74,20)" fg:x="642" fg:w="31"/><text x="5.6264%" y="511.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (31 samples, 0.26%)</title><rect x="5.3764%" y="485" width="0.2596%" height="15" fill="rgb(230,138,44)" fg:x="642" fg:w="31"/><text x="5.6264%" y="495.50"></text></g><g><title>std::sys::unix::fs::File::read (31 samples, 0.26%)</title><rect x="5.3764%" y="469" width="0.2596%" height="15" fill="rgb(235,182,43)" fg:x="642" fg:w="31"/><text x="5.6264%" y="479.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (31 samples, 0.26%)</title><rect x="5.3764%" y="453" width="0.2596%" height="15" fill="rgb(242,16,51)" fg:x="642" fg:w="31"/><text x="5.6264%" y="463.50"></text></g><g><title>__libc_read (31 samples, 0.26%)</title><rect x="5.3764%" y="437" width="0.2596%" height="15" fill="rgb(248,9,4)" fg:x="642" fg:w="31"/><text x="5.6264%" y="447.50"></text></g><g><title>__libc_read (31 samples, 0.26%)</title><rect x="5.3764%" y="421" width="0.2596%" height="15" fill="rgb(210,31,22)" fg:x="642" fg:w="31"/><text x="5.6264%" y="431.50"></text></g><g><title>[unknown] (31 samples, 0.26%)</title><rect x="5.3764%" y="405" width="0.2596%" height="15" fill="rgb(239,54,39)" fg:x="642" fg:w="31"/><text x="5.6264%" y="415.50"></text></g><g><title>[unknown] (31 samples, 0.26%)</title><rect x="5.3764%" y="389" width="0.2596%" height="15" fill="rgb(230,99,41)" fg:x="642" fg:w="31"/><text x="5.6264%" y="399.50"></text></g><g><title>[unknown] (31 samples, 0.26%)</title><rect x="5.3764%" y="373" width="0.2596%" height="15" fill="rgb(253,106,12)" fg:x="642" fg:w="31"/><text x="5.6264%" y="383.50"></text></g><g><title>[unknown] (29 samples, 0.24%)</title><rect x="5.3932%" y="357" width="0.2429%" height="15" fill="rgb(213,46,41)" fg:x="644" fg:w="29"/><text x="5.6432%" y="367.50"></text></g><g><title>[unknown] (29 samples, 0.24%)</title><rect x="5.3932%" y="341" width="0.2429%" height="15" fill="rgb(215,133,35)" fg:x="644" fg:w="29"/><text x="5.6432%" y="351.50"></text></g><g><title>[unknown] (29 samples, 0.24%)</title><rect x="5.3932%" y="325" width="0.2429%" height="15" fill="rgb(213,28,5)" fg:x="644" fg:w="29"/><text x="5.6432%" y="335.50"></text></g><g><title>[unknown] (29 samples, 0.24%)</title><rect x="5.3932%" y="309" width="0.2429%" height="15" fill="rgb(215,77,49)" fg:x="644" fg:w="29"/><text x="5.6432%" y="319.50"></text></g><g><title>[unknown] (29 samples, 0.24%)</title><rect x="5.3932%" y="293" width="0.2429%" height="15" fill="rgb(248,100,22)" fg:x="644" fg:w="29"/><text x="5.6432%" y="303.50"></text></g><g><title>[unknown] (29 samples, 0.24%)</title><rect x="5.3932%" y="277" width="0.2429%" height="15" fill="rgb(208,67,9)" fg:x="644" fg:w="29"/><text x="5.6432%" y="287.50"></text></g><g><title>[unknown] (29 samples, 0.24%)</title><rect x="5.3932%" y="261" width="0.2429%" height="15" fill="rgb(219,133,21)" fg:x="644" fg:w="29"/><text x="5.6432%" y="271.50"></text></g><g><title>[unknown] (29 samples, 0.24%)</title><rect x="5.3932%" y="245" width="0.2429%" height="15" fill="rgb(246,46,29)" fg:x="644" fg:w="29"/><text x="5.6432%" y="255.50"></text></g><g><title>[unknown] (14 samples, 0.12%)</title><rect x="5.5188%" y="229" width="0.1172%" height="15" fill="rgb(246,185,52)" fg:x="659" fg:w="14"/><text x="5.7688%" y="239.50"></text></g><g><title>[unknown] (14 samples, 0.12%)</title><rect x="5.5188%" y="213" width="0.1172%" height="15" fill="rgb(252,136,11)" fg:x="659" fg:w="14"/><text x="5.7688%" y="223.50"></text></g><g><title>[unknown] (14 samples, 0.12%)</title><rect x="5.5188%" y="197" width="0.1172%" height="15" fill="rgb(219,138,53)" fg:x="659" fg:w="14"/><text x="5.7688%" y="207.50"></text></g><g><title>[unknown] (13 samples, 0.11%)</title><rect x="5.5272%" y="181" width="0.1089%" height="15" fill="rgb(211,51,23)" fg:x="660" fg:w="13"/><text x="5.7772%" y="191.50"></text></g><g><title>[unknown] (13 samples, 0.11%)</title><rect x="5.5272%" y="165" width="0.1089%" height="15" fill="rgb(247,221,28)" fg:x="660" fg:w="13"/><text x="5.7772%" y="175.50"></text></g><g><title>[unknown] (12 samples, 0.10%)</title><rect x="5.5355%" y="149" width="0.1005%" height="15" fill="rgb(251,222,45)" fg:x="661" fg:w="12"/><text x="5.7855%" y="159.50"></text></g><g><title>[unknown] (12 samples, 0.10%)</title><rect x="5.5355%" y="133" width="0.1005%" height="15" fill="rgb(217,162,53)" fg:x="661" fg:w="12"/><text x="5.7855%" y="143.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="5.5523%" y="117" width="0.0837%" height="15" fill="rgb(229,93,14)" fg:x="663" fg:w="10"/><text x="5.8023%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="5.5858%" y="101" width="0.0502%" height="15" fill="rgb(209,67,49)" fg:x="667" fg:w="6"/><text x="5.8358%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="5.5942%" y="85" width="0.0419%" height="15" fill="rgb(213,87,29)" fg:x="668" fg:w="5"/><text x="5.8442%" y="95.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="5.6109%" y="69" width="0.0251%" height="15" fill="rgb(205,151,52)" fg:x="670" fg:w="3"/><text x="5.8609%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.6193%" y="53" width="0.0167%" height="15" fill="rgb(253,215,39)" fg:x="671" fg:w="2"/><text x="5.8693%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.6193%" y="37" width="0.0167%" height="15" fill="rgb(221,220,41)" fg:x="671" fg:w="2"/><text x="5.8693%" y="47.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (302 samples, 2.53%)</title><rect x="3.1572%" y="725" width="2.5291%" height="15" fill="rgb(218,133,21)" fg:x="377" fg:w="302"/><text x="3.4072%" y="735.50">&lt;&amp;..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (302 samples, 2.53%)</title><rect x="3.1572%" y="709" width="2.5291%" height="15" fill="rgb(221,193,43)" fg:x="377" fg:w="302"/><text x="3.4072%" y="719.50">&lt;s..</text></g><g><title>serde::de::SeqAccess::next_element (243 samples, 2.04%)</title><rect x="3.6513%" y="693" width="2.0350%" height="15" fill="rgb(240,128,52)" fg:x="436" fg:w="243"/><text x="3.9013%" y="703.50">s..</text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (234 samples, 1.96%)</title><rect x="3.7267%" y="677" width="1.9596%" height="15" fill="rgb(253,114,12)" fg:x="445" fg:w="234"/><text x="3.9767%" y="687.50">&lt;..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.05%)</title><rect x="5.6360%" y="661" width="0.0502%" height="15" fill="rgb(215,223,47)" fg:x="673" fg:w="6"/><text x="5.8860%" y="671.50"></text></g><g><title>&lt;graph_store::table::PropertyTable as graph_store::table::PropertyTableTrait&gt;::import (526 samples, 4.40%)</title><rect x="1.2980%" y="1221" width="4.4050%" height="15" fill="rgb(248,225,23)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1231.50">&lt;grap..</text></g><g><title>graph_store::io::import (526 samples, 4.40%)</title><rect x="1.2980%" y="1205" width="4.4050%" height="15" fill="rgb(250,108,0)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1215.50">graph..</text></g><g><title>bincode::deserialize_from (526 samples, 4.40%)</title><rect x="1.2980%" y="1189" width="4.4050%" height="15" fill="rgb(228,208,7)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1199.50">binco..</text></g><g><title>bincode::config::Options::deserialize_from (526 samples, 4.40%)</title><rect x="1.2980%" y="1173" width="4.4050%" height="15" fill="rgb(244,45,10)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1183.50">binco..</text></g><g><title>bincode::internal::deserialize_from (526 samples, 4.40%)</title><rect x="1.2980%" y="1157" width="4.4050%" height="15" fill="rgb(207,125,25)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1167.50">binco..</text></g><g><title>bincode::internal::deserialize_from_seed (526 samples, 4.40%)</title><rect x="1.2980%" y="1141" width="4.4050%" height="15" fill="rgb(210,195,18)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1151.50">binco..</text></g><g><title>bincode::internal::deserialize_from_custom_seed (526 samples, 4.40%)</title><rect x="1.2980%" y="1125" width="4.4050%" height="15" fill="rgb(249,80,12)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1135.50">binco..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (526 samples, 4.40%)</title><rect x="1.2980%" y="1109" width="4.4050%" height="15" fill="rgb(221,65,9)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1119.50">&lt;core..</text></g><g><title>graph_store::table::_::&lt;impl serde::de::Deserialize for graph_store::table::PropertyTable&gt;::deserialize (526 samples, 4.40%)</title><rect x="1.2980%" y="1093" width="4.4050%" height="15" fill="rgb(235,49,36)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1103.50">graph..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (526 samples, 4.40%)</title><rect x="1.2980%" y="1077" width="4.4050%" height="15" fill="rgb(225,32,20)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1087.50">&lt;&amp;mut..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (526 samples, 4.40%)</title><rect x="1.2980%" y="1061" width="4.4050%" height="15" fill="rgb(215,141,46)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1071.50">&lt;&amp;mut..</text></g><g><title>&lt;graph_store::table::_::&lt;impl serde::de::Deserialize for graph_store::table::PropertyTable&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (526 samples, 4.40%)</title><rect x="1.2980%" y="1045" width="4.4050%" height="15" fill="rgb(250,160,47)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1055.50">&lt;grap..</text></g><g><title>serde::de::SeqAccess::next_element (526 samples, 4.40%)</title><rect x="1.2980%" y="1029" width="4.4050%" height="15" fill="rgb(216,222,40)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1039.50">serde..</text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (526 samples, 4.40%)</title><rect x="1.2980%" y="1013" width="4.4050%" height="15" fill="rgb(234,217,39)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1023.50">&lt;&lt;&amp;mu..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (526 samples, 4.40%)</title><rect x="1.2980%" y="997" width="4.4050%" height="15" fill="rgb(207,178,40)" fg:x="155" fg:w="526"/><text x="1.5480%" y="1007.50">&lt;core..</text></g><g><title>graph_store::table::_::&lt;impl serde::de::Deserialize for graph_store::table::Table&gt;::deserialize (526 samples, 4.40%)</title><rect x="1.2980%" y="981" width="4.4050%" height="15" fill="rgb(221,136,13)" fg:x="155" fg:w="526"/><text x="1.5480%" y="991.50">graph..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum (526 samples, 4.40%)</title><rect x="1.2980%" y="965" width="4.4050%" height="15" fill="rgb(249,199,10)" fg:x="155" fg:w="526"/><text x="1.5480%" y="975.50">&lt;&amp;mut..</text></g><g><title>&lt;graph_store::table::_::&lt;impl serde::de::Deserialize for graph_store::table::Table&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (526 samples, 4.40%)</title><rect x="1.2980%" y="949" width="4.4050%" height="15" fill="rgb(249,222,13)" fg:x="155" fg:w="526"/><text x="1.5480%" y="959.50">&lt;grap..</text></g><g><title>serde::de::VariantAccess::newtype_variant (526 samples, 4.40%)</title><rect x="1.2980%" y="933" width="4.4050%" height="15" fill="rgb(244,185,38)" fg:x="155" fg:w="526"/><text x="1.5480%" y="943.50">serde..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (526 samples, 4.40%)</title><rect x="1.2980%" y="917" width="4.4050%" height="15" fill="rgb(236,202,9)" fg:x="155" fg:w="526"/><text x="1.5480%" y="927.50">&lt;&amp;mut..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (526 samples, 4.40%)</title><rect x="1.2980%" y="901" width="4.4050%" height="15" fill="rgb(250,229,37)" fg:x="155" fg:w="526"/><text x="1.5480%" y="911.50">&lt;core..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (526 samples, 4.40%)</title><rect x="1.2980%" y="885" width="4.4050%" height="15" fill="rgb(206,174,23)" fg:x="155" fg:w="526"/><text x="1.5480%" y="895.50">serde..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (526 samples, 4.40%)</title><rect x="1.2980%" y="869" width="4.4050%" height="15" fill="rgb(211,33,43)" fg:x="155" fg:w="526"/><text x="1.5480%" y="879.50">&lt;&amp;mut..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (526 samples, 4.40%)</title><rect x="1.2980%" y="853" width="4.4050%" height="15" fill="rgb(245,58,50)" fg:x="155" fg:w="526"/><text x="1.5480%" y="863.50">&lt;&amp;mut..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (526 samples, 4.40%)</title><rect x="1.2980%" y="837" width="4.4050%" height="15" fill="rgb(244,68,36)" fg:x="155" fg:w="526"/><text x="1.5480%" y="847.50">&lt;serd..</text></g><g><title>serde::de::SeqAccess::next_element (512 samples, 4.29%)</title><rect x="1.4153%" y="821" width="4.2877%" height="15" fill="rgb(232,229,15)" fg:x="169" fg:w="512"/><text x="1.6653%" y="831.50">serde..</text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (512 samples, 4.29%)</title><rect x="1.4153%" y="805" width="4.2877%" height="15" fill="rgb(254,30,23)" fg:x="169" fg:w="512"/><text x="1.6653%" y="815.50">&lt;&lt;&amp;mu..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (511 samples, 4.28%)</title><rect x="1.4237%" y="789" width="4.2794%" height="15" fill="rgb(235,160,14)" fg:x="170" fg:w="511"/><text x="1.6737%" y="799.50">&lt;core..</text></g><g><title>&lt;graph_store::table::Row as serde::de::Deserialize&gt;::deserialize (511 samples, 4.28%)</title><rect x="1.4237%" y="773" width="4.2794%" height="15" fill="rgb(212,155,44)" fg:x="170" fg:w="511"/><text x="1.6737%" y="783.50">&lt;grap..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (304 samples, 2.55%)</title><rect x="3.1572%" y="757" width="2.5459%" height="15" fill="rgb(226,2,50)" fg:x="377" fg:w="304"/><text x="3.4072%" y="767.50">se..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (304 samples, 2.55%)</title><rect x="3.1572%" y="741" width="2.5459%" height="15" fill="rgb(234,177,6)" fg:x="377" fg:w="304"/><text x="3.4072%" y="751.50">&lt;&amp;..</text></g><g><title>bincode::config::int::IntEncoding::deserialize_len (2 samples, 0.02%)</title><rect x="5.6863%" y="725" width="0.0167%" height="15" fill="rgb(217,24,9)" fg:x="679" fg:w="2"/><text x="5.9363%" y="735.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (2 samples, 0.02%)</title><rect x="5.6863%" y="709" width="0.0167%" height="15" fill="rgb(220,13,46)" fg:x="679" fg:w="2"/><text x="5.9363%" y="719.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u64 (2 samples, 0.02%)</title><rect x="5.6863%" y="693" width="0.0167%" height="15" fill="rgb(239,221,27)" fg:x="679" fg:w="2"/><text x="5.9363%" y="703.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u64 (2 samples, 0.02%)</title><rect x="5.6863%" y="677" width="0.0167%" height="15" fill="rgb(222,198,25)" fg:x="679" fg:w="2"/><text x="5.9363%" y="687.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_map::Access&lt;R,O&gt; as serde::de::MapAccess&gt;::next_key_seed (5 samples, 0.04%)</title><rect x="5.7030%" y="901" width="0.0419%" height="15" fill="rgb(211,99,13)" fg:x="681" fg:w="5"/><text x="5.9530%" y="911.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.04%)</title><rect x="5.7030%" y="885" width="0.0419%" height="15" fill="rgb(232,111,31)" fg:x="681" fg:w="5"/><text x="5.9530%" y="895.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for usize&gt;::deserialize (5 samples, 0.04%)</title><rect x="5.7030%" y="869" width="0.0419%" height="15" fill="rgb(245,82,37)" fg:x="681" fg:w="5"/><text x="5.9530%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u64 (5 samples, 0.04%)</title><rect x="5.7030%" y="853" width="0.0419%" height="15" fill="rgb(227,149,46)" fg:x="681" fg:w="5"/><text x="5.9530%" y="863.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (5 samples, 0.04%)</title><rect x="5.7030%" y="837" width="0.0419%" height="15" fill="rgb(218,36,50)" fg:x="681" fg:w="5"/><text x="5.9530%" y="847.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u64 (5 samples, 0.04%)</title><rect x="5.7030%" y="821" width="0.0419%" height="15" fill="rgb(226,80,48)" fg:x="681" fg:w="5"/><text x="5.9530%" y="831.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u64 (5 samples, 0.04%)</title><rect x="5.7030%" y="805" width="0.0419%" height="15" fill="rgb(238,224,15)" fg:x="681" fg:w="5"/><text x="5.9530%" y="815.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (5 samples, 0.04%)</title><rect x="5.7030%" y="789" width="0.0419%" height="15" fill="rgb(241,136,10)" fg:x="681" fg:w="5"/><text x="5.9530%" y="799.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (5 samples, 0.04%)</title><rect x="5.7030%" y="773" width="0.0419%" height="15" fill="rgb(208,32,45)" fg:x="681" fg:w="5"/><text x="5.9530%" y="783.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (5 samples, 0.04%)</title><rect x="5.7030%" y="757" width="0.0419%" height="15" fill="rgb(207,135,9)" fg:x="681" fg:w="5"/><text x="5.9530%" y="767.50"></text></g><g><title>std::io::default_read_exact (4 samples, 0.03%)</title><rect x="5.7114%" y="741" width="0.0335%" height="15" fill="rgb(206,86,44)" fg:x="682" fg:w="4"/><text x="5.9614%" y="751.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.03%)</title><rect x="5.7114%" y="725" width="0.0335%" height="15" fill="rgb(245,177,15)" fg:x="682" fg:w="4"/><text x="5.9614%" y="735.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (4 samples, 0.03%)</title><rect x="5.7114%" y="709" width="0.0335%" height="15" fill="rgb(206,64,50)" fg:x="682" fg:w="4"/><text x="5.9614%" y="719.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (4 samples, 0.03%)</title><rect x="5.7114%" y="693" width="0.0335%" height="15" fill="rgb(234,36,40)" fg:x="682" fg:w="4"/><text x="5.9614%" y="703.50"></text></g><g><title>std::sys::unix::fs::File::read (4 samples, 0.03%)</title><rect x="5.7114%" y="677" width="0.0335%" height="15" fill="rgb(213,64,8)" fg:x="682" fg:w="4"/><text x="5.9614%" y="687.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (4 samples, 0.03%)</title><rect x="5.7114%" y="661" width="0.0335%" height="15" fill="rgb(210,75,36)" fg:x="682" fg:w="4"/><text x="5.9614%" y="671.50"></text></g><g><title>__libc_read (4 samples, 0.03%)</title><rect x="5.7114%" y="645" width="0.0335%" height="15" fill="rgb(229,88,21)" fg:x="682" fg:w="4"/><text x="5.9614%" y="655.50"></text></g><g><title>__libc_read (4 samples, 0.03%)</title><rect x="5.7114%" y="629" width="0.0335%" height="15" fill="rgb(252,204,47)" fg:x="682" fg:w="4"/><text x="5.9614%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="5.7114%" y="613" width="0.0335%" height="15" fill="rgb(208,77,27)" fg:x="682" fg:w="4"/><text x="5.9614%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="5.7114%" y="597" width="0.0335%" height="15" fill="rgb(221,76,26)" fg:x="682" fg:w="4"/><text x="5.9614%" y="607.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="5.7114%" y="581" width="0.0335%" height="15" fill="rgb(225,139,18)" fg:x="682" fg:w="4"/><text x="5.9614%" y="591.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="5.7114%" y="565" width="0.0335%" height="15" fill="rgb(230,137,11)" fg:x="682" fg:w="4"/><text x="5.9614%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="5.7114%" y="549" width="0.0335%" height="15" fill="rgb(212,28,1)" fg:x="682" fg:w="4"/><text x="5.9614%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="5.7114%" y="533" width="0.0335%" height="15" fill="rgb(248,164,17)" fg:x="682" fg:w="4"/><text x="5.9614%" y="543.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="5.7114%" y="517" width="0.0335%" height="15" fill="rgb(222,171,42)" fg:x="682" fg:w="4"/><text x="5.9614%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="5.7114%" y="501" width="0.0335%" height="15" fill="rgb(243,84,45)" fg:x="682" fg:w="4"/><text x="5.9614%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="5.7114%" y="485" width="0.0335%" height="15" fill="rgb(252,49,23)" fg:x="682" fg:w="4"/><text x="5.9614%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="5.7114%" y="469" width="0.0335%" height="15" fill="rgb(215,19,7)" fg:x="682" fg:w="4"/><text x="5.9614%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="5.7114%" y="453" width="0.0335%" height="15" fill="rgb(238,81,41)" fg:x="682" fg:w="4"/><text x="5.9614%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.7282%" y="437" width="0.0167%" height="15" fill="rgb(210,199,37)" fg:x="684" fg:w="2"/><text x="5.9782%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.7282%" y="421" width="0.0167%" height="15" fill="rgb(244,192,49)" fg:x="684" fg:w="2"/><text x="5.9782%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.7282%" y="405" width="0.0167%" height="15" fill="rgb(226,211,11)" fg:x="684" fg:w="2"/><text x="5.9782%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.7282%" y="389" width="0.0167%" height="15" fill="rgb(236,162,54)" fg:x="684" fg:w="2"/><text x="5.9782%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.7282%" y="373" width="0.0167%" height="15" fill="rgb(220,229,9)" fg:x="684" fg:w="2"/><text x="5.9782%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.7282%" y="357" width="0.0167%" height="15" fill="rgb(250,87,22)" fg:x="684" fg:w="2"/><text x="5.9782%" y="367.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (3 samples, 0.03%)</title><rect x="5.7700%" y="789" width="0.0251%" height="15" fill="rgb(239,43,17)" fg:x="689" fg:w="3"/><text x="6.0200%" y="799.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (3 samples, 0.03%)</title><rect x="5.7700%" y="773" width="0.0251%" height="15" fill="rgb(231,177,25)" fg:x="689" fg:w="3"/><text x="6.0200%" y="783.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (3 samples, 0.03%)</title><rect x="5.7700%" y="757" width="0.0251%" height="15" fill="rgb(219,179,1)" fg:x="689" fg:w="3"/><text x="6.0200%" y="767.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (3 samples, 0.03%)</title><rect x="5.7700%" y="741" width="0.0251%" height="15" fill="rgb(238,219,53)" fg:x="689" fg:w="3"/><text x="6.0200%" y="751.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (3 samples, 0.03%)</title><rect x="5.7700%" y="725" width="0.0251%" height="15" fill="rgb(232,167,36)" fg:x="689" fg:w="3"/><text x="6.0200%" y="735.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (3 samples, 0.03%)</title><rect x="5.7700%" y="709" width="0.0251%" height="15" fill="rgb(244,19,51)" fg:x="689" fg:w="3"/><text x="6.0200%" y="719.50"></text></g><g><title>std::io::default_read_exact (3 samples, 0.03%)</title><rect x="5.7700%" y="693" width="0.0251%" height="15" fill="rgb(224,6,22)" fg:x="689" fg:w="3"/><text x="6.0200%" y="703.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.03%)</title><rect x="5.7700%" y="677" width="0.0251%" height="15" fill="rgb(224,145,5)" fg:x="689" fg:w="3"/><text x="6.0200%" y="687.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3 samples, 0.03%)</title><rect x="5.7700%" y="661" width="0.0251%" height="15" fill="rgb(234,130,49)" fg:x="689" fg:w="3"/><text x="6.0200%" y="671.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.03%)</title><rect x="5.7700%" y="645" width="0.0251%" height="15" fill="rgb(254,6,2)" fg:x="689" fg:w="3"/><text x="6.0200%" y="655.50"></text></g><g><title>std::sys::unix::fs::File::read (3 samples, 0.03%)</title><rect x="5.7700%" y="629" width="0.0251%" height="15" fill="rgb(208,96,46)" fg:x="689" fg:w="3"/><text x="6.0200%" y="639.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (3 samples, 0.03%)</title><rect x="5.7700%" y="613" width="0.0251%" height="15" fill="rgb(239,3,39)" fg:x="689" fg:w="3"/><text x="6.0200%" y="623.50"></text></g><g><title>__libc_read (3 samples, 0.03%)</title><rect x="5.7700%" y="597" width="0.0251%" height="15" fill="rgb(233,210,1)" fg:x="689" fg:w="3"/><text x="6.0200%" y="607.50"></text></g><g><title>__libc_read (3 samples, 0.03%)</title><rect x="5.7700%" y="581" width="0.0251%" height="15" fill="rgb(244,137,37)" fg:x="689" fg:w="3"/><text x="6.0200%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="5.7700%" y="565" width="0.0251%" height="15" fill="rgb(240,136,2)" fg:x="689" fg:w="3"/><text x="6.0200%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="5.7700%" y="549" width="0.0251%" height="15" fill="rgb(239,18,37)" fg:x="689" fg:w="3"/><text x="6.0200%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="5.7700%" y="533" width="0.0251%" height="15" fill="rgb(218,185,22)" fg:x="689" fg:w="3"/><text x="6.0200%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="5.7700%" y="517" width="0.0251%" height="15" fill="rgb(225,218,4)" fg:x="689" fg:w="3"/><text x="6.0200%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="5.7700%" y="501" width="0.0251%" height="15" fill="rgb(230,182,32)" fg:x="689" fg:w="3"/><text x="6.0200%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="5.7700%" y="485" width="0.0251%" height="15" fill="rgb(242,56,43)" fg:x="689" fg:w="3"/><text x="6.0200%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="5.7700%" y="469" width="0.0251%" height="15" fill="rgb(233,99,24)" fg:x="689" fg:w="3"/><text x="6.0200%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="5.7700%" y="453" width="0.0251%" height="15" fill="rgb(234,209,42)" fg:x="689" fg:w="3"/><text x="6.0200%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="5.7700%" y="437" width="0.0251%" height="15" fill="rgb(227,7,12)" fg:x="689" fg:w="3"/><text x="6.0200%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.7784%" y="421" width="0.0167%" height="15" fill="rgb(245,203,43)" fg:x="690" fg:w="2"/><text x="6.0284%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.7784%" y="405" width="0.0167%" height="15" fill="rgb(238,205,33)" fg:x="690" fg:w="2"/><text x="6.0284%" y="415.50"></text></g><g><title>serde::de::EnumAccess::variant (5 samples, 0.04%)</title><rect x="5.7617%" y="821" width="0.0419%" height="15" fill="rgb(231,56,7)" fg:x="688" fg:w="5"/><text x="6.0117%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum::&lt;impl serde::de::EnumAccess for &amp;mut bincode::de::Deserializer&lt;R,O&gt;&gt;::variant_seed (5 samples, 0.04%)</title><rect x="5.7617%" y="805" width="0.0419%" height="15" fill="rgb(244,186,29)" fg:x="688" fg:w="5"/><text x="6.0117%" y="815.50"></text></g><g><title>serde::de::MapAccess::next_entry (14 samples, 0.12%)</title><rect x="5.7030%" y="933" width="0.1172%" height="15" fill="rgb(234,111,31)" fg:x="681" fg:w="14"/><text x="5.9530%" y="943.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (14 samples, 0.12%)</title><rect x="5.7030%" y="917" width="0.1172%" height="15" fill="rgb(241,149,10)" fg:x="681" fg:w="14"/><text x="5.9530%" y="927.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_map::Access&lt;R,O&gt; as serde::de::MapAccess&gt;::next_value_seed (9 samples, 0.08%)</title><rect x="5.7449%" y="901" width="0.0754%" height="15" fill="rgb(249,206,44)" fg:x="686" fg:w="9"/><text x="5.9949%" y="911.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.08%)</title><rect x="5.7449%" y="885" width="0.0754%" height="15" fill="rgb(251,153,30)" fg:x="686" fg:w="9"/><text x="5.9949%" y="895.50"></text></g><g><title>graph_store::table::_::&lt;impl serde::de::Deserialize for graph_store::table::SimpleType&gt;::deserialize (9 samples, 0.08%)</title><rect x="5.7449%" y="869" width="0.0754%" height="15" fill="rgb(239,152,38)" fg:x="686" fg:w="9"/><text x="5.9949%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum (9 samples, 0.08%)</title><rect x="5.7449%" y="853" width="0.0754%" height="15" fill="rgb(249,139,47)" fg:x="686" fg:w="9"/><text x="5.9949%" y="863.50"></text></g><g><title>&lt;graph_store::table::_::&lt;impl serde::de::Deserialize for graph_store::table::SimpleType&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (9 samples, 0.08%)</title><rect x="5.7449%" y="837" width="0.0754%" height="15" fill="rgb(244,64,35)" fg:x="686" fg:w="9"/><text x="5.9949%" y="847.50"></text></g><g><title>serde::de::VariantAccess::newtype_variant (2 samples, 0.02%)</title><rect x="5.8035%" y="821" width="0.0167%" height="15" fill="rgb(216,46,15)" fg:x="693" fg:w="2"/><text x="6.0535%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (2 samples, 0.02%)</title><rect x="5.8035%" y="805" width="0.0167%" height="15" fill="rgb(250,74,19)" fg:x="693" fg:w="2"/><text x="6.0535%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.02%)</title><rect x="5.8035%" y="789" width="0.0167%" height="15" fill="rgb(249,42,33)" fg:x="693" fg:w="2"/><text x="6.0535%" y="799.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u64&gt;::deserialize (2 samples, 0.02%)</title><rect x="5.8035%" y="773" width="0.0167%" height="15" fill="rgb(242,149,17)" fg:x="693" fg:w="2"/><text x="6.0535%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u64 (2 samples, 0.02%)</title><rect x="5.8035%" y="757" width="0.0167%" height="15" fill="rgb(244,29,21)" fg:x="693" fg:w="2"/><text x="6.0535%" y="767.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (2 samples, 0.02%)</title><rect x="5.8035%" y="741" width="0.0167%" height="15" fill="rgb(220,130,37)" fg:x="693" fg:w="2"/><text x="6.0535%" y="751.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u64 (2 samples, 0.02%)</title><rect x="5.8035%" y="725" width="0.0167%" height="15" fill="rgb(211,67,2)" fg:x="693" fg:w="2"/><text x="6.0535%" y="735.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u64 (2 samples, 0.02%)</title><rect x="5.8035%" y="709" width="0.0167%" height="15" fill="rgb(235,68,52)" fg:x="693" fg:w="2"/><text x="6.0535%" y="719.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (2 samples, 0.02%)</title><rect x="5.8035%" y="693" width="0.0167%" height="15" fill="rgb(246,142,3)" fg:x="693" fg:w="2"/><text x="6.0535%" y="703.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (2 samples, 0.02%)</title><rect x="5.8035%" y="677" width="0.0167%" height="15" fill="rgb(241,25,7)" fg:x="693" fg:w="2"/><text x="6.0535%" y="687.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (2 samples, 0.02%)</title><rect x="5.8035%" y="661" width="0.0167%" height="15" fill="rgb(242,119,39)" fg:x="693" fg:w="2"/><text x="6.0535%" y="671.50"></text></g><g><title>std::io::default_read_exact (2 samples, 0.02%)</title><rect x="5.8035%" y="645" width="0.0167%" height="15" fill="rgb(241,98,45)" fg:x="693" fg:w="2"/><text x="6.0535%" y="655.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="5.8035%" y="629" width="0.0167%" height="15" fill="rgb(254,28,30)" fg:x="693" fg:w="2"/><text x="6.0535%" y="639.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.02%)</title><rect x="5.8035%" y="613" width="0.0167%" height="15" fill="rgb(241,142,54)" fg:x="693" fg:w="2"/><text x="6.0535%" y="623.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="5.8035%" y="597" width="0.0167%" height="15" fill="rgb(222,85,15)" fg:x="693" fg:w="2"/><text x="6.0535%" y="607.50"></text></g><g><title>std::sys::unix::fs::File::read (2 samples, 0.02%)</title><rect x="5.8035%" y="581" width="0.0167%" height="15" fill="rgb(210,85,47)" fg:x="693" fg:w="2"/><text x="6.0535%" y="591.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (2 samples, 0.02%)</title><rect x="5.8035%" y="565" width="0.0167%" height="15" fill="rgb(224,206,25)" fg:x="693" fg:w="2"/><text x="6.0535%" y="575.50"></text></g><g><title>__libc_read (2 samples, 0.02%)</title><rect x="5.8035%" y="549" width="0.0167%" height="15" fill="rgb(243,201,19)" fg:x="693" fg:w="2"/><text x="6.0535%" y="559.50"></text></g><g><title>__libc_read (2 samples, 0.02%)</title><rect x="5.8035%" y="533" width="0.0167%" height="15" fill="rgb(236,59,4)" fg:x="693" fg:w="2"/><text x="6.0535%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.8035%" y="517" width="0.0167%" height="15" fill="rgb(254,179,45)" fg:x="693" fg:w="2"/><text x="6.0535%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.8035%" y="501" width="0.0167%" height="15" fill="rgb(226,14,10)" fg:x="693" fg:w="2"/><text x="6.0535%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.8035%" y="485" width="0.0167%" height="15" fill="rgb(244,27,41)" fg:x="693" fg:w="2"/><text x="6.0535%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.8035%" y="469" width="0.0167%" height="15" fill="rgb(235,35,32)" fg:x="693" fg:w="2"/><text x="6.0535%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.8035%" y="453" width="0.0167%" height="15" fill="rgb(218,68,31)" fg:x="693" fg:w="2"/><text x="6.0535%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.8035%" y="437" width="0.0167%" height="15" fill="rgb(207,120,37)" fg:x="693" fg:w="2"/><text x="6.0535%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.8035%" y="421" width="0.0167%" height="15" fill="rgb(227,98,0)" fg:x="693" fg:w="2"/><text x="6.0535%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.8035%" y="405" width="0.0167%" height="15" fill="rgb(207,7,3)" fg:x="693" fg:w="2"/><text x="6.0535%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.8035%" y="389" width="0.0167%" height="15" fill="rgb(206,98,19)" fg:x="693" fg:w="2"/><text x="6.0535%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.8035%" y="373" width="0.0167%" height="15" fill="rgb(217,5,26)" fg:x="693" fg:w="2"/><text x="6.0535%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.8035%" y="357" width="0.0167%" height="15" fill="rgb(235,190,38)" fg:x="693" fg:w="2"/><text x="6.0535%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="5.8622%" y="837" width="0.0167%" height="15" fill="rgb(247,86,24)" fg:x="700" fg:w="2"/><text x="6.1122%" y="847.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.07%)</title><rect x="5.8454%" y="885" width="0.0670%" height="15" fill="rgb(205,101,16)" fg:x="698" fg:w="8"/><text x="6.0954%" y="895.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.07%)</title><rect x="5.8454%" y="869" width="0.0670%" height="15" fill="rgb(246,168,33)" fg:x="698" fg:w="8"/><text x="6.0954%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.07%)</title><rect x="5.8454%" y="853" width="0.0670%" height="15" fill="rgb(231,114,1)" fg:x="698" fg:w="8"/><text x="6.0954%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.03%)</title><rect x="5.8789%" y="837" width="0.0335%" height="15" fill="rgb(207,184,53)" fg:x="702" fg:w="4"/><text x="6.1289%" y="847.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="5.8957%" y="821" width="0.0167%" height="15" fill="rgb(224,95,51)" fg:x="704" fg:w="2"/><text x="6.1457%" y="831.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="5.9124%" y="853" width="0.0251%" height="15" fill="rgb(212,188,45)" fg:x="706" fg:w="3"/><text x="6.1624%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="5.9124%" y="837" width="0.0251%" height="15" fill="rgb(223,154,38)" fg:x="706" fg:w="3"/><text x="6.1624%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="5.9124%" y="821" width="0.0251%" height="15" fill="rgb(251,22,52)" fg:x="706" fg:w="3"/><text x="6.1624%" y="831.50"></text></g><g><title>hashbrown::map::make_insert_hash (12 samples, 0.10%)</title><rect x="5.8454%" y="901" width="0.1005%" height="15" fill="rgb(229,209,22)" fg:x="698" fg:w="12"/><text x="6.0954%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (4 samples, 0.03%)</title><rect x="5.9124%" y="885" width="0.0335%" height="15" fill="rgb(234,138,34)" fg:x="706" fg:w="4"/><text x="6.1624%" y="895.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.03%)</title><rect x="5.9124%" y="869" width="0.0335%" height="15" fill="rgb(212,95,11)" fg:x="706" fg:w="4"/><text x="6.1624%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="5.9961%" y="869" width="0.0419%" height="15" fill="rgb(240,179,47)" fg:x="716" fg:w="5"/><text x="6.2461%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="5.9961%" y="853" width="0.0419%" height="15" fill="rgb(240,163,11)" fg:x="716" fg:w="5"/><text x="6.2461%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (16 samples, 0.13%)</title><rect x="5.9459%" y="901" width="0.1340%" height="15" fill="rgb(236,37,12)" fg:x="710" fg:w="16"/><text x="6.1959%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16 samples, 0.13%)</title><rect x="5.9459%" y="885" width="0.1340%" height="15" fill="rgb(232,164,16)" fg:x="710" fg:w="16"/><text x="6.1959%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (5 samples, 0.04%)</title><rect x="6.0380%" y="869" width="0.0419%" height="15" fill="rgb(244,205,15)" fg:x="721" fg:w="5"/><text x="6.2880%" y="879.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (5 samples, 0.04%)</title><rect x="6.0380%" y="853" width="0.0419%" height="15" fill="rgb(223,117,47)" fg:x="721" fg:w="5"/><text x="6.2880%" y="863.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (5 samples, 0.04%)</title><rect x="6.0380%" y="837" width="0.0419%" height="15" fill="rgb(244,107,35)" fg:x="721" fg:w="5"/><text x="6.2880%" y="847.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.04%)</title><rect x="6.0380%" y="821" width="0.0419%" height="15" fill="rgb(205,140,8)" fg:x="721" fg:w="5"/><text x="6.2880%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.04%)</title><rect x="6.0380%" y="805" width="0.0419%" height="15" fill="rgb(228,84,46)" fg:x="721" fg:w="5"/><text x="6.2880%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.04%)</title><rect x="6.0380%" y="789" width="0.0419%" height="15" fill="rgb(254,188,9)" fg:x="721" fg:w="5"/><text x="6.2880%" y="799.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (6 samples, 0.05%)</title><rect x="6.0799%" y="885" width="0.0502%" height="15" fill="rgb(206,112,54)" fg:x="726" fg:w="6"/><text x="6.3299%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (6 samples, 0.05%)</title><rect x="6.0799%" y="869" width="0.0502%" height="15" fill="rgb(216,84,49)" fg:x="726" fg:w="6"/><text x="6.3299%" y="879.50"></text></g><g><title>core::ptr::write (6 samples, 0.05%)</title><rect x="6.0799%" y="853" width="0.0502%" height="15" fill="rgb(214,194,35)" fg:x="726" fg:w="6"/><text x="6.3299%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (2 samples, 0.02%)</title><rect x="6.1385%" y="853" width="0.0167%" height="15" fill="rgb(249,28,3)" fg:x="733" fg:w="2"/><text x="6.3885%" y="863.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="6.1385%" y="837" width="0.0167%" height="15" fill="rgb(222,56,52)" fg:x="733" fg:w="2"/><text x="6.3885%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (2 samples, 0.02%)</title><rect x="6.1385%" y="821" width="0.0167%" height="15" fill="rgb(245,217,50)" fg:x="733" fg:w="2"/><text x="6.3885%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (2 samples, 0.02%)</title><rect x="6.1385%" y="805" width="0.0167%" height="15" fill="rgb(213,201,24)" fg:x="733" fg:w="2"/><text x="6.3885%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="6.1385%" y="789" width="0.0167%" height="15" fill="rgb(248,116,28)" fg:x="733" fg:w="2"/><text x="6.3885%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="6.1385%" y="773" width="0.0167%" height="15" fill="rgb(219,72,43)" fg:x="733" fg:w="2"/><text x="6.3885%" y="783.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="6.1385%" y="757" width="0.0167%" height="15" fill="rgb(209,138,14)" fg:x="733" fg:w="2"/><text x="6.3885%" y="767.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="6.1385%" y="741" width="0.0167%" height="15" fill="rgb(222,18,33)" fg:x="733" fg:w="2"/><text x="6.3885%" y="751.50"></text></g><g><title>__GI_munmap (2 samples, 0.02%)</title><rect x="6.1385%" y="725" width="0.0167%" height="15" fill="rgb(213,199,7)" fg:x="733" fg:w="2"/><text x="6.3885%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.1385%" y="709" width="0.0167%" height="15" fill="rgb(250,110,10)" fg:x="733" fg:w="2"/><text x="6.3885%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.1385%" y="693" width="0.0167%" height="15" fill="rgb(248,123,6)" fg:x="733" fg:w="2"/><text x="6.3885%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.1385%" y="677" width="0.0167%" height="15" fill="rgb(206,91,31)" fg:x="733" fg:w="2"/><text x="6.3885%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.1385%" y="661" width="0.0167%" height="15" fill="rgb(211,154,13)" fg:x="733" fg:w="2"/><text x="6.3885%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.1385%" y="645" width="0.0167%" height="15" fill="rgb(225,148,7)" fg:x="733" fg:w="2"/><text x="6.3885%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.1385%" y="629" width="0.0167%" height="15" fill="rgb(220,160,43)" fg:x="733" fg:w="2"/><text x="6.3885%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.1385%" y="613" width="0.0167%" height="15" fill="rgb(213,52,39)" fg:x="733" fg:w="2"/><text x="6.3885%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.1385%" y="597" width="0.0167%" height="15" fill="rgb(243,137,7)" fg:x="733" fg:w="2"/><text x="6.3885%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.1385%" y="581" width="0.0167%" height="15" fill="rgb(230,79,13)" fg:x="733" fg:w="2"/><text x="6.3885%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.1385%" y="565" width="0.0167%" height="15" fill="rgb(247,105,23)" fg:x="733" fg:w="2"/><text x="6.3885%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="6.1804%" y="757" width="0.0167%" height="15" fill="rgb(223,179,41)" fg:x="738" fg:w="2"/><text x="6.4304%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="6.1636%" y="821" width="0.0419%" height="15" fill="rgb(218,9,34)" fg:x="736" fg:w="5"/><text x="6.4136%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="6.1636%" y="805" width="0.0419%" height="15" fill="rgb(222,106,8)" fg:x="736" fg:w="5"/><text x="6.4136%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="6.1636%" y="789" width="0.0419%" height="15" fill="rgb(211,220,0)" fg:x="736" fg:w="5"/><text x="6.4136%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.03%)</title><rect x="6.1720%" y="773" width="0.0335%" height="15" fill="rgb(229,52,16)" fg:x="737" fg:w="4"/><text x="6.4220%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="6.2306%" y="725" width="0.0167%" height="15" fill="rgb(212,155,18)" fg:x="744" fg:w="2"/><text x="6.4806%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.03%)</title><rect x="6.2306%" y="741" width="0.0335%" height="15" fill="rgb(242,21,14)" fg:x="744" fg:w="4"/><text x="6.4806%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="6.2474%" y="725" width="0.0167%" height="15" fill="rgb(222,19,48)" fg:x="746" fg:w="2"/><text x="6.4974%" y="735.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (14 samples, 0.12%)</title><rect x="6.1553%" y="853" width="0.1172%" height="15" fill="rgb(232,45,27)" fg:x="735" fg:w="14"/><text x="6.4053%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.12%)</title><rect x="6.1553%" y="837" width="0.1172%" height="15" fill="rgb(249,103,42)" fg:x="735" fg:w="14"/><text x="6.4053%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (8 samples, 0.07%)</title><rect x="6.2055%" y="821" width="0.0670%" height="15" fill="rgb(246,81,33)" fg:x="741" fg:w="8"/><text x="6.4555%" y="831.50"></text></g><g><title>core::hash::Hasher::write_usize (8 samples, 0.07%)</title><rect x="6.2055%" y="805" width="0.0670%" height="15" fill="rgb(252,33,42)" fg:x="741" fg:w="8"/><text x="6.4555%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.06%)</title><rect x="6.2139%" y="789" width="0.0586%" height="15" fill="rgb(209,212,41)" fg:x="742" fg:w="7"/><text x="6.4639%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.06%)</title><rect x="6.2139%" y="773" width="0.0586%" height="15" fill="rgb(207,154,6)" fg:x="742" fg:w="7"/><text x="6.4639%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.06%)</title><rect x="6.2139%" y="757" width="0.0586%" height="15" fill="rgb(223,64,47)" fg:x="742" fg:w="7"/><text x="6.4639%" y="767.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (24 samples, 0.20%)</title><rect x="6.2809%" y="853" width="0.2010%" height="15" fill="rgb(211,161,38)" fg:x="750" fg:w="24"/><text x="6.5309%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (24 samples, 0.20%)</title><rect x="6.2809%" y="837" width="0.2010%" height="15" fill="rgb(219,138,40)" fg:x="750" fg:w="24"/><text x="6.5309%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.20%)</title><rect x="6.2809%" y="821" width="0.2010%" height="15" fill="rgb(241,228,46)" fg:x="750" fg:w="24"/><text x="6.5309%" y="831.50"></text></g><g><title>[unknown] (23 samples, 0.19%)</title><rect x="6.2893%" y="805" width="0.1926%" height="15" fill="rgb(223,209,38)" fg:x="751" fg:w="23"/><text x="6.5393%" y="815.50"></text></g><g><title>[unknown] (18 samples, 0.15%)</title><rect x="6.3311%" y="789" width="0.1507%" height="15" fill="rgb(236,164,45)" fg:x="756" fg:w="18"/><text x="6.5811%" y="799.50"></text></g><g><title>[unknown] (18 samples, 0.15%)</title><rect x="6.3311%" y="773" width="0.1507%" height="15" fill="rgb(231,15,5)" fg:x="756" fg:w="18"/><text x="6.5811%" y="783.50"></text></g><g><title>[unknown] (18 samples, 0.15%)</title><rect x="6.3311%" y="757" width="0.1507%" height="15" fill="rgb(252,35,15)" fg:x="756" fg:w="18"/><text x="6.5811%" y="767.50"></text></g><g><title>[unknown] (11 samples, 0.09%)</title><rect x="6.3897%" y="741" width="0.0921%" height="15" fill="rgb(248,181,18)" fg:x="763" fg:w="11"/><text x="6.6397%" y="751.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="6.4065%" y="725" width="0.0754%" height="15" fill="rgb(233,39,42)" fg:x="765" fg:w="9"/><text x="6.6565%" y="735.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="6.4065%" y="709" width="0.0754%" height="15" fill="rgb(238,110,33)" fg:x="765" fg:w="9"/><text x="6.6565%" y="719.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="6.4065%" y="693" width="0.0754%" height="15" fill="rgb(233,195,10)" fg:x="765" fg:w="9"/><text x="6.6565%" y="703.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="6.4065%" y="677" width="0.0754%" height="15" fill="rgb(254,105,3)" fg:x="765" fg:w="9"/><text x="6.6565%" y="687.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="6.4149%" y="661" width="0.0670%" height="15" fill="rgb(221,225,9)" fg:x="766" fg:w="8"/><text x="6.6649%" y="671.50"></text></g><g><title>hashbrown::raw::is_full (3 samples, 0.03%)</title><rect x="6.5070%" y="821" width="0.0251%" height="15" fill="rgb(224,227,45)" fg:x="777" fg:w="3"/><text x="6.7570%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (48 samples, 0.40%)</title><rect x="6.1385%" y="885" width="0.4020%" height="15" fill="rgb(229,198,43)" fg:x="733" fg:w="48"/><text x="6.3885%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (48 samples, 0.40%)</title><rect x="6.1385%" y="869" width="0.4020%" height="15" fill="rgb(206,209,35)" fg:x="733" fg:w="48"/><text x="6.3885%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (7 samples, 0.06%)</title><rect x="6.4819%" y="853" width="0.0586%" height="15" fill="rgb(245,195,53)" fg:x="774" fg:w="7"/><text x="6.7319%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (7 samples, 0.06%)</title><rect x="6.4819%" y="837" width="0.0586%" height="15" fill="rgb(240,92,26)" fg:x="774" fg:w="7"/><text x="6.7319%" y="847.50"></text></g><g><title>hashbrown::raw::is_full (2 samples, 0.02%)</title><rect x="6.5656%" y="869" width="0.0167%" height="15" fill="rgb(207,40,23)" fg:x="784" fg:w="2"/><text x="6.8156%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (6 samples, 0.05%)</title><rect x="6.5405%" y="885" width="0.0502%" height="15" fill="rgb(223,111,35)" fg:x="781" fg:w="6"/><text x="6.7905%" y="895.50"></text></g><g><title>&lt;graph_store::table::SingleValueTable as graph_store::table::PropertyTableTrait&gt;::import (107 samples, 0.90%)</title><rect x="5.7030%" y="1221" width="0.8961%" height="15" fill="rgb(229,147,28)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1231.50"></text></g><g><title>graph_store::io::import (107 samples, 0.90%)</title><rect x="5.7030%" y="1205" width="0.8961%" height="15" fill="rgb(211,29,28)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1215.50"></text></g><g><title>bincode::deserialize_from (107 samples, 0.90%)</title><rect x="5.7030%" y="1189" width="0.8961%" height="15" fill="rgb(228,72,33)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1199.50"></text></g><g><title>bincode::config::Options::deserialize_from (107 samples, 0.90%)</title><rect x="5.7030%" y="1173" width="0.8961%" height="15" fill="rgb(205,214,31)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1183.50"></text></g><g><title>bincode::internal::deserialize_from (107 samples, 0.90%)</title><rect x="5.7030%" y="1157" width="0.8961%" height="15" fill="rgb(224,111,15)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1167.50"></text></g><g><title>bincode::internal::deserialize_from_seed (107 samples, 0.90%)</title><rect x="5.7030%" y="1141" width="0.8961%" height="15" fill="rgb(253,21,26)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1151.50"></text></g><g><title>bincode::internal::deserialize_from_custom_seed (107 samples, 0.90%)</title><rect x="5.7030%" y="1125" width="0.8961%" height="15" fill="rgb(245,139,43)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1135.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (107 samples, 0.90%)</title><rect x="5.7030%" y="1109" width="0.8961%" height="15" fill="rgb(252,170,7)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1119.50"></text></g><g><title>graph_store::table::_::&lt;impl serde::de::Deserialize for graph_store::table::SingleValueTable&gt;::deserialize (107 samples, 0.90%)</title><rect x="5.7030%" y="1093" width="0.8961%" height="15" fill="rgb(231,118,14)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1103.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (107 samples, 0.90%)</title><rect x="5.7030%" y="1077" width="0.8961%" height="15" fill="rgb(238,83,0)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1087.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (107 samples, 0.90%)</title><rect x="5.7030%" y="1061" width="0.8961%" height="15" fill="rgb(221,39,39)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1071.50"></text></g><g><title>&lt;graph_store::table::_::&lt;impl serde::de::Deserialize for graph_store::table::SingleValueTable&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (107 samples, 0.90%)</title><rect x="5.7030%" y="1045" width="0.8961%" height="15" fill="rgb(222,119,46)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1055.50"></text></g><g><title>serde::de::SeqAccess::next_element (107 samples, 0.90%)</title><rect x="5.7030%" y="1029" width="0.8961%" height="15" fill="rgb(222,165,49)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1039.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (107 samples, 0.90%)</title><rect x="5.7030%" y="1013" width="0.8961%" height="15" fill="rgb(219,113,52)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1023.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (107 samples, 0.90%)</title><rect x="5.7030%" y="997" width="0.8961%" height="15" fill="rgb(214,7,15)" fg:x="681" fg:w="107"/><text x="5.9530%" y="1007.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (107 samples, 0.90%)</title><rect x="5.7030%" y="981" width="0.8961%" height="15" fill="rgb(235,32,4)" fg:x="681" fg:w="107"/><text x="5.9530%" y="991.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_map (107 samples, 0.90%)</title><rect x="5.7030%" y="965" width="0.8961%" height="15" fill="rgb(238,90,54)" fg:x="681" fg:w="107"/><text x="5.9530%" y="975.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize::MapVisitor&lt;K,V,S&gt; as serde::de::Visitor&gt;::visit_map (107 samples, 0.90%)</title><rect x="5.7030%" y="949" width="0.8961%" height="15" fill="rgb(213,208,19)" fg:x="681" fg:w="107"/><text x="5.9530%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (93 samples, 0.78%)</title><rect x="5.8203%" y="933" width="0.7788%" height="15" fill="rgb(233,156,4)" fg:x="695" fg:w="93"/><text x="6.0703%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (93 samples, 0.78%)</title><rect x="5.8203%" y="917" width="0.7788%" height="15" fill="rgb(207,194,5)" fg:x="695" fg:w="93"/><text x="6.0703%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (62 samples, 0.52%)</title><rect x="6.0799%" y="901" width="0.5192%" height="15" fill="rgb(206,111,30)" fg:x="726" fg:w="62"/><text x="6.3299%" y="911.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (3 samples, 0.03%)</title><rect x="6.6075%" y="885" width="0.0251%" height="15" fill="rgb(243,70,54)" fg:x="789" fg:w="3"/><text x="6.8575%" y="895.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (3 samples, 0.03%)</title><rect x="6.6075%" y="869" width="0.0251%" height="15" fill="rgb(242,28,8)" fg:x="789" fg:w="3"/><text x="6.8575%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.03%)</title><rect x="6.6075%" y="853" width="0.0251%" height="15" fill="rgb(219,106,18)" fg:x="789" fg:w="3"/><text x="6.8575%" y="863.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.03%)</title><rect x="6.6075%" y="837" width="0.0251%" height="15" fill="rgb(244,222,10)" fg:x="789" fg:w="3"/><text x="6.8575%" y="847.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.02%)</title><rect x="6.6159%" y="821" width="0.0167%" height="15" fill="rgb(236,179,52)" fg:x="790" fg:w="2"/><text x="6.8659%" y="831.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.02%)</title><rect x="6.6159%" y="805" width="0.0167%" height="15" fill="rgb(213,23,39)" fg:x="790" fg:w="2"/><text x="6.8659%" y="815.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (11 samples, 0.09%)</title><rect x="6.5991%" y="997" width="0.0921%" height="15" fill="rgb(238,48,10)" fg:x="788" fg:w="11"/><text x="6.8491%" y="1007.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (11 samples, 0.09%)</title><rect x="6.5991%" y="981" width="0.0921%" height="15" fill="rgb(251,196,23)" fg:x="788" fg:w="11"/><text x="6.8491%" y="991.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (11 samples, 0.09%)</title><rect x="6.5991%" y="965" width="0.0921%" height="15" fill="rgb(250,152,24)" fg:x="788" fg:w="11"/><text x="6.8491%" y="975.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (11 samples, 0.09%)</title><rect x="6.5991%" y="949" width="0.0921%" height="15" fill="rgb(209,150,17)" fg:x="788" fg:w="11"/><text x="6.8491%" y="959.50"></text></g><g><title>serde::de::SeqAccess::next_element (10 samples, 0.08%)</title><rect x="6.6075%" y="933" width="0.0837%" height="15" fill="rgb(234,202,34)" fg:x="789" fg:w="10"/><text x="6.8575%" y="943.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (10 samples, 0.08%)</title><rect x="6.6075%" y="917" width="0.0837%" height="15" fill="rgb(253,148,53)" fg:x="789" fg:w="10"/><text x="6.8575%" y="927.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (10 samples, 0.08%)</title><rect x="6.6075%" y="901" width="0.0837%" height="15" fill="rgb(218,129,16)" fg:x="789" fg:w="10"/><text x="6.8575%" y="911.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for usize&gt;::deserialize (7 samples, 0.06%)</title><rect x="6.6326%" y="885" width="0.0586%" height="15" fill="rgb(216,85,19)" fg:x="792" fg:w="7"/><text x="6.8826%" y="895.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u64 (7 samples, 0.06%)</title><rect x="6.6326%" y="869" width="0.0586%" height="15" fill="rgb(235,228,7)" fg:x="792" fg:w="7"/><text x="6.8826%" y="879.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (7 samples, 0.06%)</title><rect x="6.6326%" y="853" width="0.0586%" height="15" fill="rgb(245,175,0)" fg:x="792" fg:w="7"/><text x="6.8826%" y="863.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u64 (7 samples, 0.06%)</title><rect x="6.6326%" y="837" width="0.0586%" height="15" fill="rgb(208,168,36)" fg:x="792" fg:w="7"/><text x="6.8826%" y="847.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u64 (7 samples, 0.06%)</title><rect x="6.6326%" y="821" width="0.0586%" height="15" fill="rgb(246,171,24)" fg:x="792" fg:w="7"/><text x="6.8826%" y="831.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (6 samples, 0.05%)</title><rect x="6.6410%" y="805" width="0.0502%" height="15" fill="rgb(215,142,24)" fg:x="793" fg:w="6"/><text x="6.8910%" y="815.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (6 samples, 0.05%)</title><rect x="6.6410%" y="789" width="0.0502%" height="15" fill="rgb(250,187,7)" fg:x="793" fg:w="6"/><text x="6.8910%" y="799.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (6 samples, 0.05%)</title><rect x="6.6410%" y="773" width="0.0502%" height="15" fill="rgb(228,66,33)" fg:x="793" fg:w="6"/><text x="6.8910%" y="783.50"></text></g><g><title>std::io::default_read_exact (4 samples, 0.03%)</title><rect x="6.6577%" y="757" width="0.0335%" height="15" fill="rgb(234,215,21)" fg:x="795" fg:w="4"/><text x="6.9077%" y="767.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.03%)</title><rect x="6.6577%" y="741" width="0.0335%" height="15" fill="rgb(222,191,20)" fg:x="795" fg:w="4"/><text x="6.9077%" y="751.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (4 samples, 0.03%)</title><rect x="6.6577%" y="725" width="0.0335%" height="15" fill="rgb(245,79,54)" fg:x="795" fg:w="4"/><text x="6.9077%" y="735.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (4 samples, 0.03%)</title><rect x="6.6577%" y="709" width="0.0335%" height="15" fill="rgb(240,10,37)" fg:x="795" fg:w="4"/><text x="6.9077%" y="719.50"></text></g><g><title>std::sys::unix::fs::File::read (4 samples, 0.03%)</title><rect x="6.6577%" y="693" width="0.0335%" height="15" fill="rgb(214,192,32)" fg:x="795" fg:w="4"/><text x="6.9077%" y="703.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (4 samples, 0.03%)</title><rect x="6.6577%" y="677" width="0.0335%" height="15" fill="rgb(209,36,54)" fg:x="795" fg:w="4"/><text x="6.9077%" y="687.50"></text></g><g><title>__libc_read (4 samples, 0.03%)</title><rect x="6.6577%" y="661" width="0.0335%" height="15" fill="rgb(220,10,11)" fg:x="795" fg:w="4"/><text x="6.9077%" y="671.50"></text></g><g><title>__libc_read (4 samples, 0.03%)</title><rect x="6.6577%" y="645" width="0.0335%" height="15" fill="rgb(221,106,17)" fg:x="795" fg:w="4"/><text x="6.9077%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="6.6577%" y="629" width="0.0335%" height="15" fill="rgb(251,142,44)" fg:x="795" fg:w="4"/><text x="6.9077%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="6.6577%" y="613" width="0.0335%" height="15" fill="rgb(238,13,15)" fg:x="795" fg:w="4"/><text x="6.9077%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="6.6577%" y="597" width="0.0335%" height="15" fill="rgb(208,107,27)" fg:x="795" fg:w="4"/><text x="6.9077%" y="607.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="6.6577%" y="581" width="0.0335%" height="15" fill="rgb(205,136,37)" fg:x="795" fg:w="4"/><text x="6.9077%" y="591.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="6.6577%" y="565" width="0.0335%" height="15" fill="rgb(250,205,27)" fg:x="795" fg:w="4"/><text x="6.9077%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="6.6577%" y="549" width="0.0335%" height="15" fill="rgb(210,80,43)" fg:x="795" fg:w="4"/><text x="6.9077%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="6.6577%" y="533" width="0.0335%" height="15" fill="rgb(247,160,36)" fg:x="795" fg:w="4"/><text x="6.9077%" y="543.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="6.6577%" y="517" width="0.0335%" height="15" fill="rgb(234,13,49)" fg:x="795" fg:w="4"/><text x="6.9077%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="6.6577%" y="501" width="0.0335%" height="15" fill="rgb(234,122,0)" fg:x="795" fg:w="4"/><text x="6.9077%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.6661%" y="485" width="0.0251%" height="15" fill="rgb(207,146,38)" fg:x="796" fg:w="3"/><text x="6.9161%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.6661%" y="469" width="0.0251%" height="15" fill="rgb(207,177,25)" fg:x="796" fg:w="3"/><text x="6.9161%" y="479.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_map::Access&lt;R,O&gt; as serde::de::MapAccess&gt;::next_key_seed (8 samples, 0.07%)</title><rect x="6.6912%" y="917" width="0.0670%" height="15" fill="rgb(211,178,42)" fg:x="799" fg:w="8"/><text x="6.9412%" y="927.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.07%)</title><rect x="6.6912%" y="901" width="0.0670%" height="15" fill="rgb(230,69,54)" fg:x="799" fg:w="8"/><text x="6.9412%" y="911.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for usize&gt;::deserialize (8 samples, 0.07%)</title><rect x="6.6912%" y="885" width="0.0670%" height="15" fill="rgb(214,135,41)" fg:x="799" fg:w="8"/><text x="6.9412%" y="895.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u64 (8 samples, 0.07%)</title><rect x="6.6912%" y="869" width="0.0670%" height="15" fill="rgb(237,67,25)" fg:x="799" fg:w="8"/><text x="6.9412%" y="879.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (8 samples, 0.07%)</title><rect x="6.6912%" y="853" width="0.0670%" height="15" fill="rgb(222,189,50)" fg:x="799" fg:w="8"/><text x="6.9412%" y="863.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u64 (8 samples, 0.07%)</title><rect x="6.6912%" y="837" width="0.0670%" height="15" fill="rgb(245,148,34)" fg:x="799" fg:w="8"/><text x="6.9412%" y="847.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u64 (8 samples, 0.07%)</title><rect x="6.6912%" y="821" width="0.0670%" height="15" fill="rgb(222,29,6)" fg:x="799" fg:w="8"/><text x="6.9412%" y="831.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (8 samples, 0.07%)</title><rect x="6.6912%" y="805" width="0.0670%" height="15" fill="rgb(221,189,43)" fg:x="799" fg:w="8"/><text x="6.9412%" y="815.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (8 samples, 0.07%)</title><rect x="6.6912%" y="789" width="0.0670%" height="15" fill="rgb(207,36,27)" fg:x="799" fg:w="8"/><text x="6.9412%" y="799.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (8 samples, 0.07%)</title><rect x="6.6912%" y="773" width="0.0670%" height="15" fill="rgb(217,90,24)" fg:x="799" fg:w="8"/><text x="6.9412%" y="783.50"></text></g><g><title>std::io::default_read_exact (7 samples, 0.06%)</title><rect x="6.6996%" y="757" width="0.0586%" height="15" fill="rgb(224,66,35)" fg:x="800" fg:w="7"/><text x="6.9496%" y="767.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (7 samples, 0.06%)</title><rect x="6.6996%" y="741" width="0.0586%" height="15" fill="rgb(221,13,50)" fg:x="800" fg:w="7"/><text x="6.9496%" y="751.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (7 samples, 0.06%)</title><rect x="6.6996%" y="725" width="0.0586%" height="15" fill="rgb(236,68,49)" fg:x="800" fg:w="7"/><text x="6.9496%" y="735.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (7 samples, 0.06%)</title><rect x="6.6996%" y="709" width="0.0586%" height="15" fill="rgb(229,146,28)" fg:x="800" fg:w="7"/><text x="6.9496%" y="719.50"></text></g><g><title>std::sys::unix::fs::File::read (7 samples, 0.06%)</title><rect x="6.6996%" y="693" width="0.0586%" height="15" fill="rgb(225,31,38)" fg:x="800" fg:w="7"/><text x="6.9496%" y="703.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (7 samples, 0.06%)</title><rect x="6.6996%" y="677" width="0.0586%" height="15" fill="rgb(250,208,3)" fg:x="800" fg:w="7"/><text x="6.9496%" y="687.50"></text></g><g><title>__libc_read (7 samples, 0.06%)</title><rect x="6.6996%" y="661" width="0.0586%" height="15" fill="rgb(246,54,23)" fg:x="800" fg:w="7"/><text x="6.9496%" y="671.50"></text></g><g><title>__libc_read (7 samples, 0.06%)</title><rect x="6.6996%" y="645" width="0.0586%" height="15" fill="rgb(243,76,11)" fg:x="800" fg:w="7"/><text x="6.9496%" y="655.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="6.6996%" y="629" width="0.0586%" height="15" fill="rgb(245,21,50)" fg:x="800" fg:w="7"/><text x="6.9496%" y="639.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="6.6996%" y="613" width="0.0586%" height="15" fill="rgb(228,9,43)" fg:x="800" fg:w="7"/><text x="6.9496%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="6.6996%" y="597" width="0.0586%" height="15" fill="rgb(208,100,47)" fg:x="800" fg:w="7"/><text x="6.9496%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="6.7164%" y="581" width="0.0419%" height="15" fill="rgb(232,26,8)" fg:x="802" fg:w="5"/><text x="6.9664%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="6.7164%" y="565" width="0.0419%" height="15" fill="rgb(216,166,38)" fg:x="802" fg:w="5"/><text x="6.9664%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="6.7164%" y="549" width="0.0419%" height="15" fill="rgb(251,202,51)" fg:x="802" fg:w="5"/><text x="6.9664%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="6.7164%" y="533" width="0.0419%" height="15" fill="rgb(254,216,34)" fg:x="802" fg:w="5"/><text x="6.9664%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="6.7164%" y="517" width="0.0419%" height="15" fill="rgb(251,32,27)" fg:x="802" fg:w="5"/><text x="6.9664%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="6.7164%" y="501" width="0.0419%" height="15" fill="rgb(208,127,28)" fg:x="802" fg:w="5"/><text x="6.9664%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="6.7164%" y="485" width="0.0419%" height="15" fill="rgb(224,137,22)" fg:x="802" fg:w="5"/><text x="6.9664%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="6.7164%" y="469" width="0.0419%" height="15" fill="rgb(254,70,32)" fg:x="802" fg:w="5"/><text x="6.9664%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7331%" y="453" width="0.0251%" height="15" fill="rgb(229,75,37)" fg:x="804" fg:w="3"/><text x="6.9831%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7331%" y="437" width="0.0251%" height="15" fill="rgb(252,64,23)" fg:x="804" fg:w="3"/><text x="6.9831%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7331%" y="421" width="0.0251%" height="15" fill="rgb(232,162,48)" fg:x="804" fg:w="3"/><text x="6.9831%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7331%" y="405" width="0.0251%" height="15" fill="rgb(246,160,12)" fg:x="804" fg:w="3"/><text x="6.9831%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7331%" y="389" width="0.0251%" height="15" fill="rgb(247,166,0)" fg:x="804" fg:w="3"/><text x="6.9831%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7331%" y="373" width="0.0251%" height="15" fill="rgb(249,219,21)" fg:x="804" fg:w="3"/><text x="6.9831%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7331%" y="357" width="0.0251%" height="15" fill="rgb(205,209,3)" fg:x="804" fg:w="3"/><text x="6.9831%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7331%" y="341" width="0.0251%" height="15" fill="rgb(243,44,1)" fg:x="804" fg:w="3"/><text x="6.9831%" y="351.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (7 samples, 0.06%)</title><rect x="6.7582%" y="805" width="0.0586%" height="15" fill="rgb(206,159,16)" fg:x="807" fg:w="7"/><text x="7.0082%" y="815.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (7 samples, 0.06%)</title><rect x="6.7582%" y="789" width="0.0586%" height="15" fill="rgb(244,77,30)" fg:x="807" fg:w="7"/><text x="7.0082%" y="799.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (7 samples, 0.06%)</title><rect x="6.7582%" y="773" width="0.0586%" height="15" fill="rgb(218,69,12)" fg:x="807" fg:w="7"/><text x="7.0082%" y="783.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (7 samples, 0.06%)</title><rect x="6.7582%" y="757" width="0.0586%" height="15" fill="rgb(212,87,7)" fg:x="807" fg:w="7"/><text x="7.0082%" y="767.50"></text></g><g><title>std::io::default_read_exact (4 samples, 0.03%)</title><rect x="6.7834%" y="741" width="0.0335%" height="15" fill="rgb(245,114,25)" fg:x="810" fg:w="4"/><text x="7.0334%" y="751.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.03%)</title><rect x="6.7834%" y="725" width="0.0335%" height="15" fill="rgb(210,61,42)" fg:x="810" fg:w="4"/><text x="7.0334%" y="735.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (4 samples, 0.03%)</title><rect x="6.7834%" y="709" width="0.0335%" height="15" fill="rgb(211,52,33)" fg:x="810" fg:w="4"/><text x="7.0334%" y="719.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (4 samples, 0.03%)</title><rect x="6.7834%" y="693" width="0.0335%" height="15" fill="rgb(234,58,33)" fg:x="810" fg:w="4"/><text x="7.0334%" y="703.50"></text></g><g><title>std::sys::unix::fs::File::read (4 samples, 0.03%)</title><rect x="6.7834%" y="677" width="0.0335%" height="15" fill="rgb(220,115,36)" fg:x="810" fg:w="4"/><text x="7.0334%" y="687.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (4 samples, 0.03%)</title><rect x="6.7834%" y="661" width="0.0335%" height="15" fill="rgb(243,153,54)" fg:x="810" fg:w="4"/><text x="7.0334%" y="671.50"></text></g><g><title>__libc_read (4 samples, 0.03%)</title><rect x="6.7834%" y="645" width="0.0335%" height="15" fill="rgb(251,47,18)" fg:x="810" fg:w="4"/><text x="7.0334%" y="655.50"></text></g><g><title>__libc_read (4 samples, 0.03%)</title><rect x="6.7834%" y="629" width="0.0335%" height="15" fill="rgb(242,102,42)" fg:x="810" fg:w="4"/><text x="7.0334%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="6.7834%" y="613" width="0.0335%" height="15" fill="rgb(234,31,38)" fg:x="810" fg:w="4"/><text x="7.0334%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="6.7834%" y="597" width="0.0335%" height="15" fill="rgb(221,117,51)" fg:x="810" fg:w="4"/><text x="7.0334%" y="607.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="6.7834%" y="581" width="0.0335%" height="15" fill="rgb(212,20,18)" fg:x="810" fg:w="4"/><text x="7.0334%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="565" width="0.0251%" height="15" fill="rgb(245,133,36)" fg:x="811" fg:w="3"/><text x="7.0417%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="549" width="0.0251%" height="15" fill="rgb(212,6,19)" fg:x="811" fg:w="3"/><text x="7.0417%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="533" width="0.0251%" height="15" fill="rgb(218,1,36)" fg:x="811" fg:w="3"/><text x="7.0417%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="517" width="0.0251%" height="15" fill="rgb(246,84,54)" fg:x="811" fg:w="3"/><text x="7.0417%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="501" width="0.0251%" height="15" fill="rgb(242,110,6)" fg:x="811" fg:w="3"/><text x="7.0417%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="485" width="0.0251%" height="15" fill="rgb(214,47,5)" fg:x="811" fg:w="3"/><text x="7.0417%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="469" width="0.0251%" height="15" fill="rgb(218,159,25)" fg:x="811" fg:w="3"/><text x="7.0417%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="453" width="0.0251%" height="15" fill="rgb(215,211,28)" fg:x="811" fg:w="3"/><text x="7.0417%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="437" width="0.0251%" height="15" fill="rgb(238,59,32)" fg:x="811" fg:w="3"/><text x="7.0417%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="421" width="0.0251%" height="15" fill="rgb(226,82,3)" fg:x="811" fg:w="3"/><text x="7.0417%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="405" width="0.0251%" height="15" fill="rgb(240,164,32)" fg:x="811" fg:w="3"/><text x="7.0417%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="389" width="0.0251%" height="15" fill="rgb(232,46,7)" fg:x="811" fg:w="3"/><text x="7.0417%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="373" width="0.0251%" height="15" fill="rgb(229,129,53)" fg:x="811" fg:w="3"/><text x="7.0417%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="357" width="0.0251%" height="15" fill="rgb(234,188,29)" fg:x="811" fg:w="3"/><text x="7.0417%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="6.7917%" y="341" width="0.0251%" height="15" fill="rgb(246,141,4)" fg:x="811" fg:w="3"/><text x="7.0417%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.8001%" y="325" width="0.0167%" height="15" fill="rgb(229,23,39)" fg:x="812" fg:w="2"/><text x="7.0501%" y="335.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.07%)</title><rect x="6.7582%" y="901" width="0.0670%" height="15" fill="rgb(206,12,3)" fg:x="807" fg:w="8"/><text x="7.0082%" y="911.50"></text></g><g><title>petgraph::graph_impl::serialization::&lt;impl serde::de::Deserialize for petgraph::graph_impl::NodeIndex&lt;Ix&gt;&gt;::deserialize (8 samples, 0.07%)</title><rect x="6.7582%" y="885" width="0.0670%" height="15" fill="rgb(252,226,20)" fg:x="807" fg:w="8"/><text x="7.0082%" y="895.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (8 samples, 0.07%)</title><rect x="6.7582%" y="869" width="0.0670%" height="15" fill="rgb(216,123,35)" fg:x="807" fg:w="8"/><text x="7.0082%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (8 samples, 0.07%)</title><rect x="6.7582%" y="853" width="0.0670%" height="15" fill="rgb(212,68,40)" fg:x="807" fg:w="8"/><text x="7.0082%" y="863.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (8 samples, 0.07%)</title><rect x="6.7582%" y="837" width="0.0670%" height="15" fill="rgb(254,125,32)" fg:x="807" fg:w="8"/><text x="7.0082%" y="847.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (8 samples, 0.07%)</title><rect x="6.7582%" y="821" width="0.0670%" height="15" fill="rgb(253,97,22)" fg:x="807" fg:w="8"/><text x="7.0082%" y="831.50"></text></g><g><title>serde::de::MapAccess::next_entry (17 samples, 0.14%)</title><rect x="6.6912%" y="949" width="0.1424%" height="15" fill="rgb(241,101,14)" fg:x="799" fg:w="17"/><text x="6.9412%" y="959.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (17 samples, 0.14%)</title><rect x="6.6912%" y="933" width="0.1424%" height="15" fill="rgb(238,103,29)" fg:x="799" fg:w="17"/><text x="6.9412%" y="943.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_map::Access&lt;R,O&gt; as serde::de::MapAccess&gt;::next_value_seed (9 samples, 0.08%)</title><rect x="6.7582%" y="917" width="0.0754%" height="15" fill="rgb(233,195,47)" fg:x="807" fg:w="9"/><text x="7.0082%" y="927.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.03%)</title><rect x="6.8587%" y="837" width="0.0251%" height="15" fill="rgb(246,218,30)" fg:x="819" fg:w="3"/><text x="7.1087%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.8671%" y="821" width="0.0167%" height="15" fill="rgb(219,145,47)" fg:x="820" fg:w="2"/><text x="7.1171%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.8671%" y="805" width="0.0167%" height="15" fill="rgb(243,12,26)" fg:x="820" fg:w="2"/><text x="7.1171%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.8671%" y="789" width="0.0167%" height="15" fill="rgb(214,87,16)" fg:x="820" fg:w="2"/><text x="7.1171%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.8671%" y="773" width="0.0167%" height="15" fill="rgb(208,99,42)" fg:x="820" fg:w="2"/><text x="7.1171%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.8671%" y="757" width="0.0167%" height="15" fill="rgb(253,99,2)" fg:x="820" fg:w="2"/><text x="7.1171%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.8671%" y="741" width="0.0167%" height="15" fill="rgb(220,168,23)" fg:x="820" fg:w="2"/><text x="7.1171%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.8671%" y="725" width="0.0167%" height="15" fill="rgb(242,38,24)" fg:x="820" fg:w="2"/><text x="7.1171%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="6.8671%" y="709" width="0.0167%" height="15" fill="rgb(225,182,9)" fg:x="820" fg:w="2"/><text x="7.1171%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.03%)</title><rect x="6.8587%" y="853" width="0.0335%" height="15" fill="rgb(243,178,37)" fg:x="819" fg:w="4"/><text x="7.1087%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="6.8922%" y="853" width="0.0167%" height="15" fill="rgb(232,139,19)" fg:x="823" fg:w="2"/><text x="7.1422%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (9 samples, 0.08%)</title><rect x="6.8420%" y="901" width="0.0754%" height="15" fill="rgb(225,201,24)" fg:x="817" fg:w="9"/><text x="7.0920%" y="911.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (9 samples, 0.08%)</title><rect x="6.8420%" y="885" width="0.0754%" height="15" fill="rgb(221,47,46)" fg:x="817" fg:w="9"/><text x="7.0920%" y="895.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (9 samples, 0.08%)</title><rect x="6.8420%" y="869" width="0.0754%" height="15" fill="rgb(249,23,13)" fg:x="817" fg:w="9"/><text x="7.0920%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="6.9508%" y="821" width="0.0167%" height="15" fill="rgb(219,9,5)" fg:x="830" fg:w="2"/><text x="7.2008%" y="831.50"></text></g><g><title>hashbrown::map::make_insert_hash (16 samples, 0.13%)</title><rect x="6.8420%" y="917" width="0.1340%" height="15" fill="rgb(254,171,16)" fg:x="817" fg:w="16"/><text x="7.0920%" y="927.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (7 samples, 0.06%)</title><rect x="6.9173%" y="901" width="0.0586%" height="15" fill="rgb(230,171,20)" fg:x="826" fg:w="7"/><text x="7.1673%" y="911.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.06%)</title><rect x="6.9173%" y="885" width="0.0586%" height="15" fill="rgb(210,71,41)" fg:x="826" fg:w="7"/><text x="7.1673%" y="895.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="6.9257%" y="869" width="0.0502%" height="15" fill="rgb(206,173,20)" fg:x="827" fg:w="6"/><text x="7.1757%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="6.9257%" y="853" width="0.0502%" height="15" fill="rgb(233,88,34)" fg:x="827" fg:w="6"/><text x="7.1757%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="6.9257%" y="837" width="0.0502%" height="15" fill="rgb(223,209,46)" fg:x="827" fg:w="6"/><text x="7.1757%" y="847.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.02%)</title><rect x="7.0346%" y="837" width="0.0167%" height="15" fill="rgb(250,43,18)" fg:x="840" fg:w="2"/><text x="7.2846%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="7.0346%" y="853" width="0.0251%" height="15" fill="rgb(208,13,10)" fg:x="840" fg:w="3"/><text x="7.2846%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="7.0262%" y="885" width="0.0419%" height="15" fill="rgb(212,200,36)" fg:x="839" fg:w="5"/><text x="7.2762%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="7.0262%" y="869" width="0.0419%" height="15" fill="rgb(225,90,30)" fg:x="839" fg:w="5"/><text x="7.2762%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (19 samples, 0.16%)</title><rect x="6.9760%" y="917" width="0.1591%" height="15" fill="rgb(236,182,39)" fg:x="833" fg:w="19"/><text x="7.2260%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (19 samples, 0.16%)</title><rect x="6.9760%" y="901" width="0.1591%" height="15" fill="rgb(212,144,35)" fg:x="833" fg:w="19"/><text x="7.2260%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (8 samples, 0.07%)</title><rect x="7.0681%" y="885" width="0.0670%" height="15" fill="rgb(228,63,44)" fg:x="844" fg:w="8"/><text x="7.3181%" y="895.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (8 samples, 0.07%)</title><rect x="7.0681%" y="869" width="0.0670%" height="15" fill="rgb(228,109,6)" fg:x="844" fg:w="8"/><text x="7.3181%" y="879.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (8 samples, 0.07%)</title><rect x="7.0681%" y="853" width="0.0670%" height="15" fill="rgb(238,117,24)" fg:x="844" fg:w="8"/><text x="7.3181%" y="863.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (8 samples, 0.07%)</title><rect x="7.0681%" y="837" width="0.0670%" height="15" fill="rgb(242,26,26)" fg:x="844" fg:w="8"/><text x="7.3181%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (8 samples, 0.07%)</title><rect x="7.0681%" y="821" width="0.0670%" height="15" fill="rgb(221,92,48)" fg:x="844" fg:w="8"/><text x="7.3181%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.07%)</title><rect x="7.0681%" y="805" width="0.0670%" height="15" fill="rgb(209,209,32)" fg:x="844" fg:w="8"/><text x="7.3181%" y="815.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (3 samples, 0.03%)</title><rect x="7.1351%" y="901" width="0.0251%" height="15" fill="rgb(221,70,22)" fg:x="852" fg:w="3"/><text x="7.3851%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3 samples, 0.03%)</title><rect x="7.1351%" y="885" width="0.0251%" height="15" fill="rgb(248,145,5)" fg:x="852" fg:w="3"/><text x="7.3851%" y="895.50"></text></g><g><title>core::ptr::write (3 samples, 0.03%)</title><rect x="7.1351%" y="869" width="0.0251%" height="15" fill="rgb(226,116,26)" fg:x="852" fg:w="3"/><text x="7.3851%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="7.1686%" y="853" width="0.0167%" height="15" fill="rgb(244,5,17)" fg:x="856" fg:w="2"/><text x="7.4186%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="7.1686%" y="837" width="0.0167%" height="15" fill="rgb(252,159,33)" fg:x="856" fg:w="2"/><text x="7.4186%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (2 samples, 0.02%)</title><rect x="7.1853%" y="853" width="0.0167%" height="15" fill="rgb(206,71,0)" fg:x="858" fg:w="2"/><text x="7.4353%" y="863.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="7.1853%" y="837" width="0.0167%" height="15" fill="rgb(233,118,54)" fg:x="858" fg:w="2"/><text x="7.4353%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (2 samples, 0.02%)</title><rect x="7.1853%" y="821" width="0.0167%" height="15" fill="rgb(234,83,48)" fg:x="858" fg:w="2"/><text x="7.4353%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (2 samples, 0.02%)</title><rect x="7.1853%" y="805" width="0.0167%" height="15" fill="rgb(228,3,54)" fg:x="858" fg:w="2"/><text x="7.4353%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="7.1853%" y="789" width="0.0167%" height="15" fill="rgb(226,155,13)" fg:x="858" fg:w="2"/><text x="7.4353%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="7.1853%" y="773" width="0.0167%" height="15" fill="rgb(241,28,37)" fg:x="858" fg:w="2"/><text x="7.4353%" y="783.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="7.1853%" y="757" width="0.0167%" height="15" fill="rgb(233,93,10)" fg:x="858" fg:w="2"/><text x="7.4353%" y="767.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="7.1853%" y="741" width="0.0167%" height="15" fill="rgb(225,113,19)" fg:x="858" fg:w="2"/><text x="7.4353%" y="751.50"></text></g><g><title>__GI_munmap (2 samples, 0.02%)</title><rect x="7.1853%" y="725" width="0.0167%" height="15" fill="rgb(241,2,18)" fg:x="858" fg:w="2"/><text x="7.4353%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.1853%" y="709" width="0.0167%" height="15" fill="rgb(228,207,21)" fg:x="858" fg:w="2"/><text x="7.4353%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.1853%" y="693" width="0.0167%" height="15" fill="rgb(213,211,35)" fg:x="858" fg:w="2"/><text x="7.4353%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.1853%" y="677" width="0.0167%" height="15" fill="rgb(209,83,10)" fg:x="858" fg:w="2"/><text x="7.4353%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.1853%" y="661" width="0.0167%" height="15" fill="rgb(209,164,1)" fg:x="858" fg:w="2"/><text x="7.4353%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.1853%" y="645" width="0.0167%" height="15" fill="rgb(213,184,43)" fg:x="858" fg:w="2"/><text x="7.4353%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.1853%" y="629" width="0.0167%" height="15" fill="rgb(231,61,34)" fg:x="858" fg:w="2"/><text x="7.4353%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.1853%" y="613" width="0.0167%" height="15" fill="rgb(235,75,3)" fg:x="858" fg:w="2"/><text x="7.4353%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.1853%" y="597" width="0.0167%" height="15" fill="rgb(220,106,47)" fg:x="858" fg:w="2"/><text x="7.4353%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.1853%" y="581" width="0.0167%" height="15" fill="rgb(210,196,33)" fg:x="858" fg:w="2"/><text x="7.4353%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.1853%" y="565" width="0.0167%" height="15" fill="rgb(229,154,42)" fg:x="858" fg:w="2"/><text x="7.4353%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.1853%" y="549" width="0.0167%" height="15" fill="rgb(228,114,26)" fg:x="858" fg:w="2"/><text x="7.4353%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.05%)</title><rect x="7.2105%" y="757" width="0.0502%" height="15" fill="rgb(208,144,1)" fg:x="861" fg:w="6"/><text x="7.4605%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.07%)</title><rect x="7.2021%" y="821" width="0.0670%" height="15" fill="rgb(239,112,37)" fg:x="860" fg:w="8"/><text x="7.4521%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.07%)</title><rect x="7.2021%" y="805" width="0.0670%" height="15" fill="rgb(210,96,50)" fg:x="860" fg:w="8"/><text x="7.4521%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.07%)</title><rect x="7.2021%" y="789" width="0.0670%" height="15" fill="rgb(222,178,2)" fg:x="860" fg:w="8"/><text x="7.4521%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.07%)</title><rect x="7.2021%" y="773" width="0.0670%" height="15" fill="rgb(226,74,18)" fg:x="860" fg:w="8"/><text x="7.4521%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.03%)</title><rect x="7.3026%" y="741" width="0.0251%" height="15" fill="rgb(225,67,54)" fg:x="872" fg:w="3"/><text x="7.5526%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="7.3109%" y="725" width="0.0167%" height="15" fill="rgb(251,92,32)" fg:x="873" fg:w="2"/><text x="7.5609%" y="735.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (20 samples, 0.17%)</title><rect x="7.2021%" y="853" width="0.1675%" height="15" fill="rgb(228,149,22)" fg:x="860" fg:w="20"/><text x="7.4521%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.17%)</title><rect x="7.2021%" y="837" width="0.1675%" height="15" fill="rgb(243,54,13)" fg:x="860" fg:w="20"/><text x="7.4521%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (12 samples, 0.10%)</title><rect x="7.2691%" y="821" width="0.1005%" height="15" fill="rgb(243,180,28)" fg:x="868" fg:w="12"/><text x="7.5191%" y="831.50"></text></g><g><title>core::hash::Hasher::write_usize (12 samples, 0.10%)</title><rect x="7.2691%" y="805" width="0.1005%" height="15" fill="rgb(208,167,24)" fg:x="868" fg:w="12"/><text x="7.5191%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.08%)</title><rect x="7.2858%" y="789" width="0.0837%" height="15" fill="rgb(245,73,45)" fg:x="870" fg:w="10"/><text x="7.5358%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.08%)</title><rect x="7.2858%" y="773" width="0.0837%" height="15" fill="rgb(237,203,48)" fg:x="870" fg:w="10"/><text x="7.5358%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.08%)</title><rect x="7.2858%" y="757" width="0.0837%" height="15" fill="rgb(211,197,16)" fg:x="870" fg:w="10"/><text x="7.5358%" y="767.50"></text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.04%)</title><rect x="7.3277%" y="741" width="0.0419%" height="15" fill="rgb(243,99,51)" fg:x="875" fg:w="5"/><text x="7.5777%" y="751.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (32 samples, 0.27%)</title><rect x="7.3779%" y="853" width="0.2680%" height="15" fill="rgb(215,123,29)" fg:x="881" fg:w="32"/><text x="7.6279%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (32 samples, 0.27%)</title><rect x="7.3779%" y="837" width="0.2680%" height="15" fill="rgb(239,186,37)" fg:x="881" fg:w="32"/><text x="7.6279%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.27%)</title><rect x="7.3779%" y="821" width="0.2680%" height="15" fill="rgb(252,136,39)" fg:x="881" fg:w="32"/><text x="7.6279%" y="831.50"></text></g><g><title>[unknown] (24 samples, 0.20%)</title><rect x="7.4449%" y="805" width="0.2010%" height="15" fill="rgb(223,213,32)" fg:x="889" fg:w="24"/><text x="7.6949%" y="815.50"></text></g><g><title>[unknown] (21 samples, 0.18%)</title><rect x="7.4701%" y="789" width="0.1759%" height="15" fill="rgb(233,115,5)" fg:x="892" fg:w="21"/><text x="7.7201%" y="799.50"></text></g><g><title>[unknown] (21 samples, 0.18%)</title><rect x="7.4701%" y="773" width="0.1759%" height="15" fill="rgb(207,226,44)" fg:x="892" fg:w="21"/><text x="7.7201%" y="783.50"></text></g><g><title>[unknown] (21 samples, 0.18%)</title><rect x="7.4701%" y="757" width="0.1759%" height="15" fill="rgb(208,126,0)" fg:x="892" fg:w="21"/><text x="7.7201%" y="767.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="7.5203%" y="741" width="0.1256%" height="15" fill="rgb(244,66,21)" fg:x="898" fg:w="15"/><text x="7.7703%" y="751.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="7.5203%" y="725" width="0.1256%" height="15" fill="rgb(222,97,12)" fg:x="898" fg:w="15"/><text x="7.7703%" y="735.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="7.5203%" y="709" width="0.1256%" height="15" fill="rgb(219,213,19)" fg:x="898" fg:w="15"/><text x="7.7703%" y="719.50"></text></g><g><title>[unknown] (14 samples, 0.12%)</title><rect x="7.5287%" y="693" width="0.1172%" height="15" fill="rgb(252,169,30)" fg:x="899" fg:w="14"/><text x="7.7787%" y="703.50"></text></g><g><title>[unknown] (14 samples, 0.12%)</title><rect x="7.5287%" y="677" width="0.1172%" height="15" fill="rgb(206,32,51)" fg:x="899" fg:w="14"/><text x="7.7787%" y="687.50"></text></g><g><title>[unknown] (11 samples, 0.09%)</title><rect x="7.5538%" y="661" width="0.0921%" height="15" fill="rgb(250,172,42)" fg:x="902" fg:w="11"/><text x="7.8038%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="7.5957%" y="645" width="0.0502%" height="15" fill="rgb(209,34,43)" fg:x="907" fg:w="6"/><text x="7.8457%" y="655.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="7.5957%" y="629" width="0.0502%" height="15" fill="rgb(223,11,35)" fg:x="907" fg:w="6"/><text x="7.8457%" y="639.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="7.5957%" y="613" width="0.0502%" height="15" fill="rgb(251,219,26)" fg:x="907" fg:w="6"/><text x="7.8457%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (6 samples, 0.05%)</title><rect x="7.6459%" y="837" width="0.0502%" height="15" fill="rgb(231,119,3)" fg:x="913" fg:w="6"/><text x="7.8959%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (9 samples, 0.08%)</title><rect x="7.6459%" y="853" width="0.0754%" height="15" fill="rgb(216,97,11)" fg:x="913" fg:w="9"/><text x="7.8959%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (3 samples, 0.03%)</title><rect x="7.6962%" y="837" width="0.0251%" height="15" fill="rgb(223,59,9)" fg:x="919" fg:w="3"/><text x="7.9462%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (3 samples, 0.03%)</title><rect x="7.6962%" y="821" width="0.0251%" height="15" fill="rgb(233,93,31)" fg:x="919" fg:w="3"/><text x="7.9462%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.02%)</title><rect x="7.7213%" y="821" width="0.0167%" height="15" fill="rgb(239,81,33)" fg:x="922" fg:w="2"/><text x="7.9713%" y="831.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.02%)</title><rect x="7.7213%" y="805" width="0.0167%" height="15" fill="rgb(213,120,34)" fg:x="922" fg:w="2"/><text x="7.9713%" y="815.50"></text></g><g><title>__memset_avx2_erms (2 samples, 0.02%)</title><rect x="7.7213%" y="789" width="0.0167%" height="15" fill="rgb(243,49,53)" fg:x="922" fg:w="2"/><text x="7.9713%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.7213%" y="773" width="0.0167%" height="15" fill="rgb(247,216,33)" fg:x="922" fg:w="2"/><text x="7.9713%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.7213%" y="757" width="0.0167%" height="15" fill="rgb(226,26,14)" fg:x="922" fg:w="2"/><text x="7.9713%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="7.7213%" y="741" width="0.0167%" height="15" fill="rgb(215,49,53)" fg:x="922" fg:w="2"/><text x="7.9713%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (69 samples, 0.58%)</title><rect x="7.1686%" y="901" width="0.5778%" height="15" fill="rgb(245,162,40)" fg:x="856" fg:w="69"/><text x="7.4186%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (69 samples, 0.58%)</title><rect x="7.1686%" y="885" width="0.5778%" height="15" fill="rgb(229,68,17)" fg:x="856" fg:w="69"/><text x="7.4186%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (69 samples, 0.58%)</title><rect x="7.1686%" y="869" width="0.5778%" height="15" fill="rgb(213,182,10)" fg:x="856" fg:w="69"/><text x="7.4186%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (3 samples, 0.03%)</title><rect x="7.7213%" y="853" width="0.0251%" height="15" fill="rgb(245,125,30)" fg:x="922" fg:w="3"/><text x="7.9713%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (3 samples, 0.03%)</title><rect x="7.7213%" y="837" width="0.0251%" height="15" fill="rgb(232,202,2)" fg:x="922" fg:w="3"/><text x="7.9713%" y="847.50"></text></g><g><title>graph_store::graph_db_impl::_::&lt;impl serde::de::Deserialize for graph_store::graph_db_impl::IndexData&lt;G,I&gt;&gt;::deserialize (139 samples, 1.16%)</title><rect x="6.5991%" y="1109" width="1.1641%" height="15" fill="rgb(237,140,51)" fg:x="788" fg:w="139"/><text x="6.8491%" y="1119.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (139 samples, 1.16%)</title><rect x="6.5991%" y="1093" width="1.1641%" height="15" fill="rgb(236,157,25)" fg:x="788" fg:w="139"/><text x="6.8491%" y="1103.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (139 samples, 1.16%)</title><rect x="6.5991%" y="1077" width="1.1641%" height="15" fill="rgb(219,209,0)" fg:x="788" fg:w="139"/><text x="6.8491%" y="1087.50"></text></g><g><title>&lt;graph_store::graph_db_impl::_::&lt;impl serde::de::Deserialize for graph_store::graph_db_impl::IndexData&lt;G,I&gt;&gt;::deserialize::__Visitor&lt;G,I&gt; as serde::de::Visitor&gt;::visit_seq (139 samples, 1.16%)</title><rect x="6.5991%" y="1061" width="1.1641%" height="15" fill="rgb(240,116,54)" fg:x="788" fg:w="139"/><text x="6.8491%" y="1071.50"></text></g><g><title>serde::de::SeqAccess::next_element (139 samples, 1.16%)</title><rect x="6.5991%" y="1045" width="1.1641%" height="15" fill="rgb(216,10,36)" fg:x="788" fg:w="139"/><text x="6.8491%" y="1055.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (139 samples, 1.16%)</title><rect x="6.5991%" y="1029" width="1.1641%" height="15" fill="rgb(222,72,44)" fg:x="788" fg:w="139"/><text x="6.8491%" y="1039.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (139 samples, 1.16%)</title><rect x="6.5991%" y="1013" width="1.1641%" height="15" fill="rgb(232,159,9)" fg:x="788" fg:w="139"/><text x="6.8491%" y="1023.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (128 samples, 1.07%)</title><rect x="6.6912%" y="997" width="1.0719%" height="15" fill="rgb(210,39,32)" fg:x="799" fg:w="128"/><text x="6.9412%" y="1007.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_map (128 samples, 1.07%)</title><rect x="6.6912%" y="981" width="1.0719%" height="15" fill="rgb(216,194,45)" fg:x="799" fg:w="128"/><text x="6.9412%" y="991.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize::MapVisitor&lt;K,V,S&gt; as serde::de::Visitor&gt;::visit_map (128 samples, 1.07%)</title><rect x="6.6912%" y="965" width="1.0719%" height="15" fill="rgb(218,18,35)" fg:x="799" fg:w="128"/><text x="6.9412%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (111 samples, 0.93%)</title><rect x="6.8336%" y="949" width="0.9296%" height="15" fill="rgb(207,83,51)" fg:x="816" fg:w="111"/><text x="7.0836%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (111 samples, 0.93%)</title><rect x="6.8336%" y="933" width="0.9296%" height="15" fill="rgb(225,63,43)" fg:x="816" fg:w="111"/><text x="7.0836%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (75 samples, 0.63%)</title><rect x="7.1351%" y="917" width="0.6281%" height="15" fill="rgb(207,57,36)" fg:x="852" fg:w="75"/><text x="7.3851%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (2 samples, 0.02%)</title><rect x="7.7464%" y="901" width="0.0167%" height="15" fill="rgb(216,99,33)" fg:x="925" fg:w="2"/><text x="7.9964%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="7.8302%" y="1061" width="0.0167%" height="15" fill="rgb(225,42,16)" fg:x="935" fg:w="2"/><text x="8.0802%" y="1071.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="7.8302%" y="1045" width="0.0167%" height="15" fill="rgb(220,201,45)" fg:x="935" fg:w="2"/><text x="8.0802%" y="1055.50"></text></g><g><title>petgraph::graph_impl::serialization::&lt;impl petgraph::serde_utils::FromDeserialized for petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;&gt;::from_deserialized (12 samples, 0.10%)</title><rect x="7.7632%" y="1093" width="0.1005%" height="15" fill="rgb(225,33,4)" fg:x="927" fg:w="12"/><text x="8.0132%" y="1103.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::link_edges (12 samples, 0.10%)</title><rect x="7.7632%" y="1077" width="0.1005%" height="15" fill="rgb(224,33,50)" fg:x="927" fg:w="12"/><text x="8.0132%" y="1087.50"></text></g><g><title>petgraph::graph_impl::index_twice (2 samples, 0.02%)</title><rect x="7.8469%" y="1061" width="0.0167%" height="15" fill="rgb(246,198,51)" fg:x="937" fg:w="2"/><text x="8.0969%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.03%)</title><rect x="8.0228%" y="885" width="0.0251%" height="15" fill="rgb(205,22,4)" fg:x="958" fg:w="3"/><text x="8.2728%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.03%)</title><rect x="8.0228%" y="869" width="0.0251%" height="15" fill="rgb(206,3,8)" fg:x="958" fg:w="3"/><text x="8.2728%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="8.0228%" y="853" width="0.0251%" height="15" fill="rgb(251,23,15)" fg:x="958" fg:w="3"/><text x="8.2728%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.03%)</title><rect x="8.0228%" y="837" width="0.0251%" height="15" fill="rgb(252,88,28)" fg:x="958" fg:w="3"/><text x="8.2728%" y="847.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="8.0228%" y="821" width="0.0251%" height="15" fill="rgb(212,127,14)" fg:x="958" fg:w="3"/><text x="8.2728%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.03%)</title><rect x="8.0228%" y="805" width="0.0251%" height="15" fill="rgb(247,145,37)" fg:x="958" fg:w="3"/><text x="8.2728%" y="815.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.03%)</title><rect x="8.0228%" y="789" width="0.0251%" height="15" fill="rgb(209,117,53)" fg:x="958" fg:w="3"/><text x="8.2728%" y="799.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.03%)</title><rect x="8.0228%" y="773" width="0.0251%" height="15" fill="rgb(212,90,42)" fg:x="958" fg:w="3"/><text x="8.2728%" y="783.50"></text></g><g><title>__rdl_realloc (3 samples, 0.03%)</title><rect x="8.0228%" y="757" width="0.0251%" height="15" fill="rgb(218,164,37)" fg:x="958" fg:w="3"/><text x="8.2728%" y="767.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.03%)</title><rect x="8.0228%" y="741" width="0.0251%" height="15" fill="rgb(246,65,34)" fg:x="958" fg:w="3"/><text x="8.2728%" y="751.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.03%)</title><rect x="8.0228%" y="725" width="0.0251%" height="15" fill="rgb(231,100,33)" fg:x="958" fg:w="3"/><text x="8.2728%" y="735.50"></text></g><g><title>_int_realloc (3 samples, 0.03%)</title><rect x="8.0228%" y="709" width="0.0251%" height="15" fill="rgb(228,126,14)" fg:x="958" fg:w="3"/><text x="8.2728%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="8.0228%" y="693" width="0.0251%" height="15" fill="rgb(215,173,21)" fg:x="958" fg:w="3"/><text x="8.2728%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="8.0228%" y="677" width="0.0251%" height="15" fill="rgb(210,6,40)" fg:x="958" fg:w="3"/><text x="8.2728%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.0312%" y="661" width="0.0167%" height="15" fill="rgb(212,48,18)" fg:x="959" fg:w="2"/><text x="8.2812%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.0312%" y="645" width="0.0167%" height="15" fill="rgb(230,214,11)" fg:x="959" fg:w="2"/><text x="8.2812%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.0312%" y="629" width="0.0167%" height="15" fill="rgb(254,105,39)" fg:x="959" fg:w="2"/><text x="8.2812%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.0312%" y="613" width="0.0167%" height="15" fill="rgb(245,158,5)" fg:x="959" fg:w="2"/><text x="8.2812%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.0312%" y="597" width="0.0167%" height="15" fill="rgb(249,208,11)" fg:x="959" fg:w="2"/><text x="8.2812%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.0312%" y="581" width="0.0167%" height="15" fill="rgb(210,39,28)" fg:x="959" fg:w="2"/><text x="8.2812%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.0312%" y="565" width="0.0167%" height="15" fill="rgb(211,56,53)" fg:x="959" fg:w="2"/><text x="8.2812%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.0312%" y="549" width="0.0167%" height="15" fill="rgb(226,201,30)" fg:x="959" fg:w="2"/><text x="8.2812%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (33 samples, 0.28%)</title><rect x="8.0228%" y="901" width="0.2764%" height="15" fill="rgb(239,101,34)" fg:x="958" fg:w="33"/><text x="8.2728%" y="911.50"></text></g><g><title>core::ptr::write (30 samples, 0.25%)</title><rect x="8.0479%" y="885" width="0.2512%" height="15" fill="rgb(226,209,5)" fg:x="961" fg:w="30"/><text x="8.2979%" y="895.50"></text></g><g><title>[unknown] (29 samples, 0.24%)</title><rect x="8.0563%" y="869" width="0.2429%" height="15" fill="rgb(250,105,47)" fg:x="962" fg:w="29"/><text x="8.3063%" y="879.50"></text></g><g><title>[unknown] (22 samples, 0.18%)</title><rect x="8.1149%" y="853" width="0.1842%" height="15" fill="rgb(230,72,3)" fg:x="969" fg:w="22"/><text x="8.3649%" y="863.50"></text></g><g><title>[unknown] (21 samples, 0.18%)</title><rect x="8.1233%" y="837" width="0.1759%" height="15" fill="rgb(232,218,39)" fg:x="970" fg:w="21"/><text x="8.3733%" y="847.50"></text></g><g><title>[unknown] (21 samples, 0.18%)</title><rect x="8.1233%" y="821" width="0.1759%" height="15" fill="rgb(248,166,6)" fg:x="970" fg:w="21"/><text x="8.3733%" y="831.50"></text></g><g><title>[unknown] (19 samples, 0.16%)</title><rect x="8.1400%" y="805" width="0.1591%" height="15" fill="rgb(247,89,20)" fg:x="972" fg:w="19"/><text x="8.3900%" y="815.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="8.1651%" y="789" width="0.1340%" height="15" fill="rgb(248,130,54)" fg:x="975" fg:w="16"/><text x="8.4151%" y="799.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="8.1651%" y="773" width="0.1340%" height="15" fill="rgb(234,196,4)" fg:x="975" fg:w="16"/><text x="8.4151%" y="783.50"></text></g><g><title>[unknown] (14 samples, 0.12%)</title><rect x="8.1819%" y="757" width="0.1172%" height="15" fill="rgb(250,143,31)" fg:x="977" fg:w="14"/><text x="8.4319%" y="767.50"></text></g><g><title>[unknown] (13 samples, 0.11%)</title><rect x="8.1903%" y="741" width="0.1089%" height="15" fill="rgb(211,110,34)" fg:x="978" fg:w="13"/><text x="8.4403%" y="751.50"></text></g><g><title>[unknown] (13 samples, 0.11%)</title><rect x="8.1903%" y="725" width="0.1089%" height="15" fill="rgb(215,124,48)" fg:x="978" fg:w="13"/><text x="8.4403%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.2573%" y="709" width="0.0419%" height="15" fill="rgb(216,46,13)" fg:x="986" fg:w="5"/><text x="8.5073%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.2573%" y="693" width="0.0419%" height="15" fill="rgb(205,184,25)" fg:x="986" fg:w="5"/><text x="8.5073%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.2573%" y="677" width="0.0419%" height="15" fill="rgb(228,1,10)" fg:x="986" fg:w="5"/><text x="8.5073%" y="687.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (12 samples, 0.10%)</title><rect x="8.3661%" y="629" width="0.1005%" height="15" fill="rgb(213,116,27)" fg:x="999" fg:w="12"/><text x="8.6161%" y="639.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (12 samples, 0.10%)</title><rect x="8.3661%" y="613" width="0.1005%" height="15" fill="rgb(241,95,50)" fg:x="999" fg:w="12"/><text x="8.6161%" y="623.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (10 samples, 0.08%)</title><rect x="8.3829%" y="597" width="0.0837%" height="15" fill="rgb(238,48,32)" fg:x="1001" fg:w="10"/><text x="8.6329%" y="607.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (10 samples, 0.08%)</title><rect x="8.3829%" y="581" width="0.0837%" height="15" fill="rgb(235,113,49)" fg:x="1001" fg:w="10"/><text x="8.6329%" y="591.50"></text></g><g><title>std::io::default_read_exact (7 samples, 0.06%)</title><rect x="8.4080%" y="565" width="0.0586%" height="15" fill="rgb(205,127,43)" fg:x="1004" fg:w="7"/><text x="8.6580%" y="575.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (7 samples, 0.06%)</title><rect x="8.4080%" y="549" width="0.0586%" height="15" fill="rgb(250,162,2)" fg:x="1004" fg:w="7"/><text x="8.6580%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (7 samples, 0.06%)</title><rect x="8.4080%" y="533" width="0.0586%" height="15" fill="rgb(220,13,41)" fg:x="1004" fg:w="7"/><text x="8.6580%" y="543.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (7 samples, 0.06%)</title><rect x="8.4080%" y="517" width="0.0586%" height="15" fill="rgb(249,221,25)" fg:x="1004" fg:w="7"/><text x="8.6580%" y="527.50"></text></g><g><title>std::sys::unix::fs::File::read (7 samples, 0.06%)</title><rect x="8.4080%" y="501" width="0.0586%" height="15" fill="rgb(215,208,19)" fg:x="1004" fg:w="7"/><text x="8.6580%" y="511.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (7 samples, 0.06%)</title><rect x="8.4080%" y="485" width="0.0586%" height="15" fill="rgb(236,175,2)" fg:x="1004" fg:w="7"/><text x="8.6580%" y="495.50"></text></g><g><title>__libc_read (7 samples, 0.06%)</title><rect x="8.4080%" y="469" width="0.0586%" height="15" fill="rgb(241,52,2)" fg:x="1004" fg:w="7"/><text x="8.6580%" y="479.50"></text></g><g><title>__libc_read (7 samples, 0.06%)</title><rect x="8.4080%" y="453" width="0.0586%" height="15" fill="rgb(248,140,14)" fg:x="1004" fg:w="7"/><text x="8.6580%" y="463.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="8.4080%" y="437" width="0.0586%" height="15" fill="rgb(253,22,42)" fg:x="1004" fg:w="7"/><text x="8.6580%" y="447.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="8.4080%" y="421" width="0.0586%" height="15" fill="rgb(234,61,47)" fg:x="1004" fg:w="7"/><text x="8.6580%" y="431.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="8.4080%" y="405" width="0.0586%" height="15" fill="rgb(208,226,15)" fg:x="1004" fg:w="7"/><text x="8.6580%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.4248%" y="389" width="0.0419%" height="15" fill="rgb(217,221,4)" fg:x="1006" fg:w="5"/><text x="8.6748%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.4248%" y="373" width="0.0419%" height="15" fill="rgb(212,174,34)" fg:x="1006" fg:w="5"/><text x="8.6748%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.4248%" y="357" width="0.0419%" height="15" fill="rgb(253,83,4)" fg:x="1006" fg:w="5"/><text x="8.6748%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.4248%" y="341" width="0.0419%" height="15" fill="rgb(250,195,49)" fg:x="1006" fg:w="5"/><text x="8.6748%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.4248%" y="325" width="0.0419%" height="15" fill="rgb(241,192,25)" fg:x="1006" fg:w="5"/><text x="8.6748%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.4248%" y="309" width="0.0419%" height="15" fill="rgb(208,124,10)" fg:x="1006" fg:w="5"/><text x="8.6748%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.4248%" y="293" width="0.0419%" height="15" fill="rgb(222,33,0)" fg:x="1006" fg:w="5"/><text x="8.6748%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.4248%" y="277" width="0.0419%" height="15" fill="rgb(234,209,28)" fg:x="1006" fg:w="5"/><text x="8.6748%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.4499%" y="261" width="0.0167%" height="15" fill="rgb(224,11,23)" fg:x="1009" fg:w="2"/><text x="8.6999%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.4499%" y="245" width="0.0167%" height="15" fill="rgb(232,99,1)" fg:x="1009" fg:w="2"/><text x="8.6999%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.4499%" y="229" width="0.0167%" height="15" fill="rgb(237,95,45)" fg:x="1009" fg:w="2"/><text x="8.6999%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.4499%" y="213" width="0.0167%" height="15" fill="rgb(208,109,11)" fg:x="1009" fg:w="2"/><text x="8.6999%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.4499%" y="197" width="0.0167%" height="15" fill="rgb(216,190,48)" fg:x="1009" fg:w="2"/><text x="8.6999%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.4499%" y="181" width="0.0167%" height="15" fill="rgb(251,171,36)" fg:x="1009" fg:w="2"/><text x="8.6999%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.4499%" y="165" width="0.0167%" height="15" fill="rgb(230,62,22)" fg:x="1009" fg:w="2"/><text x="8.6999%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.4499%" y="149" width="0.0167%" height="15" fill="rgb(225,114,35)" fg:x="1009" fg:w="2"/><text x="8.6999%" y="159.50"></text></g><g><title>petgraph::graph_impl::serialization::&lt;impl serde::de::Deserialize for petgraph::graph_impl::NodeIndex&lt;Ix&gt;&gt;::deserialize (14 samples, 0.12%)</title><rect x="8.3578%" y="709" width="0.1172%" height="15" fill="rgb(215,118,42)" fg:x="998" fg:w="14"/><text x="8.6078%" y="719.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (13 samples, 0.11%)</title><rect x="8.3661%" y="693" width="0.1089%" height="15" fill="rgb(243,119,21)" fg:x="999" fg:w="13"/><text x="8.6161%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (13 samples, 0.11%)</title><rect x="8.3661%" y="677" width="0.1089%" height="15" fill="rgb(252,177,53)" fg:x="999" fg:w="13"/><text x="8.6161%" y="687.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (13 samples, 0.11%)</title><rect x="8.3661%" y="661" width="0.1089%" height="15" fill="rgb(237,209,29)" fg:x="999" fg:w="13"/><text x="8.6161%" y="671.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (13 samples, 0.11%)</title><rect x="8.3661%" y="645" width="0.1089%" height="15" fill="rgb(212,65,23)" fg:x="999" fg:w="13"/><text x="8.6161%" y="655.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for u8&gt;::deserialize::PrimitiveVisitor as serde::de::Visitor&gt;::visit_u8 (2 samples, 0.02%)</title><rect x="8.4750%" y="677" width="0.0167%" height="15" fill="rgb(230,222,46)" fg:x="1012" fg:w="2"/><text x="8.7250%" y="687.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (21 samples, 0.18%)</title><rect x="8.3326%" y="725" width="0.1759%" height="15" fill="rgb(215,135,32)" fg:x="995" fg:w="21"/><text x="8.5826%" y="735.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u8&gt;::deserialize (4 samples, 0.03%)</title><rect x="8.4750%" y="709" width="0.0335%" height="15" fill="rgb(246,101,22)" fg:x="1012" fg:w="4"/><text x="8.7250%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u8 (4 samples, 0.03%)</title><rect x="8.4750%" y="693" width="0.0335%" height="15" fill="rgb(206,107,13)" fg:x="1012" fg:w="4"/><text x="8.7250%" y="703.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (2 samples, 0.02%)</title><rect x="8.4918%" y="677" width="0.0167%" height="15" fill="rgb(250,100,44)" fg:x="1014" fg:w="2"/><text x="8.7418%" y="687.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (2 samples, 0.02%)</title><rect x="8.4918%" y="661" width="0.0167%" height="15" fill="rgb(231,147,38)" fg:x="1014" fg:w="2"/><text x="8.7418%" y="671.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (2 samples, 0.02%)</title><rect x="8.4918%" y="645" width="0.0167%" height="15" fill="rgb(229,8,40)" fg:x="1014" fg:w="2"/><text x="8.7418%" y="655.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (2 samples, 0.02%)</title><rect x="8.4918%" y="629" width="0.0167%" height="15" fill="rgb(221,135,30)" fg:x="1014" fg:w="2"/><text x="8.7418%" y="639.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (2 samples, 0.02%)</title><rect x="8.4918%" y="613" width="0.0167%" height="15" fill="rgb(249,193,18)" fg:x="1014" fg:w="2"/><text x="8.7418%" y="623.50"></text></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (24 samples, 0.20%)</title><rect x="8.3159%" y="821" width="0.2010%" height="15" fill="rgb(209,133,39)" fg:x="993" fg:w="24"/><text x="8.5659%" y="831.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1,T2)&gt;::deserialize (24 samples, 0.20%)</title><rect x="8.3159%" y="805" width="0.2010%" height="15" fill="rgb(232,100,14)" fg:x="993" fg:w="24"/><text x="8.5659%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (24 samples, 0.20%)</title><rect x="8.3159%" y="789" width="0.2010%" height="15" fill="rgb(224,185,1)" fg:x="993" fg:w="24"/><text x="8.5659%" y="799.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1,T2)&gt;::deserialize::TupleVisitor&lt;T0,T1,T2&gt; as serde::de::Visitor&gt;::visit_seq (24 samples, 0.20%)</title><rect x="8.3159%" y="773" width="0.2010%" height="15" fill="rgb(223,139,8)" fg:x="993" fg:w="24"/><text x="8.5659%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (23 samples, 0.19%)</title><rect x="8.3243%" y="757" width="0.1926%" height="15" fill="rgb(232,213,38)" fg:x="994" fg:w="23"/><text x="8.5743%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (23 samples, 0.19%)</title><rect x="8.3243%" y="741" width="0.1926%" height="15" fill="rgb(207,94,22)" fg:x="994" fg:w="23"/><text x="8.5743%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.02%)</title><rect x="8.5252%" y="709" width="0.0167%" height="15" fill="rgb(219,183,54)" fg:x="1018" fg:w="2"/><text x="8.7752%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="8.5252%" y="693" width="0.0167%" height="15" fill="rgb(216,185,54)" fg:x="1018" fg:w="2"/><text x="8.7752%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (31 samples, 0.26%)</title><rect x="8.3075%" y="869" width="0.2596%" height="15" fill="rgb(254,217,39)" fg:x="992" fg:w="31"/><text x="8.5575%" y="879.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (31 samples, 0.26%)</title><rect x="8.3075%" y="853" width="0.2596%" height="15" fill="rgb(240,178,23)" fg:x="992" fg:w="31"/><text x="8.5575%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (31 samples, 0.26%)</title><rect x="8.3075%" y="837" width="0.2596%" height="15" fill="rgb(218,11,47)" fg:x="992" fg:w="31"/><text x="8.5575%" y="847.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u8&gt;::deserialize (5 samples, 0.04%)</title><rect x="8.5252%" y="821" width="0.0419%" height="15" fill="rgb(218,51,51)" fg:x="1018" fg:w="5"/><text x="8.7752%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u8 (5 samples, 0.04%)</title><rect x="8.5252%" y="805" width="0.0419%" height="15" fill="rgb(238,126,27)" fg:x="1018" fg:w="5"/><text x="8.7752%" y="815.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (5 samples, 0.04%)</title><rect x="8.5252%" y="789" width="0.0419%" height="15" fill="rgb(249,202,22)" fg:x="1018" fg:w="5"/><text x="8.7752%" y="799.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (5 samples, 0.04%)</title><rect x="8.5252%" y="773" width="0.0419%" height="15" fill="rgb(254,195,49)" fg:x="1018" fg:w="5"/><text x="8.7752%" y="783.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (5 samples, 0.04%)</title><rect x="8.5252%" y="757" width="0.0419%" height="15" fill="rgb(208,123,14)" fg:x="1018" fg:w="5"/><text x="8.7752%" y="767.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (5 samples, 0.04%)</title><rect x="8.5252%" y="741" width="0.0419%" height="15" fill="rgb(224,200,8)" fg:x="1018" fg:w="5"/><text x="8.7752%" y="751.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (5 samples, 0.04%)</title><rect x="8.5252%" y="725" width="0.0419%" height="15" fill="rgb(217,61,36)" fg:x="1018" fg:w="5"/><text x="8.7752%" y="735.50"></text></g><g><title>std::io::default_read_exact (3 samples, 0.03%)</title><rect x="8.5420%" y="709" width="0.0251%" height="15" fill="rgb(206,35,45)" fg:x="1020" fg:w="3"/><text x="8.7920%" y="719.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.03%)</title><rect x="8.5420%" y="693" width="0.0251%" height="15" fill="rgb(217,65,33)" fg:x="1020" fg:w="3"/><text x="8.7920%" y="703.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3 samples, 0.03%)</title><rect x="8.5420%" y="677" width="0.0251%" height="15" fill="rgb(222,158,48)" fg:x="1020" fg:w="3"/><text x="8.7920%" y="687.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.03%)</title><rect x="8.5420%" y="661" width="0.0251%" height="15" fill="rgb(254,2,54)" fg:x="1020" fg:w="3"/><text x="8.7920%" y="671.50"></text></g><g><title>std::sys::unix::fs::File::read (3 samples, 0.03%)</title><rect x="8.5420%" y="645" width="0.0251%" height="15" fill="rgb(250,143,38)" fg:x="1020" fg:w="3"/><text x="8.7920%" y="655.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (3 samples, 0.03%)</title><rect x="8.5420%" y="629" width="0.0251%" height="15" fill="rgb(248,25,0)" fg:x="1020" fg:w="3"/><text x="8.7920%" y="639.50"></text></g><g><title>__libc_read (3 samples, 0.03%)</title><rect x="8.5420%" y="613" width="0.0251%" height="15" fill="rgb(206,152,27)" fg:x="1020" fg:w="3"/><text x="8.7920%" y="623.50"></text></g><g><title>__libc_read (3 samples, 0.03%)</title><rect x="8.5420%" y="597" width="0.0251%" height="15" fill="rgb(240,77,30)" fg:x="1020" fg:w="3"/><text x="8.7920%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="8.5420%" y="581" width="0.0251%" height="15" fill="rgb(231,5,3)" fg:x="1020" fg:w="3"/><text x="8.7920%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="8.5420%" y="565" width="0.0251%" height="15" fill="rgb(207,226,32)" fg:x="1020" fg:w="3"/><text x="8.7920%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="8.5420%" y="549" width="0.0251%" height="15" fill="rgb(222,207,47)" fg:x="1020" fg:w="3"/><text x="8.7920%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.5504%" y="533" width="0.0167%" height="15" fill="rgb(229,115,45)" fg:x="1021" fg:w="2"/><text x="8.8004%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.5504%" y="517" width="0.0167%" height="15" fill="rgb(224,191,6)" fg:x="1021" fg:w="2"/><text x="8.8004%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.5504%" y="501" width="0.0167%" height="15" fill="rgb(230,227,24)" fg:x="1021" fg:w="2"/><text x="8.8004%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.5504%" y="485" width="0.0167%" height="15" fill="rgb(228,80,19)" fg:x="1021" fg:w="2"/><text x="8.8004%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.5504%" y="469" width="0.0167%" height="15" fill="rgb(247,229,0)" fg:x="1021" fg:w="2"/><text x="8.8004%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.5504%" y="453" width="0.0167%" height="15" fill="rgb(237,194,15)" fg:x="1021" fg:w="2"/><text x="8.8004%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.5504%" y="437" width="0.0167%" height="15" fill="rgb(219,203,20)" fg:x="1021" fg:w="2"/><text x="8.8004%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.5504%" y="421" width="0.0167%" height="15" fill="rgb(234,128,8)" fg:x="1021" fg:w="2"/><text x="8.8004%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="8.5504%" y="405" width="0.0167%" height="15" fill="rgb(248,202,8)" fg:x="1021" fg:w="2"/><text x="8.8004%" y="415.50"></text></g><g><title>petgraph::graph_impl::serialization::deser_graph_edges (87 samples, 0.73%)</title><rect x="7.8637%" y="965" width="0.7286%" height="15" fill="rgb(206,104,37)" fg:x="939" fg:w="87"/><text x="8.1137%" y="975.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (87 samples, 0.73%)</title><rect x="7.8637%" y="949" width="0.7286%" height="15" fill="rgb(223,8,27)" fg:x="939" fg:w="87"/><text x="8.1137%" y="959.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (87 samples, 0.73%)</title><rect x="7.8637%" y="933" width="0.7286%" height="15" fill="rgb(216,217,28)" fg:x="939" fg:w="87"/><text x="8.1137%" y="943.50"></text></g><g><title>&lt;petgraph::serde_utils::MappedSequenceVisitor&lt;T,R,F&gt; as serde::de::Visitor&gt;::visit_seq (87 samples, 0.73%)</title><rect x="7.8637%" y="917" width="0.7286%" height="15" fill="rgb(249,199,1)" fg:x="939" fg:w="87"/><text x="8.1137%" y="927.50"></text></g><g><title>serde::de::SeqAccess::next_element (35 samples, 0.29%)</title><rect x="8.2991%" y="901" width="0.2931%" height="15" fill="rgb(240,85,17)" fg:x="991" fg:w="35"/><text x="8.5491%" y="911.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (35 samples, 0.29%)</title><rect x="8.2991%" y="885" width="0.2931%" height="15" fill="rgb(206,108,45)" fg:x="991" fg:w="35"/><text x="8.5491%" y="895.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.03%)</title><rect x="8.5671%" y="869" width="0.0251%" height="15" fill="rgb(245,210,41)" fg:x="1023" fg:w="3"/><text x="8.8171%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (18 samples, 0.15%)</title><rect x="8.6509%" y="901" width="0.1507%" height="15" fill="rgb(206,13,37)" fg:x="1033" fg:w="18"/><text x="8.9009%" y="911.50"></text></g><g><title>core::ptr::write (17 samples, 0.14%)</title><rect x="8.6592%" y="885" width="0.1424%" height="15" fill="rgb(250,61,18)" fg:x="1034" fg:w="17"/><text x="8.9092%" y="895.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="8.6760%" y="869" width="0.1256%" height="15" fill="rgb(235,172,48)" fg:x="1036" fg:w="15"/><text x="8.9260%" y="879.50"></text></g><g><title>[unknown] (13 samples, 0.11%)</title><rect x="8.6927%" y="853" width="0.1089%" height="15" fill="rgb(249,201,17)" fg:x="1038" fg:w="13"/><text x="8.9427%" y="863.50"></text></g><g><title>[unknown] (13 samples, 0.11%)</title><rect x="8.6927%" y="837" width="0.1089%" height="15" fill="rgb(219,208,6)" fg:x="1038" fg:w="13"/><text x="8.9427%" y="847.50"></text></g><g><title>[unknown] (12 samples, 0.10%)</title><rect x="8.7011%" y="821" width="0.1005%" height="15" fill="rgb(248,31,23)" fg:x="1039" fg:w="12"/><text x="8.9511%" y="831.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="8.7262%" y="805" width="0.0754%" height="15" fill="rgb(245,15,42)" fg:x="1042" fg:w="9"/><text x="8.9762%" y="815.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="8.7262%" y="789" width="0.0754%" height="15" fill="rgb(222,217,39)" fg:x="1042" fg:w="9"/><text x="8.9762%" y="799.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="8.7262%" y="773" width="0.0754%" height="15" fill="rgb(210,219,27)" fg:x="1042" fg:w="9"/><text x="8.9762%" y="783.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="8.7262%" y="757" width="0.0754%" height="15" fill="rgb(252,166,36)" fg:x="1042" fg:w="9"/><text x="8.9762%" y="767.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="8.7346%" y="741" width="0.0670%" height="15" fill="rgb(245,132,34)" fg:x="1043" fg:w="8"/><text x="8.9846%" y="751.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="8.7346%" y="725" width="0.0670%" height="15" fill="rgb(236,54,3)" fg:x="1043" fg:w="8"/><text x="8.9846%" y="735.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="8.7514%" y="709" width="0.0502%" height="15" fill="rgb(241,173,43)" fg:x="1045" fg:w="6"/><text x="9.0014%" y="719.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="8.7514%" y="693" width="0.0502%" height="15" fill="rgb(215,190,9)" fg:x="1045" fg:w="6"/><text x="9.0014%" y="703.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="8.7514%" y="677" width="0.0502%" height="15" fill="rgb(242,101,16)" fg:x="1045" fg:w="6"/><text x="9.0014%" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (912 samples, 7.64%)</title><rect x="1.2980%" y="1397" width="7.6376%" height="15" fill="rgb(223,190,21)" fg:x="155" fg:w="912"/><text x="1.5480%" y="1407.50">&lt;alloc::bo..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (912 samples, 7.64%)</title><rect x="1.2980%" y="1381" width="7.6376%" height="15" fill="rgb(215,228,25)" fg:x="155" fg:w="912"/><text x="1.5480%" y="1391.50">&lt;alloc::bo..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (912 samples, 7.64%)</title><rect x="1.2980%" y="1365" width="7.6376%" height="15" fill="rgb(225,36,22)" fg:x="155" fg:w="912"/><text x="1.5480%" y="1375.50">core::ops:..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (912 samples, 7.64%)</title><rect x="1.2980%" y="1349" width="7.6376%" height="15" fill="rgb(251,106,46)" fg:x="155" fg:w="912"/><text x="1.5480%" y="1359.50">std::threa..</text></g><g><title>std::panic::catch_unwind (912 samples, 7.64%)</title><rect x="1.2980%" y="1333" width="7.6376%" height="15" fill="rgb(208,90,1)" fg:x="155" fg:w="912"/><text x="1.5480%" y="1343.50">std::panic..</text></g><g><title>std::panicking::try (912 samples, 7.64%)</title><rect x="1.2980%" y="1317" width="7.6376%" height="15" fill="rgb(243,10,4)" fg:x="155" fg:w="912"/><text x="1.5480%" y="1327.50">std::panic..</text></g><g><title>std::panicking::try::do_call (912 samples, 7.64%)</title><rect x="1.2980%" y="1301" width="7.6376%" height="15" fill="rgb(212,137,27)" fg:x="155" fg:w="912"/><text x="1.5480%" y="1311.50">std::panic..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (912 samples, 7.64%)</title><rect x="1.2980%" y="1285" width="7.6376%" height="15" fill="rgb(231,220,49)" fg:x="155" fg:w="912"/><text x="1.5480%" y="1295.50">&lt;std::pani..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (912 samples, 7.64%)</title><rect x="1.2980%" y="1269" width="7.6376%" height="15" fill="rgb(237,96,20)" fg:x="155" fg:w="912"/><text x="1.5480%" y="1279.50">std::threa..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (912 samples, 7.64%)</title><rect x="1.2980%" y="1253" width="7.6376%" height="15" fill="rgb(239,229,30)" fg:x="155" fg:w="912"/><text x="1.5480%" y="1263.50">std::sys_c..</text></g><g><title>graph_store::config::GraphDBConfig::open::{{closure}} (912 samples, 7.64%)</title><rect x="1.2980%" y="1237" width="7.6376%" height="15" fill="rgb(219,65,33)" fg:x="155" fg:w="912"/><text x="1.5480%" y="1247.50">graph_stor..</text></g><g><title>graph_store::io::import (279 samples, 2.34%)</title><rect x="6.5991%" y="1221" width="2.3365%" height="15" fill="rgb(243,134,7)" fg:x="788" fg:w="279"/><text x="6.8491%" y="1231.50">g..</text></g><g><title>bincode::deserialize_from (279 samples, 2.34%)</title><rect x="6.5991%" y="1205" width="2.3365%" height="15" fill="rgb(216,177,54)" fg:x="788" fg:w="279"/><text x="6.8491%" y="1215.50">b..</text></g><g><title>bincode::config::Options::deserialize_from (279 samples, 2.34%)</title><rect x="6.5991%" y="1189" width="2.3365%" height="15" fill="rgb(211,160,20)" fg:x="788" fg:w="279"/><text x="6.8491%" y="1199.50">b..</text></g><g><title>bincode::internal::deserialize_from (279 samples, 2.34%)</title><rect x="6.5991%" y="1173" width="2.3365%" height="15" fill="rgb(239,85,39)" fg:x="788" fg:w="279"/><text x="6.8491%" y="1183.50">b..</text></g><g><title>bincode::internal::deserialize_from_seed (279 samples, 2.34%)</title><rect x="6.5991%" y="1157" width="2.3365%" height="15" fill="rgb(232,125,22)" fg:x="788" fg:w="279"/><text x="6.8491%" y="1167.50">b..</text></g><g><title>bincode::internal::deserialize_from_custom_seed (279 samples, 2.34%)</title><rect x="6.5991%" y="1141" width="2.3365%" height="15" fill="rgb(244,57,34)" fg:x="788" fg:w="279"/><text x="6.8491%" y="1151.50">b..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (279 samples, 2.34%)</title><rect x="6.5991%" y="1125" width="2.3365%" height="15" fill="rgb(214,203,32)" fg:x="788" fg:w="279"/><text x="6.8491%" y="1135.50">&lt;..</text></g><g><title>petgraph::graph_impl::serialization::&lt;impl serde::de::Deserialize for petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;&gt;::deserialize (140 samples, 1.17%)</title><rect x="7.7632%" y="1109" width="1.1724%" height="15" fill="rgb(207,58,43)" fg:x="927" fg:w="140"/><text x="8.0132%" y="1119.50"></text></g><g><title>petgraph::graph_impl::serialization::_::&lt;impl serde::de::Deserialize for petgraph::graph_impl::serialization::DeserGraph&lt;N,E,Ix&gt;&gt;::deserialize (128 samples, 1.07%)</title><rect x="7.8637%" y="1093" width="1.0719%" height="15" fill="rgb(215,193,15)" fg:x="939" fg:w="128"/><text x="8.1137%" y="1103.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (128 samples, 1.07%)</title><rect x="7.8637%" y="1077" width="1.0719%" height="15" fill="rgb(232,15,44)" fg:x="939" fg:w="128"/><text x="8.1137%" y="1087.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (128 samples, 1.07%)</title><rect x="7.8637%" y="1061" width="1.0719%" height="15" fill="rgb(212,3,48)" fg:x="939" fg:w="128"/><text x="8.1137%" y="1071.50"></text></g><g><title>&lt;petgraph::graph_impl::serialization::_::&lt;impl serde::de::Deserialize for petgraph::graph_impl::serialization::DeserGraph&lt;N,E,Ix&gt;&gt;::deserialize::__Visitor&lt;N,E,Ix&gt; as serde::de::Visitor&gt;::visit_seq (128 samples, 1.07%)</title><rect x="7.8637%" y="1045" width="1.0719%" height="15" fill="rgb(218,128,7)" fg:x="939" fg:w="128"/><text x="8.1137%" y="1055.50"></text></g><g><title>serde::de::SeqAccess::next_element (128 samples, 1.07%)</title><rect x="7.8637%" y="1029" width="1.0719%" height="15" fill="rgb(226,216,39)" fg:x="939" fg:w="128"/><text x="8.1137%" y="1039.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (128 samples, 1.07%)</title><rect x="7.8637%" y="1013" width="1.0719%" height="15" fill="rgb(243,47,51)" fg:x="939" fg:w="128"/><text x="8.1137%" y="1023.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (128 samples, 1.07%)</title><rect x="7.8637%" y="997" width="1.0719%" height="15" fill="rgb(241,183,40)" fg:x="939" fg:w="128"/><text x="8.1137%" y="1007.50"></text></g><g><title>&lt;&lt;petgraph::graph_impl::serialization::_::&lt;impl serde::de::Deserialize for petgraph::graph_impl::serialization::DeserGraph&lt;N,E,Ix&gt;&gt;::deserialize::__Visitor&lt;N,E,Ix&gt; as serde::de::Visitor&gt;::visit_seq::__DeserializeWith&lt;N,E,Ix&gt; as serde::de::Deserialize&gt;::deserialize (128 samples, 1.07%)</title><rect x="7.8637%" y="981" width="1.0719%" height="15" fill="rgb(231,217,32)" fg:x="939" fg:w="128"/><text x="8.1137%" y="991.50"></text></g><g><title>petgraph::graph_impl::serialization::deser_graph_nodes (41 samples, 0.34%)</title><rect x="8.5922%" y="965" width="0.3434%" height="15" fill="rgb(229,61,38)" fg:x="1026" fg:w="41"/><text x="8.8422%" y="975.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (41 samples, 0.34%)</title><rect x="8.5922%" y="949" width="0.3434%" height="15" fill="rgb(225,210,5)" fg:x="1026" fg:w="41"/><text x="8.8422%" y="959.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (41 samples, 0.34%)</title><rect x="8.5922%" y="933" width="0.3434%" height="15" fill="rgb(231,79,45)" fg:x="1026" fg:w="41"/><text x="8.8422%" y="943.50"></text></g><g><title>&lt;petgraph::serde_utils::MappedSequenceVisitor&lt;T,R,F&gt; as serde::de::Visitor&gt;::visit_seq (41 samples, 0.34%)</title><rect x="8.5922%" y="917" width="0.3434%" height="15" fill="rgb(224,100,7)" fg:x="1026" fg:w="41"/><text x="8.8422%" y="927.50"></text></g><g><title>serde::de::SeqAccess::next_element (16 samples, 0.13%)</title><rect x="8.8016%" y="901" width="0.1340%" height="15" fill="rgb(241,198,18)" fg:x="1051" fg:w="16"/><text x="9.0516%" y="911.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (16 samples, 0.13%)</title><rect x="8.8016%" y="885" width="0.1340%" height="15" fill="rgb(252,97,53)" fg:x="1051" fg:w="16"/><text x="9.0516%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 0.13%)</title><rect x="8.8016%" y="869" width="0.1340%" height="15" fill="rgb(220,88,7)" fg:x="1051" fg:w="16"/><text x="9.0516%" y="879.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for [T: 2]&gt;::deserialize (16 samples, 0.13%)</title><rect x="8.8016%" y="853" width="0.1340%" height="15" fill="rgb(213,176,14)" fg:x="1051" fg:w="16"/><text x="9.0516%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (16 samples, 0.13%)</title><rect x="8.8016%" y="837" width="0.1340%" height="15" fill="rgb(246,73,7)" fg:x="1051" fg:w="16"/><text x="9.0516%" y="847.50"></text></g><g><title>&lt;serde::de::impls::ArrayVisitor&lt;[T: 2]&gt; as serde::de::Visitor&gt;::visit_seq (16 samples, 0.13%)</title><rect x="8.8016%" y="821" width="0.1340%" height="15" fill="rgb(245,64,36)" fg:x="1051" fg:w="16"/><text x="9.0516%" y="831.50"></text></g><g><title>serde::de::SeqAccess::next_element (14 samples, 0.12%)</title><rect x="8.8184%" y="805" width="0.1172%" height="15" fill="rgb(245,80,10)" fg:x="1053" fg:w="14"/><text x="9.0684%" y="815.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (13 samples, 0.11%)</title><rect x="8.8267%" y="789" width="0.1089%" height="15" fill="rgb(232,107,50)" fg:x="1054" fg:w="13"/><text x="9.0767%" y="799.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.06%)</title><rect x="8.8770%" y="773" width="0.0586%" height="15" fill="rgb(253,3,0)" fg:x="1060" fg:w="7"/><text x="9.1270%" y="783.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u8&gt;::deserialize (7 samples, 0.06%)</title><rect x="8.8770%" y="757" width="0.0586%" height="15" fill="rgb(212,99,53)" fg:x="1060" fg:w="7"/><text x="9.1270%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u8 (7 samples, 0.06%)</title><rect x="8.8770%" y="741" width="0.0586%" height="15" fill="rgb(249,111,54)" fg:x="1060" fg:w="7"/><text x="9.1270%" y="751.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (7 samples, 0.06%)</title><rect x="8.8770%" y="725" width="0.0586%" height="15" fill="rgb(249,55,30)" fg:x="1060" fg:w="7"/><text x="9.1270%" y="735.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (7 samples, 0.06%)</title><rect x="8.8770%" y="709" width="0.0586%" height="15" fill="rgb(237,47,42)" fg:x="1060" fg:w="7"/><text x="9.1270%" y="719.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (3 samples, 0.03%)</title><rect x="8.9105%" y="693" width="0.0251%" height="15" fill="rgb(211,20,18)" fg:x="1064" fg:w="3"/><text x="9.1605%" y="703.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (3 samples, 0.03%)</title><rect x="8.9105%" y="677" width="0.0251%" height="15" fill="rgb(231,203,46)" fg:x="1064" fg:w="3"/><text x="9.1605%" y="687.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (3 samples, 0.03%)</title><rect x="8.9105%" y="661" width="0.0251%" height="15" fill="rgb(237,142,3)" fg:x="1064" fg:w="3"/><text x="9.1605%" y="671.50"></text></g><g><title>__GI___clone (946 samples, 7.92%)</title><rect x="1.0552%" y="1445" width="7.9223%" height="15" fill="rgb(241,107,1)" fg:x="126" fg:w="946"/><text x="1.3052%" y="1455.50">__GI___clone</text></g><g><title>start_thread (917 samples, 7.68%)</title><rect x="1.2980%" y="1429" width="7.6794%" height="15" fill="rgb(229,83,13)" fg:x="155" fg:w="917"/><text x="1.5480%" y="1439.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (917 samples, 7.68%)</title><rect x="1.2980%" y="1413" width="7.6794%" height="15" fill="rgb(241,91,40)" fg:x="155" fg:w="917"/><text x="1.5480%" y="1423.50">std::sys::u..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (5 samples, 0.04%)</title><rect x="8.9356%" y="1397" width="0.0419%" height="15" fill="rgb(225,3,45)" fg:x="1067" fg:w="5"/><text x="9.1856%" y="1407.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (5 samples, 0.04%)</title><rect x="8.9356%" y="1381" width="0.0419%" height="15" fill="rgb(244,223,14)" fg:x="1067" fg:w="5"/><text x="9.1856%" y="1391.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (5 samples, 0.04%)</title><rect x="8.9356%" y="1365" width="0.0419%" height="15" fill="rgb(224,124,37)" fg:x="1067" fg:w="5"/><text x="9.1856%" y="1375.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (5 samples, 0.04%)</title><rect x="8.9356%" y="1349" width="0.0419%" height="15" fill="rgb(251,171,30)" fg:x="1067" fg:w="5"/><text x="9.1856%" y="1359.50"></text></g><g><title>__GI___mprotect (5 samples, 0.04%)</title><rect x="8.9356%" y="1333" width="0.0419%" height="15" fill="rgb(236,46,54)" fg:x="1067" fg:w="5"/><text x="9.1856%" y="1343.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9356%" y="1317" width="0.0419%" height="15" fill="rgb(245,213,5)" fg:x="1067" fg:w="5"/><text x="9.1856%" y="1327.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9356%" y="1301" width="0.0419%" height="15" fill="rgb(230,144,27)" fg:x="1067" fg:w="5"/><text x="9.1856%" y="1311.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9356%" y="1285" width="0.0419%" height="15" fill="rgb(220,86,6)" fg:x="1067" fg:w="5"/><text x="9.1856%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="8.9440%" y="1269" width="0.0335%" height="15" fill="rgb(240,20,13)" fg:x="1068" fg:w="4"/><text x="9.1940%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="8.9440%" y="1253" width="0.0335%" height="15" fill="rgb(217,89,34)" fg:x="1068" fg:w="4"/><text x="9.1940%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="8.9440%" y="1237" width="0.0335%" height="15" fill="rgb(229,13,5)" fg:x="1068" fg:w="4"/><text x="9.1940%" y="1247.50"></text></g><g><title>&lt;pegasus::result::ResultStream&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="8.9775%" y="1253" width="0.0419%" height="15" fill="rgb(244,67,35)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1263.50"></text></g><g><title>pegasus::result::ResultStream&lt;T&gt;::pull_next (5 samples, 0.04%)</title><rect x="8.9775%" y="1237" width="0.0419%" height="15" fill="rgb(221,40,2)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1247.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (5 samples, 0.04%)</title><rect x="8.9775%" y="1221" width="0.0419%" height="15" fill="rgb(237,157,21)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1231.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (5 samples, 0.04%)</title><rect x="8.9775%" y="1205" width="0.0419%" height="15" fill="rgb(222,94,11)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1215.50"></text></g><g><title>crossbeam_channel::context::Context::with (5 samples, 0.04%)</title><rect x="8.9775%" y="1189" width="0.0419%" height="15" fill="rgb(249,113,6)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1199.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.04%)</title><rect x="8.9775%" y="1173" width="0.0419%" height="15" fill="rgb(238,137,36)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1183.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (5 samples, 0.04%)</title><rect x="8.9775%" y="1157" width="0.0419%" height="15" fill="rgb(210,102,26)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1167.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (5 samples, 0.04%)</title><rect x="8.9775%" y="1141" width="0.0419%" height="15" fill="rgb(218,30,30)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1151.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::{{closure}} (5 samples, 0.04%)</title><rect x="8.9775%" y="1125" width="0.0419%" height="15" fill="rgb(214,67,26)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1135.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (5 samples, 0.04%)</title><rect x="8.9775%" y="1109" width="0.0419%" height="15" fill="rgb(251,9,53)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1119.50"></text></g><g><title>std::thread::park (5 samples, 0.04%)</title><rect x="8.9775%" y="1093" width="0.0419%" height="15" fill="rgb(228,204,25)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1103.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (5 samples, 0.04%)</title><rect x="8.9775%" y="1077" width="0.0419%" height="15" fill="rgb(207,153,8)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1087.50"></text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 0.04%)</title><rect x="8.9775%" y="1061" width="0.0419%" height="15" fill="rgb(242,9,16)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1071.50"></text></g><g><title>syscall (5 samples, 0.04%)</title><rect x="8.9775%" y="1045" width="0.0419%" height="15" fill="rgb(217,211,10)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="1029" width="0.0419%" height="15" fill="rgb(219,228,52)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="1013" width="0.0419%" height="15" fill="rgb(231,92,29)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="997" width="0.0419%" height="15" fill="rgb(232,8,23)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="1007.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="981" width="0.0419%" height="15" fill="rgb(216,211,34)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="991.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="965" width="0.0419%" height="15" fill="rgb(236,151,0)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="975.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="949" width="0.0419%" height="15" fill="rgb(209,168,3)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="959.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="933" width="0.0419%" height="15" fill="rgb(208,129,28)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="943.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="917" width="0.0419%" height="15" fill="rgb(229,78,22)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="927.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="901" width="0.0419%" height="15" fill="rgb(228,187,13)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="911.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="885" width="0.0419%" height="15" fill="rgb(240,119,24)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="895.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="869" width="0.0419%" height="15" fill="rgb(209,194,42)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="879.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="853" width="0.0419%" height="15" fill="rgb(247,200,46)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="863.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="837" width="0.0419%" height="15" fill="rgb(218,76,16)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="847.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="8.9775%" y="821" width="0.0419%" height="15" fill="rgb(225,21,48)" fg:x="1072" fg:w="5"/><text x="9.2275%" y="831.50"></text></g><g><title>std::panic::catch_unwind (10 samples, 0.08%)</title><rect x="8.9775%" y="1381" width="0.0837%" height="15" fill="rgb(239,223,50)" fg:x="1072" fg:w="10"/><text x="9.2275%" y="1391.50"></text></g><g><title>std::panicking::try (10 samples, 0.08%)</title><rect x="8.9775%" y="1365" width="0.0837%" height="15" fill="rgb(244,45,21)" fg:x="1072" fg:w="10"/><text x="9.2275%" y="1375.50"></text></g><g><title>std::panicking::try::do_call (10 samples, 0.08%)</title><rect x="8.9775%" y="1349" width="0.0837%" height="15" fill="rgb(232,33,43)" fg:x="1072" fg:w="10"/><text x="9.2275%" y="1359.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (10 samples, 0.08%)</title><rect x="8.9775%" y="1333" width="0.0837%" height="15" fill="rgb(209,8,3)" fg:x="1072" fg:w="10"/><text x="9.2275%" y="1343.50"></text></g><g><title>std::rt::lang_start::{{closure}} (10 samples, 0.08%)</title><rect x="8.9775%" y="1317" width="0.0837%" height="15" fill="rgb(214,25,53)" fg:x="1072" fg:w="10"/><text x="9.2275%" y="1327.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10 samples, 0.08%)</title><rect x="8.9775%" y="1301" width="0.0837%" height="15" fill="rgb(254,186,54)" fg:x="1072" fg:w="10"/><text x="9.2275%" y="1311.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 0.08%)</title><rect x="8.9775%" y="1285" width="0.0837%" height="15" fill="rgb(208,174,49)" fg:x="1072" fg:w="10"/><text x="9.2275%" y="1295.50"></text></g><g><title>join_benchmark::main (10 samples, 0.08%)</title><rect x="8.9775%" y="1269" width="0.0837%" height="15" fill="rgb(233,191,51)" fg:x="1072" fg:w="10"/><text x="9.2275%" y="1279.50"></text></g><g><title>pegasus::shutdown_all (5 samples, 0.04%)</title><rect x="9.0193%" y="1253" width="0.0419%" height="15" fill="rgb(222,134,10)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1263.50"></text></g><g><title>pegasus_executor::reactor::await_termination (5 samples, 0.04%)</title><rect x="9.0193%" y="1237" width="0.0419%" height="15" fill="rgb(230,226,20)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1247.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (5 samples, 0.04%)</title><rect x="9.0193%" y="1221" width="0.0419%" height="15" fill="rgb(251,111,25)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1231.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (5 samples, 0.04%)</title><rect x="9.0193%" y="1205" width="0.0419%" height="15" fill="rgb(224,40,46)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1215.50"></text></g><g><title>std::sys::unix::thread::Thread::join (5 samples, 0.04%)</title><rect x="9.0193%" y="1189" width="0.0419%" height="15" fill="rgb(236,108,47)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1199.50"></text></g><g><title>__pthread_clockjoin_ex (5 samples, 0.04%)</title><rect x="9.0193%" y="1173" width="0.0419%" height="15" fill="rgb(234,93,0)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1183.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="1157" width="0.0419%" height="15" fill="rgb(224,213,32)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="1141" width="0.0419%" height="15" fill="rgb(251,11,48)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="1125" width="0.0419%" height="15" fill="rgb(236,173,5)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="1109" width="0.0419%" height="15" fill="rgb(230,95,12)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1119.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="1093" width="0.0419%" height="15" fill="rgb(232,209,1)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="1077" width="0.0419%" height="15" fill="rgb(232,6,1)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="1061" width="0.0419%" height="15" fill="rgb(210,224,50)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="1045" width="0.0419%" height="15" fill="rgb(228,127,35)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="1029" width="0.0419%" height="15" fill="rgb(245,102,45)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="1013" width="0.0419%" height="15" fill="rgb(214,1,49)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="997" width="0.0419%" height="15" fill="rgb(226,163,40)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="1007.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="981" width="0.0419%" height="15" fill="rgb(239,212,28)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="991.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="965" width="0.0419%" height="15" fill="rgb(220,20,13)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="975.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0193%" y="949" width="0.0419%" height="15" fill="rgb(210,164,35)" fg:x="1077" fg:w="5"/><text x="9.2693%" y="959.50"></text></g><g><title>join_benchmark (1,083 samples, 9.07%)</title><rect x="0.0000%" y="1461" width="9.0696%" height="15" fill="rgb(248,109,41)" fg:x="0" fg:w="1083"/><text x="0.2500%" y="1471.50">join_benchmark</text></g><g><title>_start (11 samples, 0.09%)</title><rect x="8.9775%" y="1445" width="0.0921%" height="15" fill="rgb(238,23,50)" fg:x="1072" fg:w="11"/><text x="9.2275%" y="1455.50"></text></g><g><title>__libc_start_main (11 samples, 0.09%)</title><rect x="8.9775%" y="1429" width="0.0921%" height="15" fill="rgb(211,48,49)" fg:x="1072" fg:w="11"/><text x="9.2275%" y="1439.50"></text></g><g><title>main (11 samples, 0.09%)</title><rect x="8.9775%" y="1413" width="0.0921%" height="15" fill="rgb(223,36,21)" fg:x="1072" fg:w="11"/><text x="9.2275%" y="1423.50"></text></g><g><title>std::rt::lang_start_internal (11 samples, 0.09%)</title><rect x="8.9775%" y="1397" width="0.0921%" height="15" fill="rgb(207,123,46)" fg:x="1072" fg:w="11"/><text x="9.2275%" y="1407.50"></text></g><g><title>perf (5 samples, 0.04%)</title><rect x="9.0696%" y="1461" width="0.0419%" height="15" fill="rgb(240,218,32)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1471.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1445" width="0.0419%" height="15" fill="rgb(252,5,43)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1455.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1429" width="0.0419%" height="15" fill="rgb(252,84,19)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1439.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1413" width="0.0419%" height="15" fill="rgb(243,152,39)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1423.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1397" width="0.0419%" height="15" fill="rgb(234,160,15)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1407.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1381" width="0.0419%" height="15" fill="rgb(237,34,20)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1391.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1365" width="0.0419%" height="15" fill="rgb(229,97,13)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1375.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1349" width="0.0419%" height="15" fill="rgb(234,71,50)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1359.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1333" width="0.0419%" height="15" fill="rgb(253,155,4)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1343.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1317" width="0.0419%" height="15" fill="rgb(222,185,37)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1327.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1301" width="0.0419%" height="15" fill="rgb(251,177,13)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1311.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1285" width="0.0419%" height="15" fill="rgb(250,179,40)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1295.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1269" width="0.0419%" height="15" fill="rgb(242,44,2)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1279.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1253" width="0.0419%" height="15" fill="rgb(216,177,13)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1263.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="9.0696%" y="1237" width="0.0419%" height="15" fill="rgb(216,106,43)" fg:x="1083" fg:w="5"/><text x="9.3196%" y="1247.50"></text></g><g><title>&lt;graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt; as graph_store::graph_db::GlobalStoreTrait&lt;G,I&gt;&gt;::get_adj_vertices (4 samples, 0.03%)</title><rect x="9.1198%" y="1429" width="0.0335%" height="15" fill="rgb(216,183,2)" fg:x="1089" fg:w="4"/><text x="9.3698%" y="1439.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::ChannelPush&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (5 samples, 0.04%)</title><rect x="9.1533%" y="1429" width="0.0419%" height="15" fill="rgb(249,75,3)" fg:x="1093" fg:w="5"/><text x="9.4033%" y="1439.50"></text></g><g><title>&lt;pegasus::communication::decorator::rob::MicroBatchPush&lt;T&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;T&gt;&gt;::try_push_iter (2 samples, 0.02%)</title><rect x="9.1785%" y="1413" width="0.0167%" height="15" fill="rgb(219,67,39)" fg:x="1096" fg:w="2"/><text x="9.4285%" y="1423.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::Tee&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (5 samples, 0.04%)</title><rect x="9.1952%" y="1429" width="0.0419%" height="15" fill="rgb(253,228,2)" fg:x="1098" fg:w="5"/><text x="9.4452%" y="1439.50"></text></g><g><title>_int_free (6 samples, 0.05%)</title><rect x="9.2371%" y="1429" width="0.0502%" height="15" fill="rgb(235,138,27)" fg:x="1103" fg:w="6"/><text x="9.4871%" y="1439.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="9.2957%" y="1429" width="0.0167%" height="15" fill="rgb(236,97,51)" fg:x="1110" fg:w="2"/><text x="9.5457%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt; (4 samples, 0.03%)</title><rect x="9.3208%" y="1429" width="0.0335%" height="15" fill="rgb(240,80,30)" fg:x="1113" fg:w="4"/><text x="9.5708%" y="1439.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices (4 samples, 0.03%)</title><rect x="9.3543%" y="1429" width="0.0335%" height="15" fill="rgb(230,178,19)" fg:x="1117" fg:w="4"/><text x="9.6043%" y="1439.50"></text></g><g><title>pegasus::api::scope::MergedScopeDelta::evolve (2 samples, 0.02%)</title><rect x="9.3878%" y="1429" width="0.0167%" height="15" fill="rgb(210,190,27)" fg:x="1121" fg:w="2"/><text x="9.6378%" y="1439.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (12 samples, 0.10%)</title><rect x="9.4129%" y="1429" width="0.1005%" height="15" fill="rgb(222,107,31)" fg:x="1124" fg:w="12"/><text x="9.6629%" y="1439.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::push_iter (9 samples, 0.08%)</title><rect x="9.4381%" y="1413" width="0.0754%" height="15" fill="rgb(216,127,34)" fg:x="1127" fg:w="9"/><text x="9.6881%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;graph_store::utils::Iter&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt;,join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;,join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (7 samples, 0.06%)</title><rect x="9.4548%" y="1397" width="0.0586%" height="15" fill="rgb(234,116,52)" fg:x="1129" fg:w="7"/><text x="9.7048%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter::Filter&lt;graph_store::utils::Iter&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt;,join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (7 samples, 0.06%)</title><rect x="9.4548%" y="1381" width="0.0586%" height="15" fill="rgb(222,124,15)" fg:x="1129" fg:w="7"/><text x="9.7048%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_store::utils::Iter&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt;&gt; (7 samples, 0.06%)</title><rect x="9.4548%" y="1365" width="0.0586%" height="15" fill="rgb(231,179,28)" fg:x="1129" fg:w="7"/><text x="9.7048%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::iter::traits::iterator::Iterator+Item = graph_store::graph_db::LocalVertex&lt;usize&gt;+core::marker::Send&gt;&gt; (7 samples, 0.06%)</title><rect x="9.4548%" y="1349" width="0.0586%" height="15" fill="rgb(226,93,45)" fg:x="1129" fg:w="7"/><text x="9.7048%" y="1359.50"></text></g><g><title>[[heap]] (51 samples, 0.43%)</title><rect x="9.1115%" y="1445" width="0.4271%" height="15" fill="rgb(215,8,51)" fg:x="1088" fg:w="51"/><text x="9.3615%" y="1455.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (113 samples, 0.95%)</title><rect x="9.5386%" y="1429" width="0.9463%" height="15" fill="rgb(223,106,5)" fg:x="1139" fg:w="113"/><text x="9.7886%" y="1439.50"></text></g><g><title>&lt;pegasus::communication::buffer::rob::BufferedPush&lt;D,P&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (2 samples, 0.02%)</title><rect x="10.4933%" y="1429" width="0.0167%" height="15" fill="rgb(250,191,5)" fg:x="1253" fg:w="2"/><text x="10.7433%" y="1439.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::ChannelPush&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (2 samples, 0.02%)</title><rect x="10.5100%" y="1429" width="0.0167%" height="15" fill="rgb(242,132,44)" fg:x="1255" fg:w="2"/><text x="10.7600%" y="1439.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::Tee&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (6 samples, 0.05%)</title><rect x="10.5268%" y="1429" width="0.0502%" height="15" fill="rgb(251,152,29)" fg:x="1257" fg:w="6"/><text x="10.7768%" y="1439.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="10.5770%" y="1429" width="0.0167%" height="15" fill="rgb(218,179,5)" fg:x="1263" fg:w="2"/><text x="10.8270%" y="1439.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="10.5938%" y="1429" width="0.0251%" height="15" fill="rgb(227,67,19)" fg:x="1265" fg:w="3"/><text x="10.8438%" y="1439.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.04%)</title><rect x="10.6189%" y="1429" width="0.0419%" height="15" fill="rgb(233,119,31)" fg:x="1268" fg:w="5"/><text x="10.8689%" y="1439.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.03%)</title><rect x="10.6607%" y="1429" width="0.0251%" height="15" fill="rgb(241,120,22)" fg:x="1273" fg:w="3"/><text x="10.9107%" y="1439.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="10.6859%" y="1429" width="0.0251%" height="15" fill="rgb(224,102,30)" fg:x="1276" fg:w="3"/><text x="10.9359%" y="1439.50"></text></g><g><title>_int_realloc (3 samples, 0.03%)</title><rect x="10.7194%" y="1429" width="0.0251%" height="15" fill="rgb(210,164,37)" fg:x="1280" fg:w="3"/><text x="10.9694%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::cloned::Cloned&lt;core::slice::iter::Iter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="10.7529%" y="1429" width="0.0167%" height="15" fill="rgb(226,191,16)" fg:x="1284" fg:w="2"/><text x="11.0029%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt; (127 samples, 1.06%)</title><rect x="10.7696%" y="1429" width="1.0636%" height="15" fill="rgb(214,40,45)" fg:x="1286" fg:w="127"/><text x="11.0196%" y="1439.50"></text></g><g><title>pegasus::communication::buffer::rob::ScopeBatchPool&lt;D&gt;::get_pool_mut (6 samples, 0.05%)</title><rect x="11.8416%" y="1429" width="0.0502%" height="15" fill="rgb(244,29,26)" fg:x="1414" fg:w="6"/><text x="12.0916%" y="1439.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::is_canceled (4 samples, 0.03%)</title><rect x="11.8918%" y="1429" width="0.0335%" height="15" fill="rgb(216,16,5)" fg:x="1420" fg:w="4"/><text x="12.1418%" y="1439.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (2 samples, 0.02%)</title><rect x="11.9253%" y="1429" width="0.0167%" height="15" fill="rgb(249,76,35)" fg:x="1424" fg:w="2"/><text x="12.1753%" y="1439.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::push_iter (2 samples, 0.02%)</title><rect x="11.9253%" y="1413" width="0.0167%" height="15" fill="rgb(207,11,44)" fg:x="1424" fg:w="2"/><text x="12.1753%" y="1423.50"></text></g><g><title>pegasus::data::rob::DataSetPool&lt;D,F&gt;::get_batch_mut (5 samples, 0.04%)</title><rect x="11.9420%" y="1429" width="0.0419%" height="15" fill="rgb(228,190,49)" fg:x="1426" fg:w="5"/><text x="12.1920%" y="1439.50"></text></g><g><title>pegasus::tag::tools::map::TidyTagMap&lt;V&gt;::contains_key (3 samples, 0.03%)</title><rect x="11.9839%" y="1429" width="0.0251%" height="15" fill="rgb(214,173,12)" fg:x="1431" fg:w="3"/><text x="12.2339%" y="1439.50"></text></g><g><title>pegasus::tag::tools::map::TidyTagMap&lt;V&gt;::get_mut (2 samples, 0.02%)</title><rect x="12.0090%" y="1429" width="0.0167%" height="15" fill="rgb(218,26,35)" fg:x="1434" fg:w="2"/><text x="12.2590%" y="1439.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::push (6 samples, 0.05%)</title><rect x="12.0258%" y="1429" width="0.0502%" height="15" fill="rgb(220,200,19)" fg:x="1436" fg:w="6"/><text x="12.2758%" y="1439.50"></text></g><g><title>[anon] (304 samples, 2.55%)</title><rect x="9.5386%" y="1445" width="2.5459%" height="15" fill="rgb(239,95,49)" fg:x="1139" fg:w="304"/><text x="9.7886%" y="1455.50">[a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (127 samples, 1.06%)</title><rect x="12.0928%" y="1429" width="1.0636%" height="15" fill="rgb(235,85,53)" fg:x="1444" fg:w="127"/><text x="12.3428%" y="1439.50"></text></g><g><title>&lt;graph_store::utils::IterList&lt;T,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (157 samples, 1.31%)</title><rect x="13.1647%" y="1429" width="1.3148%" height="15" fill="rgb(233,133,31)" fg:x="1572" fg:w="157"/><text x="13.4147%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;graph_store::utils::Iter&lt;petgraph::graph_impl::NodeIndex&gt;,graph_store::graph_db_impl::LargeGraphDB::_get_all_vertices_of_labels::{{closure}}&gt;&gt; (157 samples, 1.31%)</title><rect x="13.1647%" y="1413" width="1.3148%" height="15" fill="rgb(218,25,20)" fg:x="1572" fg:w="157"/><text x="13.4147%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_store::utils::Iter&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (157 samples, 1.31%)</title><rect x="13.1647%" y="1397" width="1.3148%" height="15" fill="rgb(252,210,38)" fg:x="1572" fg:w="157"/><text x="13.4147%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::iter::traits::iterator::Iterator+Item = petgraph::graph_impl::NodeIndex+core::marker::Send&gt;&gt; (157 samples, 1.31%)</title><rect x="13.1647%" y="1381" width="1.3148%" height="15" fill="rgb(242,134,21)" fg:x="1572" fg:w="157"/><text x="13.4147%" y="1391.50"></text></g><g><title>alloc::alloc::box_free (157 samples, 1.31%)</title><rect x="13.1647%" y="1365" width="1.3148%" height="15" fill="rgb(213,28,48)" fg:x="1572" fg:w="157"/><text x="13.4147%" y="1375.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (157 samples, 1.31%)</title><rect x="13.1647%" y="1349" width="1.3148%" height="15" fill="rgb(250,196,2)" fg:x="1572" fg:w="157"/><text x="13.4147%" y="1359.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::index_to_local_vertex (157 samples, 1.31%)</title><rect x="13.1647%" y="1333" width="1.3148%" height="15" fill="rgb(227,5,17)" fg:x="1572" fg:w="157"/><text x="13.4147%" y="1343.50"></text></g><g><title>&lt;graph_store::utils::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.13%)</title><rect x="14.5633%" y="1349" width="0.1340%" height="15" fill="rgb(221,226,24)" fg:x="1739" fg:w="16"/><text x="14.8133%" y="1359.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;I,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.13%)</title><rect x="14.5633%" y="1333" width="0.1340%" height="15" fill="rgb(211,5,48)" fg:x="1739" fg:w="16"/><text x="14.8133%" y="1343.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.18%)</title><rect x="14.5633%" y="1397" width="0.1759%" height="15" fill="rgb(219,150,6)" fg:x="1739" fg:w="21"/><text x="14.8133%" y="1407.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (21 samples, 0.18%)</title><rect x="14.5633%" y="1381" width="0.1759%" height="15" fill="rgb(251,46,16)" fg:x="1739" fg:w="21"/><text x="14.8133%" y="1391.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (21 samples, 0.18%)</title><rect x="14.5633%" y="1365" width="0.1759%" height="15" fill="rgb(220,204,40)" fg:x="1739" fg:w="21"/><text x="14.8133%" y="1375.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (5 samples, 0.04%)</title><rect x="14.6973%" y="1349" width="0.0419%" height="15" fill="rgb(211,85,2)" fg:x="1755" fg:w="5"/><text x="14.9473%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="14.7391%" y="1285" width="0.0167%" height="15" fill="rgb(229,17,7)" fg:x="1760" fg:w="2"/><text x="14.9891%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="14.7391%" y="1269" width="0.0167%" height="15" fill="rgb(239,72,28)" fg:x="1760" fg:w="2"/><text x="14.9891%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.03%)</title><rect x="14.7391%" y="1349" width="0.0335%" height="15" fill="rgb(230,47,54)" fg:x="1760" fg:w="4"/><text x="14.9891%" y="1359.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.03%)</title><rect x="14.7391%" y="1333" width="0.0335%" height="15" fill="rgb(214,50,8)" fg:x="1760" fg:w="4"/><text x="14.9891%" y="1343.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.03%)</title><rect x="14.7391%" y="1317" width="0.0335%" height="15" fill="rgb(216,198,43)" fg:x="1760" fg:w="4"/><text x="14.9891%" y="1327.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.03%)</title><rect x="14.7391%" y="1301" width="0.0335%" height="15" fill="rgb(234,20,35)" fg:x="1760" fg:w="4"/><text x="14.9891%" y="1311.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.02%)</title><rect x="14.7559%" y="1285" width="0.0167%" height="15" fill="rgb(254,45,19)" fg:x="1762" fg:w="2"/><text x="15.0059%" y="1295.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="14.7559%" y="1269" width="0.0167%" height="15" fill="rgb(219,14,44)" fg:x="1762" fg:w="2"/><text x="15.0059%" y="1279.50"></text></g><g><title>&lt;pegasus::communication::buffer::rob::BufferedPush&lt;D,P&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (36 samples, 0.30%)</title><rect x="14.4795%" y="1429" width="0.3015%" height="15" fill="rgb(217,220,26)" fg:x="1729" fg:w="36"/><text x="14.7295%" y="1439.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.22%)</title><rect x="14.5633%" y="1413" width="0.2177%" height="15" fill="rgb(213,158,28)" fg:x="1739" fg:w="26"/><text x="14.8133%" y="1423.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.04%)</title><rect x="14.7391%" y="1397" width="0.0419%" height="15" fill="rgb(252,51,52)" fg:x="1760" fg:w="5"/><text x="14.9891%" y="1407.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5 samples, 0.04%)</title><rect x="14.7391%" y="1381" width="0.0419%" height="15" fill="rgb(246,89,16)" fg:x="1760" fg:w="5"/><text x="14.9891%" y="1391.50"></text></g><g><title>join_benchmark::s_benchmark1_join::{{closure}}::{{closure}}::{{closure}}::{{closure}} (5 samples, 0.04%)</title><rect x="14.7391%" y="1365" width="0.0419%" height="15" fill="rgb(216,158,49)" fg:x="1760" fg:w="5"/><text x="14.9891%" y="1375.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::ChannelPush&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (4 samples, 0.03%)</title><rect x="14.7810%" y="1429" width="0.0335%" height="15" fill="rgb(236,107,19)" fg:x="1765" fg:w="4"/><text x="15.0310%" y="1439.50"></text></g><g><title>&lt;pegasus::schedule::strategies::WaterfallStrategy as pegasus::schedule::StepStrategy&gt;::make_step (7 samples, 0.06%)</title><rect x="14.8145%" y="1429" width="0.0586%" height="15" fill="rgb(228,185,30)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1439.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (7 samples, 0.06%)</title><rect x="14.8145%" y="1413" width="0.0586%" height="15" fill="rgb(246,134,8)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1423.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (7 samples, 0.06%)</title><rect x="14.8145%" y="1397" width="0.0586%" height="15" fill="rgb(214,143,50)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1407.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (7 samples, 0.06%)</title><rect x="14.8145%" y="1381" width="0.0586%" height="15" fill="rgb(228,75,8)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1391.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (7 samples, 0.06%)</title><rect x="14.8145%" y="1365" width="0.0586%" height="15" fill="rgb(207,175,4)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1375.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire (7 samples, 0.06%)</title><rect x="14.8145%" y="1349" width="0.0586%" height="15" fill="rgb(205,108,24)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1359.50"></text></g><g><title>pegasus::dataflow::Dataflow::try_fire (7 samples, 0.06%)</title><rect x="14.8145%" y="1333" width="0.0586%" height="15" fill="rgb(244,120,49)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1343.50"></text></g><g><title>pegasus::operator::Operator::fire (7 samples, 0.06%)</title><rect x="14.8145%" y="1317" width="0.0586%" height="15" fill="rgb(223,47,38)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1327.50"></text></g><g><title>pegasus::operator::Operator::fire_inner (7 samples, 0.06%)</title><rect x="14.8145%" y="1301" width="0.0586%" height="15" fill="rgb(229,179,11)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1311.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (7 samples, 0.06%)</title><rect x="14.8145%" y="1285" width="0.0586%" height="15" fill="rgb(231,122,1)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1295.50"></text></g><g><title>&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (7 samples, 0.06%)</title><rect x="14.8145%" y="1269" width="0.0586%" height="15" fill="rgb(245,119,9)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1279.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (7 samples, 0.06%)</title><rect x="14.8145%" y="1253" width="0.0586%" height="15" fill="rgb(241,163,25)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1263.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (7 samples, 0.06%)</title><rect x="14.8145%" y="1237" width="0.0586%" height="15" fill="rgb(217,214,3)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1247.50"></text></g><g><title>&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive (7 samples, 0.06%)</title><rect x="14.8145%" y="1221" width="0.0586%" height="15" fill="rgb(240,86,28)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1231.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}} (7 samples, 0.06%)</title><rect x="14.8145%" y="1205" width="0.0586%" height="15" fill="rgb(215,47,9)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1215.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch (7 samples, 0.06%)</title><rect x="14.8145%" y="1189" width="0.0586%" height="15" fill="rgb(252,25,45)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1199.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch_of (7 samples, 0.06%)</title><rect x="14.8145%" y="1173" width="0.0586%" height="15" fill="rgb(251,164,9)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1183.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (7 samples, 0.06%)</title><rect x="14.8145%" y="1157" width="0.0586%" height="15" fill="rgb(233,194,0)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1167.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (7 samples, 0.06%)</title><rect x="14.8145%" y="1141" width="0.0586%" height="15" fill="rgb(249,111,24)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1151.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::push_iter (7 samples, 0.06%)</title><rect x="14.8145%" y="1125" width="0.0586%" height="15" fill="rgb(250,223,3)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1135.50"></text></g><g><title>&lt;pegasus::communication::output::output::rob::OutputHandle&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (7 samples, 0.06%)</title><rect x="14.8145%" y="1109" width="0.0586%" height="15" fill="rgb(236,178,37)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1119.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::Tee&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (7 samples, 0.06%)</title><rect x="14.8145%" y="1093" width="0.0586%" height="15" fill="rgb(241,158,50)" fg:x="1769" fg:w="7"/><text x="15.0645%" y="1103.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::ChannelPush&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (2 samples, 0.02%)</title><rect x="14.8564%" y="1077" width="0.0167%" height="15" fill="rgb(213,121,41)" fg:x="1774" fg:w="2"/><text x="15.1064%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;pegasus::data::rob::MicroBatch&lt;alloc::vec::Vec&lt;u64&gt;&gt;&gt; (44 samples, 0.37%)</title><rect x="14.8815%" y="1109" width="0.3685%" height="15" fill="rgb(240,92,3)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;pegasus_common::buffer::rob::Batch&lt;alloc::vec::Vec&lt;u64&gt;&gt;&gt; (44 samples, 0.37%)</title><rect x="14.8815%" y="1093" width="0.3685%" height="15" fill="rgb(205,123,3)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="1103.50"></text></g><g><title>&lt;pegasus_common::buffer::rob::Batch&lt;D&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.37%)</title><rect x="14.8815%" y="1077" width="0.3685%" height="15" fill="rgb(205,97,47)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="1087.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::recycle (44 samples, 0.37%)</title><rect x="14.8815%" y="1061" width="0.3685%" height="15" fill="rgb(247,152,14)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="1071.50"></text></g><g><title>pegasus_common::buffer::rob::BatchRecycleHook&lt;D&gt;::recycle (44 samples, 0.37%)</title><rect x="14.8815%" y="1045" width="0.3685%" height="15" fill="rgb(248,195,53)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="1055.50"></text></g><g><title>pegasus_common::queue::BoundLinkQueue&lt;T&gt;::push (44 samples, 0.37%)</title><rect x="14.8815%" y="1029" width="0.3685%" height="15" fill="rgb(226,201,16)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="1039.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (44 samples, 0.37%)</title><rect x="14.8815%" y="1013" width="0.3685%" height="15" fill="rgb(205,98,0)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (44 samples, 0.37%)</title><rect x="14.8815%" y="997" width="0.3685%" height="15" fill="rgb(214,191,48)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (44 samples, 0.37%)</title><rect x="14.8815%" y="981" width="0.3685%" height="15" fill="rgb(237,112,39)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44 samples, 0.37%)</title><rect x="14.8815%" y="965" width="0.3685%" height="15" fill="rgb(247,203,27)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44 samples, 0.37%)</title><rect x="14.8815%" y="949" width="0.3685%" height="15" fill="rgb(235,124,28)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="959.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.37%)</title><rect x="14.8815%" y="933" width="0.3685%" height="15" fill="rgb(208,207,46)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="943.50"></text></g><g><title>__rdl_alloc (44 samples, 0.37%)</title><rect x="14.8815%" y="917" width="0.3685%" height="15" fill="rgb(234,176,4)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="927.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (44 samples, 0.37%)</title><rect x="14.8815%" y="901" width="0.3685%" height="15" fill="rgb(230,133,28)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="911.50"></text></g><g><title>__GI___libc_malloc (44 samples, 0.37%)</title><rect x="14.8815%" y="885" width="0.3685%" height="15" fill="rgb(211,137,40)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="895.50"></text></g><g><title>_int_malloc (44 samples, 0.37%)</title><rect x="14.8815%" y="869" width="0.3685%" height="15" fill="rgb(254,35,13)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="879.50"></text></g><g><title>malloc_consolidate (44 samples, 0.37%)</title><rect x="14.8815%" y="853" width="0.3685%" height="15" fill="rgb(225,49,51)" fg:x="1777" fg:w="44"/><text x="15.1315%" y="863.50"></text></g><g><title>unlink_chunk (7 samples, 0.06%)</title><rect x="15.1914%" y="837" width="0.0586%" height="15" fill="rgb(251,10,15)" fg:x="1814" fg:w="7"/><text x="15.4414%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.05%)</title><rect x="15.2500%" y="1077" width="0.0502%" height="15" fill="rgb(228,207,15)" fg:x="1821" fg:w="6"/><text x="15.5000%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.05%)</title><rect x="15.2500%" y="1061" width="0.0502%" height="15" fill="rgb(241,99,19)" fg:x="1821" fg:w="6"/><text x="15.5000%" y="1071.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.05%)</title><rect x="15.2500%" y="1045" width="0.0502%" height="15" fill="rgb(207,104,49)" fg:x="1821" fg:w="6"/><text x="15.5000%" y="1055.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.05%)</title><rect x="15.2500%" y="1029" width="0.0502%" height="15" fill="rgb(234,99,18)" fg:x="1821" fg:w="6"/><text x="15.5000%" y="1039.50"></text></g><g><title>__rdl_alloc (6 samples, 0.05%)</title><rect x="15.2500%" y="1013" width="0.0502%" height="15" fill="rgb(213,191,49)" fg:x="1821" fg:w="6"/><text x="15.5000%" y="1023.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.05%)</title><rect x="15.2500%" y="997" width="0.0502%" height="15" fill="rgb(210,226,19)" fg:x="1821" fg:w="6"/><text x="15.5000%" y="1007.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.05%)</title><rect x="15.2500%" y="981" width="0.0502%" height="15" fill="rgb(229,97,18)" fg:x="1821" fg:w="6"/><text x="15.5000%" y="991.50"></text></g><g><title>_int_malloc (6 samples, 0.05%)</title><rect x="15.2500%" y="965" width="0.0502%" height="15" fill="rgb(211,167,15)" fg:x="1821" fg:w="6"/><text x="15.5000%" y="975.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 0.08%)</title><rect x="15.3421%" y="933" width="0.0837%" height="15" fill="rgb(210,169,34)" fg:x="1832" fg:w="10"/><text x="15.5921%" y="943.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.05%)</title><rect x="15.3756%" y="917" width="0.0502%" height="15" fill="rgb(241,121,31)" fg:x="1836" fg:w="6"/><text x="15.6256%" y="927.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.03%)</title><rect x="15.4677%" y="917" width="0.0335%" height="15" fill="rgb(232,40,11)" fg:x="1847" fg:w="4"/><text x="15.7177%" y="927.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (27 samples, 0.23%)</title><rect x="15.3170%" y="981" width="0.2261%" height="15" fill="rgb(205,86,26)" fg:x="1829" fg:w="27"/><text x="15.5670%" y="991.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (27 samples, 0.23%)</title><rect x="15.3170%" y="965" width="0.2261%" height="15" fill="rgb(231,126,28)" fg:x="1829" fg:w="27"/><text x="15.5670%" y="975.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (27 samples, 0.23%)</title><rect x="15.3170%" y="949" width="0.2261%" height="15" fill="rgb(219,221,18)" fg:x="1829" fg:w="27"/><text x="15.5670%" y="959.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (14 samples, 0.12%)</title><rect x="15.4258%" y="933" width="0.1172%" height="15" fill="rgb(211,40,0)" fg:x="1842" fg:w="14"/><text x="15.6758%" y="943.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.04%)</title><rect x="15.5012%" y="917" width="0.0419%" height="15" fill="rgb(239,85,43)" fg:x="1851" fg:w="5"/><text x="15.7512%" y="927.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="15.5431%" y="981" width="0.0167%" height="15" fill="rgb(231,55,21)" fg:x="1856" fg:w="2"/><text x="15.7931%" y="991.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.02%)</title><rect x="15.5431%" y="965" width="0.0167%" height="15" fill="rgb(225,184,43)" fg:x="1856" fg:w="2"/><text x="15.7931%" y="975.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.05%)</title><rect x="15.6436%" y="901" width="0.0502%" height="15" fill="rgb(251,158,41)" fg:x="1868" fg:w="6"/><text x="15.8936%" y="911.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.03%)</title><rect x="15.6603%" y="885" width="0.0335%" height="15" fill="rgb(234,159,37)" fg:x="1870" fg:w="4"/><text x="15.9103%" y="895.50"></text></g><g><title>join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}} (58 samples, 0.49%)</title><rect x="15.2500%" y="1093" width="0.4857%" height="15" fill="rgb(216,204,22)" fg:x="1821" fg:w="58"/><text x="15.5000%" y="1103.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices (52 samples, 0.44%)</title><rect x="15.3002%" y="1077" width="0.4355%" height="15" fill="rgb(214,17,3)" fg:x="1827" fg:w="52"/><text x="15.5502%" y="1087.50"></text></g><g><title>graph_store::graph_db_impl::IndexData&lt;G,I&gt;::get_internal_id (52 samples, 0.44%)</title><rect x="15.3002%" y="1061" width="0.4355%" height="15" fill="rgb(212,111,17)" fg:x="1827" fg:w="52"/><text x="15.5502%" y="1071.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (52 samples, 0.44%)</title><rect x="15.3002%" y="1045" width="0.4355%" height="15" fill="rgb(221,157,24)" fg:x="1827" fg:w="52"/><text x="15.5502%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (52 samples, 0.44%)</title><rect x="15.3002%" y="1029" width="0.4355%" height="15" fill="rgb(252,16,13)" fg:x="1827" fg:w="52"/><text x="15.5502%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (52 samples, 0.44%)</title><rect x="15.3002%" y="1013" width="0.4355%" height="15" fill="rgb(221,62,2)" fg:x="1827" fg:w="52"/><text x="15.5502%" y="1023.50"></text></g><g><title>hashbrown::map::make_hash (52 samples, 0.44%)</title><rect x="15.3002%" y="997" width="0.4355%" height="15" fill="rgb(247,87,22)" fg:x="1827" fg:w="52"/><text x="15.5502%" y="1007.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (21 samples, 0.18%)</title><rect x="15.5598%" y="981" width="0.1759%" height="15" fill="rgb(215,73,9)" fg:x="1858" fg:w="21"/><text x="15.8098%" y="991.50"></text></g><g><title>core::hash::Hasher::write_usize (21 samples, 0.18%)</title><rect x="15.5598%" y="965" width="0.1759%" height="15" fill="rgb(207,175,33)" fg:x="1858" fg:w="21"/><text x="15.8098%" y="975.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.18%)</title><rect x="15.5598%" y="949" width="0.1759%" height="15" fill="rgb(243,129,54)" fg:x="1858" fg:w="21"/><text x="15.8098%" y="959.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (21 samples, 0.18%)</title><rect x="15.5598%" y="933" width="0.1759%" height="15" fill="rgb(227,119,45)" fg:x="1858" fg:w="21"/><text x="15.8098%" y="943.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.18%)</title><rect x="15.5598%" y="917" width="0.1759%" height="15" fill="rgb(205,109,36)" fg:x="1858" fg:w="21"/><text x="15.8098%" y="927.50"></text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.04%)</title><rect x="15.6938%" y="901" width="0.0419%" height="15" fill="rgb(205,6,39)" fg:x="1874" fg:w="5"/><text x="15.9438%" y="911.50"></text></g><g><title>&lt;pegasus::config::ENABLE_CANCEL_CHILD as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="16.0791%" y="1029" width="0.0167%" height="15" fill="rgb(221,32,16)" fg:x="1920" fg:w="2"/><text x="16.3291%" y="1039.50"></text></g><g><title>&lt;pegasus::config::ENABLE_CANCEL_CHILD as core::ops::deref::Deref&gt;::deref::__stability (2 samples, 0.02%)</title><rect x="16.0791%" y="1013" width="0.0167%" height="15" fill="rgb(228,144,50)" fg:x="1920" fg:w="2"/><text x="16.3291%" y="1023.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="16.0791%" y="997" width="0.0167%" height="15" fill="rgb(229,201,53)" fg:x="1920" fg:w="2"/><text x="16.3291%" y="1007.50"></text></g><g><title>std::sync::once::Once::call_once (2 samples, 0.02%)</title><rect x="16.0791%" y="981" width="0.0167%" height="15" fill="rgb(249,153,27)" fg:x="1920" fg:w="2"/><text x="16.3291%" y="991.50"></text></g><g><title>std::sync::once::Once::is_completed (2 samples, 0.02%)</title><rect x="16.0791%" y="965" width="0.0167%" height="15" fill="rgb(227,106,25)" fg:x="1920" fg:w="2"/><text x="16.3291%" y="975.50"></text></g><g><title>&lt;pegasus::communication::output::output::rob::OutputHandle&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (15 samples, 0.13%)</title><rect x="15.9786%" y="1061" width="0.1256%" height="15" fill="rgb(230,65,29)" fg:x="1908" fg:w="15"/><text x="16.2286%" y="1071.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::is_canceled (7 samples, 0.06%)</title><rect x="16.0456%" y="1045" width="0.0586%" height="15" fill="rgb(221,57,46)" fg:x="1916" fg:w="7"/><text x="16.2956%" y="1055.50"></text></g><g><title>__GI___libc_free (9 samples, 0.08%)</title><rect x="16.1042%" y="1061" width="0.0754%" height="15" fill="rgb(229,161,17)" fg:x="1923" fg:w="9"/><text x="16.3542%" y="1071.50"></text></g><g><title>_int_free (71 samples, 0.59%)</title><rect x="16.1795%" y="1061" width="0.5946%" height="15" fill="rgb(222,213,11)" fg:x="1932" fg:w="71"/><text x="16.4295%" y="1071.50"></text></g><g><title>__GI___libc_free (16 samples, 0.13%)</title><rect x="16.7993%" y="917" width="0.1340%" height="15" fill="rgb(235,35,13)" fg:x="2006" fg:w="16"/><text x="17.0493%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter::Filter&lt;graph_store::utils::Iter&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt;,join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (45 samples, 0.38%)</title><rect x="16.7741%" y="1045" width="0.3769%" height="15" fill="rgb(233,158,34)" fg:x="2003" fg:w="45"/><text x="17.0241%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_store::utils::Iter&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt;&gt; (45 samples, 0.38%)</title><rect x="16.7741%" y="1029" width="0.3769%" height="15" fill="rgb(215,151,48)" fg:x="2003" fg:w="45"/><text x="17.0241%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::iter::traits::iterator::Iterator+Item = graph_store::graph_db::LocalVertex&lt;usize&gt;+core::marker::Send&gt;&gt; (45 samples, 0.38%)</title><rect x="16.7741%" y="1013" width="0.3769%" height="15" fill="rgb(229,84,14)" fg:x="2003" fg:w="45"/><text x="17.0241%" y="1023.50"></text></g><g><title>alloc::alloc::box_free (44 samples, 0.37%)</title><rect x="16.7825%" y="997" width="0.3685%" height="15" fill="rgb(229,68,14)" fg:x="2004" fg:w="44"/><text x="17.0325%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (44 samples, 0.37%)</title><rect x="16.7825%" y="981" width="0.3685%" height="15" fill="rgb(243,106,26)" fg:x="2004" fg:w="44"/><text x="17.0325%" y="991.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.35%)</title><rect x="16.7993%" y="965" width="0.3517%" height="15" fill="rgb(206,45,38)" fg:x="2006" fg:w="42"/><text x="17.0493%" y="975.50"></text></g><g><title>__rdl_dealloc (42 samples, 0.35%)</title><rect x="16.7993%" y="949" width="0.3517%" height="15" fill="rgb(226,6,15)" fg:x="2006" fg:w="42"/><text x="17.0493%" y="959.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (42 samples, 0.35%)</title><rect x="16.7993%" y="933" width="0.3517%" height="15" fill="rgb(232,22,54)" fg:x="2006" fg:w="42"/><text x="17.0493%" y="943.50"></text></g><g><title>_int_free (26 samples, 0.22%)</title><rect x="16.9333%" y="917" width="0.2177%" height="15" fill="rgb(229,222,32)" fg:x="2022" fg:w="26"/><text x="17.1833%" y="927.50"></text></g><g><title>tcache_put (5 samples, 0.04%)</title><rect x="17.1091%" y="901" width="0.0419%" height="15" fill="rgb(228,62,29)" fg:x="2043" fg:w="5"/><text x="17.3591%" y="911.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch_of (273 samples, 2.29%)</title><rect x="14.8815%" y="1125" width="2.2862%" height="15" fill="rgb(251,103,34)" fg:x="1777" fg:w="273"/><text x="15.1315%" y="1135.50">p..</text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (229 samples, 1.92%)</title><rect x="15.2500%" y="1109" width="1.9178%" height="15" fill="rgb(233,12,30)" fg:x="1821" fg:w="229"/><text x="15.5000%" y="1119.50">p..</text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (171 samples, 1.43%)</title><rect x="15.7357%" y="1093" width="1.4320%" height="15" fill="rgb(238,52,0)" fg:x="1879" fg:w="171"/><text x="15.9857%" y="1103.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::push_iter (142 samples, 1.19%)</title><rect x="15.9786%" y="1077" width="1.1892%" height="15" fill="rgb(223,98,5)" fg:x="1908" fg:w="142"/><text x="16.2286%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;graph_store::utils::Iter&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt;,join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;,join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (47 samples, 0.39%)</title><rect x="16.7741%" y="1061" width="0.3936%" height="15" fill="rgb(228,75,37)" fg:x="2003" fg:w="47"/><text x="17.0241%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt; (2 samples, 0.02%)</title><rect x="17.1510%" y="1045" width="0.0167%" height="15" fill="rgb(205,115,49)" fg:x="2048" fg:w="2"/><text x="17.4010%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (2 samples, 0.02%)</title><rect x="17.1510%" y="1029" width="0.0167%" height="15" fill="rgb(250,154,43)" fg:x="2048" fg:w="2"/><text x="17.4010%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (2 samples, 0.02%)</title><rect x="17.1510%" y="1013" width="0.0167%" height="15" fill="rgb(226,43,29)" fg:x="2048" fg:w="2"/><text x="17.4010%" y="1023.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="17.1510%" y="997" width="0.0167%" height="15" fill="rgb(249,228,39)" fg:x="2048" fg:w="2"/><text x="17.4010%" y="1007.50"></text></g><g><title>&lt;pegasus::worker::Worker&lt;D,T&gt; as pegasus_executor::Task&gt;::execute (280 samples, 2.34%)</title><rect x="14.8731%" y="1429" width="2.3449%" height="15" fill="rgb(216,79,43)" fg:x="1776" fg:w="280"/><text x="15.1231%" y="1439.50">&lt;..</text></g><g><title>pegasus::worker::WorkerTask::execute (280 samples, 2.34%)</title><rect x="14.8731%" y="1413" width="2.3449%" height="15" fill="rgb(228,95,12)" fg:x="1776" fg:w="280"/><text x="15.1231%" y="1423.50">p..</text></g><g><title>pegasus::schedule::Schedule::step (280 samples, 2.34%)</title><rect x="14.8731%" y="1397" width="2.3449%" height="15" fill="rgb(249,221,15)" fg:x="1776" fg:w="280"/><text x="15.1231%" y="1407.50">p..</text></g><g><title>&lt;pegasus::schedule::strategies::WaterfallStrategy as pegasus::schedule::StepStrategy&gt;::make_step (280 samples, 2.34%)</title><rect x="14.8731%" y="1381" width="2.3449%" height="15" fill="rgb(233,34,13)" fg:x="1776" fg:w="280"/><text x="15.1231%" y="1391.50">&lt;..</text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (280 samples, 2.34%)</title><rect x="14.8731%" y="1365" width="2.3449%" height="15" fill="rgb(214,103,39)" fg:x="1776" fg:w="280"/><text x="15.1231%" y="1375.50">p..</text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (280 samples, 2.34%)</title><rect x="14.8731%" y="1349" width="2.3449%" height="15" fill="rgb(251,126,39)" fg:x="1776" fg:w="280"/><text x="15.1231%" y="1359.50">p..</text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (280 samples, 2.34%)</title><rect x="14.8731%" y="1333" width="2.3449%" height="15" fill="rgb(214,216,36)" fg:x="1776" fg:w="280"/><text x="15.1231%" y="1343.50">p..</text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (279 samples, 2.34%)</title><rect x="14.8815%" y="1317" width="2.3365%" height="15" fill="rgb(220,221,8)" fg:x="1777" fg:w="279"/><text x="15.1315%" y="1327.50">p..</text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire (279 samples, 2.34%)</title><rect x="14.8815%" y="1301" width="2.3365%" height="15" fill="rgb(240,216,3)" fg:x="1777" fg:w="279"/><text x="15.1315%" y="1311.50">p..</text></g><g><title>pegasus::dataflow::Dataflow::try_fire (279 samples, 2.34%)</title><rect x="14.8815%" y="1285" width="2.3365%" height="15" fill="rgb(232,218,17)" fg:x="1777" fg:w="279"/><text x="15.1315%" y="1295.50">p..</text></g><g><title>pegasus::operator::Operator::fire (279 samples, 2.34%)</title><rect x="14.8815%" y="1269" width="2.3365%" height="15" fill="rgb(229,163,45)" fg:x="1777" fg:w="279"/><text x="15.1315%" y="1279.50">p..</text></g><g><title>pegasus::operator::Operator::fire_inner (279 samples, 2.34%)</title><rect x="14.8815%" y="1253" width="2.3365%" height="15" fill="rgb(231,110,42)" fg:x="1777" fg:w="279"/><text x="15.1315%" y="1263.50">p..</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (279 samples, 2.34%)</title><rect x="14.8815%" y="1237" width="2.3365%" height="15" fill="rgb(208,170,48)" fg:x="1777" fg:w="279"/><text x="15.1315%" y="1247.50">&lt;..</text></g><g><title>&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (279 samples, 2.34%)</title><rect x="14.8815%" y="1221" width="2.3365%" height="15" fill="rgb(239,116,25)" fg:x="1777" fg:w="279"/><text x="15.1315%" y="1231.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (279 samples, 2.34%)</title><rect x="14.8815%" y="1205" width="2.3365%" height="15" fill="rgb(219,200,50)" fg:x="1777" fg:w="279"/><text x="15.1315%" y="1215.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (279 samples, 2.34%)</title><rect x="14.8815%" y="1189" width="2.3365%" height="15" fill="rgb(245,200,0)" fg:x="1777" fg:w="279"/><text x="15.1315%" y="1199.50">&lt;..</text></g><g><title>&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive (279 samples, 2.34%)</title><rect x="14.8815%" y="1173" width="2.3365%" height="15" fill="rgb(245,119,33)" fg:x="1777" fg:w="279"/><text x="15.1315%" y="1183.50">&lt;..</text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}} (279 samples, 2.34%)</title><rect x="14.8815%" y="1157" width="2.3365%" height="15" fill="rgb(231,125,12)" fg:x="1777" fg:w="279"/><text x="15.1315%" y="1167.50">p..</text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch (279 samples, 2.34%)</title><rect x="14.8815%" y="1141" width="2.3365%" height="15" fill="rgb(216,96,41)" fg:x="1777" fg:w="279"/><text x="15.1315%" y="1151.50">p..</text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (6 samples, 0.05%)</title><rect x="17.1677%" y="1125" width="0.0502%" height="15" fill="rgb(248,43,45)" fg:x="2050" fg:w="6"/><text x="17.4177%" y="1135.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (5 samples, 0.04%)</title><rect x="17.1761%" y="1109" width="0.0419%" height="15" fill="rgb(217,222,7)" fg:x="2051" fg:w="5"/><text x="17.4261%" y="1119.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::push_iter (4 samples, 0.03%)</title><rect x="17.1845%" y="1093" width="0.0335%" height="15" fill="rgb(233,28,6)" fg:x="2052" fg:w="4"/><text x="17.4345%" y="1103.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="17.1929%" y="1077" width="0.0251%" height="15" fill="rgb(231,218,15)" fg:x="2053" fg:w="3"/><text x="17.4429%" y="1087.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch_of (2 samples, 0.02%)</title><rect x="17.2264%" y="1093" width="0.0167%" height="15" fill="rgb(226,171,48)" fg:x="2057" fg:w="2"/><text x="17.4764%" y="1103.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="17.2264%" y="1077" width="0.0167%" height="15" fill="rgb(235,201,9)" fg:x="2057" fg:w="2"/><text x="17.4764%" y="1087.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (2 samples, 0.02%)</title><rect x="17.2264%" y="1061" width="0.0167%" height="15" fill="rgb(217,80,15)" fg:x="2057" fg:w="2"/><text x="17.4764%" y="1071.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::push_iter (2 samples, 0.02%)</title><rect x="17.2264%" y="1045" width="0.0167%" height="15" fill="rgb(219,152,8)" fg:x="2057" fg:w="2"/><text x="17.4764%" y="1055.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="17.2264%" y="1029" width="0.0167%" height="15" fill="rgb(243,107,38)" fg:x="2057" fg:w="2"/><text x="17.4764%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="17.2264%" y="1205" width="0.0251%" height="15" fill="rgb(231,17,5)" fg:x="2057" fg:w="3"/><text x="17.4764%" y="1215.50"></text></g><g><title>&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="17.2264%" y="1189" width="0.0251%" height="15" fill="rgb(209,25,54)" fg:x="2057" fg:w="3"/><text x="17.4764%" y="1199.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="17.2264%" y="1173" width="0.0251%" height="15" fill="rgb(219,0,2)" fg:x="2057" fg:w="3"/><text x="17.4764%" y="1183.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="17.2264%" y="1157" width="0.0251%" height="15" fill="rgb(246,9,5)" fg:x="2057" fg:w="3"/><text x="17.4764%" y="1167.50"></text></g><g><title>&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="17.2264%" y="1141" width="0.0251%" height="15" fill="rgb(226,159,4)" fg:x="2057" fg:w="3"/><text x="17.4764%" y="1151.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}} (3 samples, 0.03%)</title><rect x="17.2264%" y="1125" width="0.0251%" height="15" fill="rgb(219,175,34)" fg:x="2057" fg:w="3"/><text x="17.4764%" y="1135.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch (3 samples, 0.03%)</title><rect x="17.2264%" y="1109" width="0.0251%" height="15" fill="rgb(236,10,46)" fg:x="2057" fg:w="3"/><text x="17.4764%" y="1119.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire (4 samples, 0.03%)</title><rect x="17.2264%" y="1269" width="0.0335%" height="15" fill="rgb(240,211,16)" fg:x="2057" fg:w="4"/><text x="17.4764%" y="1279.50"></text></g><g><title>pegasus::dataflow::Dataflow::try_fire (4 samples, 0.03%)</title><rect x="17.2264%" y="1253" width="0.0335%" height="15" fill="rgb(205,3,43)" fg:x="2057" fg:w="4"/><text x="17.4764%" y="1263.50"></text></g><g><title>pegasus::operator::Operator::fire (4 samples, 0.03%)</title><rect x="17.2264%" y="1237" width="0.0335%" height="15" fill="rgb(245,7,22)" fg:x="2057" fg:w="4"/><text x="17.4764%" y="1247.50"></text></g><g><title>pegasus::operator::Operator::fire_inner (4 samples, 0.03%)</title><rect x="17.2264%" y="1221" width="0.0335%" height="15" fill="rgb(239,132,32)" fg:x="2057" fg:w="4"/><text x="17.4764%" y="1231.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_read (4 samples, 0.03%)</title><rect x="17.3855%" y="997" width="0.0335%" height="15" fill="rgb(228,202,34)" fg:x="2076" fg:w="4"/><text x="17.6355%" y="1007.50"></text></g><g><title>core::ptr::read (4 samples, 0.03%)</title><rect x="17.3855%" y="981" width="0.0335%" height="15" fill="rgb(254,200,22)" fg:x="2076" fg:w="4"/><text x="17.6355%" y="991.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (4 samples, 0.03%)</title><rect x="17.4190%" y="997" width="0.0335%" height="15" fill="rgb(219,10,39)" fg:x="2080" fg:w="4"/><text x="17.6690%" y="1007.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.08%)</title><rect x="17.3855%" y="1045" width="0.0837%" height="15" fill="rgb(226,210,39)" fg:x="2076" fg:w="10"/><text x="17.6355%" y="1055.50"></text></g><g><title>&lt;pegasus_common::buffer::rob::Batch&lt;D&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.08%)</title><rect x="17.3855%" y="1029" width="0.0837%" height="15" fill="rgb(208,219,16)" fg:x="2076" fg:w="10"/><text x="17.6355%" y="1039.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (10 samples, 0.08%)</title><rect x="17.3855%" y="1013" width="0.0837%" height="15" fill="rgb(216,158,51)" fg:x="2076" fg:w="10"/><text x="17.6355%" y="1023.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (2 samples, 0.02%)</title><rect x="17.4525%" y="997" width="0.0167%" height="15" fill="rgb(233,14,44)" fg:x="2084" fg:w="2"/><text x="17.7025%" y="1007.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2 samples, 0.02%)</title><rect x="17.4525%" y="981" width="0.0167%" height="15" fill="rgb(237,97,39)" fg:x="2084" fg:w="2"/><text x="17.7025%" y="991.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="17.4692%" y="1045" width="0.0167%" height="15" fill="rgb(218,198,43)" fg:x="2086" fg:w="2"/><text x="17.7192%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="17.5948%" y="1013" width="0.0167%" height="15" fill="rgb(231,104,20)" fg:x="2101" fg:w="2"/><text x="17.8448%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.03%)</title><rect x="17.5948%" y="1029" width="0.0251%" height="15" fill="rgb(254,36,13)" fg:x="2101" fg:w="3"/><text x="17.8448%" y="1039.50"></text></g><g><title>&lt;graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt; as graph_store::graph_db::GlobalStoreTrait&lt;G,I&gt;&gt;::get_adj_vertices (3 samples, 0.03%)</title><rect x="17.6200%" y="1029" width="0.0251%" height="15" fill="rgb(248,14,50)" fg:x="2104" fg:w="3"/><text x="17.8700%" y="1039.50"></text></g><g><title>checked_request2size (3 samples, 0.03%)</title><rect x="17.7037%" y="917" width="0.0251%" height="15" fill="rgb(217,107,29)" fg:x="2114" fg:w="3"/><text x="17.9537%" y="927.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.12%)</title><rect x="17.6451%" y="1029" width="0.1172%" height="15" fill="rgb(251,169,33)" fg:x="2107" fg:w="14"/><text x="17.8951%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.12%)</title><rect x="17.6451%" y="1013" width="0.1172%" height="15" fill="rgb(217,108,32)" fg:x="2107" fg:w="14"/><text x="17.8951%" y="1023.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.12%)</title><rect x="17.6451%" y="997" width="0.1172%" height="15" fill="rgb(219,66,42)" fg:x="2107" fg:w="14"/><text x="17.8951%" y="1007.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.12%)</title><rect x="17.6451%" y="981" width="0.1172%" height="15" fill="rgb(206,180,7)" fg:x="2107" fg:w="14"/><text x="17.8951%" y="991.50"></text></g><g><title>__rdl_alloc (14 samples, 0.12%)</title><rect x="17.6451%" y="965" width="0.1172%" height="15" fill="rgb(208,226,31)" fg:x="2107" fg:w="14"/><text x="17.8951%" y="975.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14 samples, 0.12%)</title><rect x="17.6451%" y="949" width="0.1172%" height="15" fill="rgb(218,26,49)" fg:x="2107" fg:w="14"/><text x="17.8951%" y="959.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.10%)</title><rect x="17.6618%" y="933" width="0.1005%" height="15" fill="rgb(233,197,48)" fg:x="2109" fg:w="12"/><text x="17.9118%" y="943.50"></text></g><g><title>tcache_get (4 samples, 0.03%)</title><rect x="17.7288%" y="917" width="0.0335%" height="15" fill="rgb(252,181,51)" fg:x="2117" fg:w="4"/><text x="17.9788%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (3 samples, 0.03%)</title><rect x="17.7707%" y="1029" width="0.0251%" height="15" fill="rgb(253,90,19)" fg:x="2122" fg:w="3"/><text x="18.0207%" y="1039.50"></text></g><g><title>__GI___libc_free (9 samples, 0.08%)</title><rect x="17.8042%" y="917" width="0.0754%" height="15" fill="rgb(215,171,30)" fg:x="2126" fg:w="9"/><text x="18.0542%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (33 samples, 0.28%)</title><rect x="17.8042%" y="981" width="0.2764%" height="15" fill="rgb(214,222,9)" fg:x="2126" fg:w="33"/><text x="18.0542%" y="991.50"></text></g><g><title>alloc::alloc::dealloc (33 samples, 0.28%)</title><rect x="17.8042%" y="965" width="0.2764%" height="15" fill="rgb(223,3,22)" fg:x="2126" fg:w="33"/><text x="18.0542%" y="975.50"></text></g><g><title>__rdl_dealloc (33 samples, 0.28%)</title><rect x="17.8042%" y="949" width="0.2764%" height="15" fill="rgb(225,196,46)" fg:x="2126" fg:w="33"/><text x="18.0542%" y="959.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (33 samples, 0.28%)</title><rect x="17.8042%" y="933" width="0.2764%" height="15" fill="rgb(209,110,37)" fg:x="2126" fg:w="33"/><text x="18.0542%" y="943.50"></text></g><g><title>_int_free (24 samples, 0.20%)</title><rect x="17.8796%" y="917" width="0.2010%" height="15" fill="rgb(249,89,12)" fg:x="2135" fg:w="24"/><text x="18.1296%" y="927.50"></text></g><g><title>tcache_put (6 samples, 0.05%)</title><rect x="18.0303%" y="901" width="0.0502%" height="15" fill="rgb(226,27,33)" fg:x="2153" fg:w="6"/><text x="18.2803%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (37 samples, 0.31%)</title><rect x="17.7958%" y="1029" width="0.3099%" height="15" fill="rgb(213,82,22)" fg:x="2125" fg:w="37"/><text x="18.0458%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (37 samples, 0.31%)</title><rect x="17.7958%" y="1013" width="0.3099%" height="15" fill="rgb(248,140,0)" fg:x="2125" fg:w="37"/><text x="18.0458%" y="1023.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.31%)</title><rect x="17.7958%" y="997" width="0.3099%" height="15" fill="rgb(228,106,3)" fg:x="2125" fg:w="37"/><text x="18.0458%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.03%)</title><rect x="18.0806%" y="981" width="0.0251%" height="15" fill="rgb(209,23,37)" fg:x="2159" fg:w="3"/><text x="18.3306%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.08%)</title><rect x="18.3904%" y="901" width="0.0754%" height="15" fill="rgb(241,93,50)" fg:x="2196" fg:w="9"/><text x="18.6404%" y="911.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.08%)</title><rect x="18.3904%" y="885" width="0.0754%" height="15" fill="rgb(253,46,43)" fg:x="2196" fg:w="9"/><text x="18.6404%" y="895.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 0.07%)</title><rect x="18.3988%" y="869" width="0.0670%" height="15" fill="rgb(226,206,43)" fg:x="2197" fg:w="8"/><text x="18.6488%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.13%)</title><rect x="18.3904%" y="917" width="0.1256%" height="15" fill="rgb(217,54,7)" fg:x="2196" fg:w="15"/><text x="18.6404%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (6 samples, 0.05%)</title><rect x="18.4658%" y="901" width="0.0502%" height="15" fill="rgb(223,5,52)" fg:x="2205" fg:w="6"/><text x="18.7158%" y="911.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (6 samples, 0.05%)</title><rect x="18.4658%" y="885" width="0.0502%" height="15" fill="rgb(206,52,46)" fg:x="2205" fg:w="6"/><text x="18.7158%" y="895.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (6 samples, 0.05%)</title><rect x="18.4658%" y="869" width="0.0502%" height="15" fill="rgb(253,136,11)" fg:x="2205" fg:w="6"/><text x="18.7158%" y="879.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.04%)</title><rect x="18.5244%" y="869" width="0.0419%" height="15" fill="rgb(208,106,33)" fg:x="2212" fg:w="5"/><text x="18.7744%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.04%)</title><rect x="18.5244%" y="853" width="0.0419%" height="15" fill="rgb(206,54,4)" fg:x="2212" fg:w="5"/><text x="18.7744%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.04%)</title><rect x="18.5244%" y="837" width="0.0419%" height="15" fill="rgb(213,3,15)" fg:x="2212" fg:w="5"/><text x="18.7744%" y="847.50"></text></g><g><title>graph_store::graph_db_impl::IndexData&lt;G,I&gt;::get_internal_id (53 samples, 0.44%)</title><rect x="18.1308%" y="1013" width="0.4438%" height="15" fill="rgb(252,211,39)" fg:x="2165" fg:w="53"/><text x="18.3808%" y="1023.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (45 samples, 0.38%)</title><rect x="18.1978%" y="997" width="0.3769%" height="15" fill="rgb(223,6,36)" fg:x="2173" fg:w="45"/><text x="18.4478%" y="1007.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (45 samples, 0.38%)</title><rect x="18.1978%" y="981" width="0.3769%" height="15" fill="rgb(252,169,45)" fg:x="2173" fg:w="45"/><text x="18.4478%" y="991.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (45 samples, 0.38%)</title><rect x="18.1978%" y="965" width="0.3769%" height="15" fill="rgb(212,48,26)" fg:x="2173" fg:w="45"/><text x="18.4478%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (44 samples, 0.37%)</title><rect x="18.2062%" y="949" width="0.3685%" height="15" fill="rgb(251,102,48)" fg:x="2174" fg:w="44"/><text x="18.4562%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (44 samples, 0.37%)</title><rect x="18.2062%" y="933" width="0.3685%" height="15" fill="rgb(243,208,16)" fg:x="2174" fg:w="44"/><text x="18.4562%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (7 samples, 0.06%)</title><rect x="18.5160%" y="917" width="0.0586%" height="15" fill="rgb(219,96,24)" fg:x="2211" fg:w="7"/><text x="18.7660%" y="927.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (7 samples, 0.06%)</title><rect x="18.5160%" y="901" width="0.0586%" height="15" fill="rgb(219,33,29)" fg:x="2211" fg:w="7"/><text x="18.7660%" y="911.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (7 samples, 0.06%)</title><rect x="18.5160%" y="885" width="0.0586%" height="15" fill="rgb(223,176,5)" fg:x="2211" fg:w="7"/><text x="18.7660%" y="895.50"></text></g><g><title>checked_request2size (5 samples, 0.04%)</title><rect x="18.7505%" y="869" width="0.0419%" height="15" fill="rgb(228,140,14)" fg:x="2239" fg:w="5"/><text x="19.0005%" y="879.50"></text></g><g><title>graph_store::utils::Iter&lt;T&gt;::from_iter (28 samples, 0.23%)</title><rect x="18.5747%" y="1013" width="0.2345%" height="15" fill="rgb(217,179,31)" fg:x="2218" fg:w="28"/><text x="18.8247%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (28 samples, 0.23%)</title><rect x="18.5747%" y="997" width="0.2345%" height="15" fill="rgb(230,9,30)" fg:x="2218" fg:w="28"/><text x="18.8247%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.20%)</title><rect x="18.6082%" y="981" width="0.2010%" height="15" fill="rgb(230,136,20)" fg:x="2222" fg:w="24"/><text x="18.8582%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.20%)</title><rect x="18.6082%" y="965" width="0.2010%" height="15" fill="rgb(215,210,22)" fg:x="2222" fg:w="24"/><text x="18.8582%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.20%)</title><rect x="18.6082%" y="949" width="0.2010%" height="15" fill="rgb(218,43,5)" fg:x="2222" fg:w="24"/><text x="18.8582%" y="959.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.17%)</title><rect x="18.6417%" y="933" width="0.1675%" height="15" fill="rgb(216,11,5)" fg:x="2226" fg:w="20"/><text x="18.8917%" y="943.50"></text></g><g><title>__rdl_alloc (20 samples, 0.17%)</title><rect x="18.6417%" y="917" width="0.1675%" height="15" fill="rgb(209,82,29)" fg:x="2226" fg:w="20"/><text x="18.8917%" y="927.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.17%)</title><rect x="18.6417%" y="901" width="0.1675%" height="15" fill="rgb(244,115,12)" fg:x="2226" fg:w="20"/><text x="18.8917%" y="911.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.16%)</title><rect x="18.6500%" y="885" width="0.1591%" height="15" fill="rgb(222,82,18)" fg:x="2227" fg:w="19"/><text x="18.9000%" y="895.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="18.7924%" y="869" width="0.0167%" height="15" fill="rgb(249,227,8)" fg:x="2244" fg:w="2"/><text x="19.0424%" y="879.50"></text></g><g><title>join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}} (173 samples, 1.45%)</title><rect x="17.4943%" y="1045" width="1.4488%" height="15" fill="rgb(253,141,45)" fg:x="2089" fg:w="173"/><text x="17.7443%" y="1055.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices (100 samples, 0.84%)</title><rect x="18.1057%" y="1029" width="0.8375%" height="15" fill="rgb(234,184,4)" fg:x="2162" fg:w="100"/><text x="18.3557%" y="1039.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (16 samples, 0.13%)</title><rect x="18.8091%" y="1013" width="0.1340%" height="15" fill="rgb(218,194,23)" fg:x="2246" fg:w="16"/><text x="19.0591%" y="1023.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch_of (204 samples, 1.71%)</title><rect x="17.2599%" y="1077" width="1.7084%" height="15" fill="rgb(235,66,41)" fg:x="2061" fg:w="204"/><text x="17.5099%" y="1087.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (204 samples, 1.71%)</title><rect x="17.2599%" y="1061" width="1.7084%" height="15" fill="rgb(245,217,1)" fg:x="2061" fg:w="204"/><text x="17.5099%" y="1071.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (3 samples, 0.03%)</title><rect x="18.9431%" y="1045" width="0.0251%" height="15" fill="rgb(229,91,1)" fg:x="2262" fg:w="3"/><text x="19.1931%" y="1055.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire (207 samples, 1.73%)</title><rect x="17.2599%" y="1253" width="1.7335%" height="15" fill="rgb(207,101,30)" fg:x="2061" fg:w="207"/><text x="17.5099%" y="1263.50"></text></g><g><title>pegasus::dataflow::Dataflow::try_fire (207 samples, 1.73%)</title><rect x="17.2599%" y="1237" width="1.7335%" height="15" fill="rgb(223,82,49)" fg:x="2061" fg:w="207"/><text x="17.5099%" y="1247.50"></text></g><g><title>pegasus::operator::Operator::fire (207 samples, 1.73%)</title><rect x="17.2599%" y="1221" width="1.7335%" height="15" fill="rgb(218,167,17)" fg:x="2061" fg:w="207"/><text x="17.5099%" y="1231.50"></text></g><g><title>pegasus::operator::Operator::fire_inner (207 samples, 1.73%)</title><rect x="17.2599%" y="1205" width="1.7335%" height="15" fill="rgb(208,103,14)" fg:x="2061" fg:w="207"/><text x="17.5099%" y="1215.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (207 samples, 1.73%)</title><rect x="17.2599%" y="1189" width="1.7335%" height="15" fill="rgb(238,20,8)" fg:x="2061" fg:w="207"/><text x="17.5099%" y="1199.50"></text></g><g><title>&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (207 samples, 1.73%)</title><rect x="17.2599%" y="1173" width="1.7335%" height="15" fill="rgb(218,80,54)" fg:x="2061" fg:w="207"/><text x="17.5099%" y="1183.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (207 samples, 1.73%)</title><rect x="17.2599%" y="1157" width="1.7335%" height="15" fill="rgb(240,144,17)" fg:x="2061" fg:w="207"/><text x="17.5099%" y="1167.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (207 samples, 1.73%)</title><rect x="17.2599%" y="1141" width="1.7335%" height="15" fill="rgb(245,27,50)" fg:x="2061" fg:w="207"/><text x="17.5099%" y="1151.50"></text></g><g><title>&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive (207 samples, 1.73%)</title><rect x="17.2599%" y="1125" width="1.7335%" height="15" fill="rgb(251,51,7)" fg:x="2061" fg:w="207"/><text x="17.5099%" y="1135.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}} (207 samples, 1.73%)</title><rect x="17.2599%" y="1109" width="1.7335%" height="15" fill="rgb(245,217,29)" fg:x="2061" fg:w="207"/><text x="17.5099%" y="1119.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch (207 samples, 1.73%)</title><rect x="17.2599%" y="1093" width="1.7335%" height="15" fill="rgb(221,176,29)" fg:x="2061" fg:w="207"/><text x="17.5099%" y="1103.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (3 samples, 0.03%)</title><rect x="18.9683%" y="1077" width="0.0251%" height="15" fill="rgb(212,180,24)" fg:x="2265" fg:w="3"/><text x="19.2183%" y="1087.50"></text></g><g><title>join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="18.9766%" y="1061" width="0.0167%" height="15" fill="rgb(254,24,2)" fg:x="2266" fg:w="2"/><text x="19.2266%" y="1071.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (212 samples, 1.78%)</title><rect x="17.2264%" y="1429" width="1.7754%" height="15" fill="rgb(230,100,2)" fg:x="2057" fg:w="212"/><text x="17.4764%" y="1439.50">&lt;..</text></g><g><title>pegasus_executor::reactor::do_user_task::{{closure}} (212 samples, 1.78%)</title><rect x="17.2264%" y="1413" width="1.7754%" height="15" fill="rgb(219,142,25)" fg:x="2057" fg:w="212"/><text x="17.4764%" y="1423.50">p..</text></g><g><title>&lt;pegasus_executor::GeneralTask as pegasus_executor::Task&gt;::execute (212 samples, 1.78%)</title><rect x="17.2264%" y="1397" width="1.7754%" height="15" fill="rgb(240,73,43)" fg:x="2057" fg:w="212"/><text x="17.4764%" y="1407.50">&lt;..</text></g><g><title>&lt;pegasus::worker::Worker&lt;D,T&gt; as pegasus_executor::Task&gt;::execute (212 samples, 1.78%)</title><rect x="17.2264%" y="1381" width="1.7754%" height="15" fill="rgb(214,114,15)" fg:x="2057" fg:w="212"/><text x="17.4764%" y="1391.50">&lt;..</text></g><g><title>pegasus::worker::WorkerTask::execute (212 samples, 1.78%)</title><rect x="17.2264%" y="1365" width="1.7754%" height="15" fill="rgb(207,130,4)" fg:x="2057" fg:w="212"/><text x="17.4764%" y="1375.50">p..</text></g><g><title>pegasus::schedule::Schedule::step (212 samples, 1.78%)</title><rect x="17.2264%" y="1349" width="1.7754%" height="15" fill="rgb(221,25,40)" fg:x="2057" fg:w="212"/><text x="17.4764%" y="1359.50">p..</text></g><g><title>&lt;pegasus::schedule::strategies::WaterfallStrategy as pegasus::schedule::StepStrategy&gt;::make_step (212 samples, 1.78%)</title><rect x="17.2264%" y="1333" width="1.7754%" height="15" fill="rgb(241,184,7)" fg:x="2057" fg:w="212"/><text x="17.4764%" y="1343.50">&lt;..</text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (212 samples, 1.78%)</title><rect x="17.2264%" y="1317" width="1.7754%" height="15" fill="rgb(235,159,4)" fg:x="2057" fg:w="212"/><text x="17.4764%" y="1327.50">p..</text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (212 samples, 1.78%)</title><rect x="17.2264%" y="1301" width="1.7754%" height="15" fill="rgb(214,87,48)" fg:x="2057" fg:w="212"/><text x="17.4764%" y="1311.50">p..</text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (212 samples, 1.78%)</title><rect x="17.2264%" y="1285" width="1.7754%" height="15" fill="rgb(246,198,24)" fg:x="2057" fg:w="212"/><text x="17.4764%" y="1295.50">p..</text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (208 samples, 1.74%)</title><rect x="17.2599%" y="1269" width="1.7419%" height="15" fill="rgb(209,66,40)" fg:x="2061" fg:w="208"/><text x="17.5099%" y="1279.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.04%)</title><rect x="19.0101%" y="1429" width="0.0419%" height="15" fill="rgb(233,147,39)" fg:x="2270" fg:w="5"/><text x="19.2601%" y="1439.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.03%)</title><rect x="19.0520%" y="1429" width="0.0251%" height="15" fill="rgb(231,145,52)" fg:x="2275" fg:w="3"/><text x="19.3020%" y="1439.50"></text></g><g><title>_int_free (17 samples, 0.14%)</title><rect x="19.0771%" y="1429" width="0.1424%" height="15" fill="rgb(206,20,26)" fg:x="2278" fg:w="17"/><text x="19.3271%" y="1439.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="19.2195%" y="1429" width="0.0251%" height="15" fill="rgb(238,220,4)" fg:x="2295" fg:w="3"/><text x="19.4695%" y="1439.50"></text></g><g><title>_int_realloc (10 samples, 0.08%)</title><rect x="19.2446%" y="1429" width="0.0837%" height="15" fill="rgb(252,195,42)" fg:x="2298" fg:w="10"/><text x="19.4946%" y="1439.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="19.3284%" y="1429" width="0.0251%" height="15" fill="rgb(209,10,6)" fg:x="2308" fg:w="3"/><text x="19.5784%" y="1439.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.03%)</title><rect x="19.3284%" y="1413" width="0.0251%" height="15" fill="rgb(229,3,52)" fg:x="2308" fg:w="3"/><text x="19.5784%" y="1423.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.02%)</title><rect x="19.3367%" y="1397" width="0.0167%" height="15" fill="rgb(253,49,37)" fg:x="2309" fg:w="2"/><text x="19.5867%" y="1407.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.02%)</title><rect x="19.3367%" y="1381" width="0.0167%" height="15" fill="rgb(240,103,49)" fg:x="2309" fg:w="2"/><text x="19.5867%" y="1391.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.08%)</title><rect x="19.3535%" y="1429" width="0.0754%" height="15" fill="rgb(250,182,30)" fg:x="2311" fg:w="9"/><text x="19.6035%" y="1439.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch_of (2 samples, 0.02%)</title><rect x="19.4289%" y="885" width="0.0167%" height="15" fill="rgb(248,8,30)" fg:x="2320" fg:w="2"/><text x="19.6789%" y="895.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="19.4289%" y="869" width="0.0167%" height="15" fill="rgb(237,120,30)" fg:x="2320" fg:w="2"/><text x="19.6789%" y="879.50"></text></g><g><title>join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="19.4289%" y="853" width="0.0167%" height="15" fill="rgb(221,146,34)" fg:x="2320" fg:w="2"/><text x="19.6789%" y="863.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices (2 samples, 0.02%)</title><rect x="19.4289%" y="837" width="0.0167%" height="15" fill="rgb(242,55,13)" fg:x="2320" fg:w="2"/><text x="19.6789%" y="847.50"></text></g><g><title>graph_store::graph_db_impl::IndexData&lt;G,I&gt;::get_internal_id (2 samples, 0.02%)</title><rect x="19.4289%" y="821" width="0.0167%" height="15" fill="rgb(242,112,31)" fg:x="2320" fg:w="2"/><text x="19.6789%" y="831.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.02%)</title><rect x="19.4289%" y="805" width="0.0167%" height="15" fill="rgb(249,192,27)" fg:x="2320" fg:w="2"/><text x="19.6789%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.02%)</title><rect x="19.4289%" y="789" width="0.0167%" height="15" fill="rgb(208,204,44)" fg:x="2320" fg:w="2"/><text x="19.6789%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.02%)</title><rect x="19.4289%" y="773" width="0.0167%" height="15" fill="rgb(208,93,54)" fg:x="2320" fg:w="2"/><text x="19.6789%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.02%)</title><rect x="19.4289%" y="757" width="0.0167%" height="15" fill="rgb(242,1,31)" fg:x="2320" fg:w="2"/><text x="19.6789%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="19.4289%" y="741" width="0.0167%" height="15" fill="rgb(241,83,25)" fg:x="2320" fg:w="2"/><text x="19.6789%" y="751.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (3 samples, 0.03%)</title><rect x="19.4289%" y="1429" width="0.0251%" height="15" fill="rgb(205,169,50)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1439.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (3 samples, 0.03%)</title><rect x="19.4289%" y="1413" width="0.0251%" height="15" fill="rgb(239,186,37)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1423.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.03%)</title><rect x="19.4289%" y="1397" width="0.0251%" height="15" fill="rgb(205,221,10)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1407.50"></text></g><g><title>std::panicking::try (3 samples, 0.03%)</title><rect x="19.4289%" y="1381" width="0.0251%" height="15" fill="rgb(218,196,15)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1391.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.03%)</title><rect x="19.4289%" y="1365" width="0.0251%" height="15" fill="rgb(218,196,35)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1375.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.03%)</title><rect x="19.4289%" y="1349" width="0.0251%" height="15" fill="rgb(233,63,24)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1359.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (3 samples, 0.03%)</title><rect x="19.4289%" y="1333" width="0.0251%" height="15" fill="rgb(225,8,4)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1343.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.03%)</title><rect x="19.4289%" y="1317" width="0.0251%" height="15" fill="rgb(234,105,35)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1327.50"></text></g><g><title>pegasus_executor::reactor::ExecutorRuntime::fork_new_thread::{{closure}} (3 samples, 0.03%)</title><rect x="19.4289%" y="1301" width="0.0251%" height="15" fill="rgb(236,21,32)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1311.50"></text></g><g><title>pegasus_executor::reactor::do_user_task (3 samples, 0.03%)</title><rect x="19.4289%" y="1285" width="0.0251%" height="15" fill="rgb(228,109,6)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1295.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.03%)</title><rect x="19.4289%" y="1269" width="0.0251%" height="15" fill="rgb(229,215,31)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1279.50"></text></g><g><title>std::panicking::try (3 samples, 0.03%)</title><rect x="19.4289%" y="1253" width="0.0251%" height="15" fill="rgb(221,52,54)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1263.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.03%)</title><rect x="19.4289%" y="1237" width="0.0251%" height="15" fill="rgb(252,129,43)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1247.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.03%)</title><rect x="19.4289%" y="1221" width="0.0251%" height="15" fill="rgb(248,183,27)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1231.50"></text></g><g><title>pegasus_executor::reactor::do_user_task::{{closure}} (3 samples, 0.03%)</title><rect x="19.4289%" y="1205" width="0.0251%" height="15" fill="rgb(250,0,22)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1215.50"></text></g><g><title>&lt;pegasus_executor::GeneralTask as pegasus_executor::Task&gt;::execute (3 samples, 0.03%)</title><rect x="19.4289%" y="1189" width="0.0251%" height="15" fill="rgb(213,166,10)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1199.50"></text></g><g><title>&lt;pegasus::worker::Worker&lt;D,T&gt; as pegasus_executor::Task&gt;::execute (3 samples, 0.03%)</title><rect x="19.4289%" y="1173" width="0.0251%" height="15" fill="rgb(207,163,36)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1183.50"></text></g><g><title>pegasus::worker::WorkerTask::execute (3 samples, 0.03%)</title><rect x="19.4289%" y="1157" width="0.0251%" height="15" fill="rgb(208,122,22)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1167.50"></text></g><g><title>pegasus::schedule::Schedule::step (3 samples, 0.03%)</title><rect x="19.4289%" y="1141" width="0.0251%" height="15" fill="rgb(207,104,49)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1151.50"></text></g><g><title>&lt;pegasus::schedule::strategies::WaterfallStrategy as pegasus::schedule::StepStrategy&gt;::make_step (3 samples, 0.03%)</title><rect x="19.4289%" y="1125" width="0.0251%" height="15" fill="rgb(248,211,50)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1135.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (3 samples, 0.03%)</title><rect x="19.4289%" y="1109" width="0.0251%" height="15" fill="rgb(217,13,45)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1119.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (3 samples, 0.03%)</title><rect x="19.4289%" y="1093" width="0.0251%" height="15" fill="rgb(211,216,49)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1103.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (3 samples, 0.03%)</title><rect x="19.4289%" y="1077" width="0.0251%" height="15" fill="rgb(221,58,53)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1087.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire (3 samples, 0.03%)</title><rect x="19.4289%" y="1061" width="0.0251%" height="15" fill="rgb(220,112,41)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1071.50"></text></g><g><title>pegasus::dataflow::Dataflow::try_fire (3 samples, 0.03%)</title><rect x="19.4289%" y="1045" width="0.0251%" height="15" fill="rgb(236,38,28)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1055.50"></text></g><g><title>pegasus::operator::Operator::fire (3 samples, 0.03%)</title><rect x="19.4289%" y="1029" width="0.0251%" height="15" fill="rgb(227,195,22)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1039.50"></text></g><g><title>pegasus::operator::Operator::fire_inner (3 samples, 0.03%)</title><rect x="19.4289%" y="1013" width="0.0251%" height="15" fill="rgb(214,55,33)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="19.4289%" y="997" width="0.0251%" height="15" fill="rgb(248,80,13)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="1007.50"></text></g><g><title>&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="19.4289%" y="981" width="0.0251%" height="15" fill="rgb(238,52,6)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="991.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="19.4289%" y="965" width="0.0251%" height="15" fill="rgb(224,198,47)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="975.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="19.4289%" y="949" width="0.0251%" height="15" fill="rgb(233,171,20)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="959.50"></text></g><g><title>&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="19.4289%" y="933" width="0.0251%" height="15" fill="rgb(241,30,25)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="943.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}} (3 samples, 0.03%)</title><rect x="19.4289%" y="917" width="0.0251%" height="15" fill="rgb(207,171,38)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="927.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch (3 samples, 0.03%)</title><rect x="19.4289%" y="901" width="0.0251%" height="15" fill="rgb(234,70,1)" fg:x="2320" fg:w="3"/><text x="19.6789%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt; (98 samples, 0.82%)</title><rect x="19.4540%" y="1429" width="0.8207%" height="15" fill="rgb(232,178,18)" fg:x="2323" fg:w="98"/><text x="19.7040%" y="1439.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices (2 samples, 0.02%)</title><rect x="20.2747%" y="1429" width="0.0167%" height="15" fill="rgb(241,78,40)" fg:x="2421" fg:w="2"/><text x="20.5247%" y="1439.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::index_to_local_vertex (234 samples, 1.96%)</title><rect x="20.2914%" y="1429" width="1.9596%" height="15" fill="rgb(222,35,25)" fg:x="2423" fg:w="234"/><text x="20.5414%" y="1439.50">g..</text></g><g><title>pegasus::api::scope::MergedScopeDelta::evolve (8 samples, 0.07%)</title><rect x="22.2511%" y="1429" width="0.0670%" height="15" fill="rgb(207,92,16)" fg:x="2657" fg:w="8"/><text x="22.5011%" y="1439.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (9 samples, 0.08%)</title><rect x="22.3264%" y="1429" width="0.0754%" height="15" fill="rgb(216,59,51)" fg:x="2666" fg:w="9"/><text x="22.5764%" y="1439.50"></text></g><g><title>pegasus::communication::output::tee::ChannelCancelPtr::is_canceled (7 samples, 0.06%)</title><rect x="22.4018%" y="1429" width="0.0586%" height="15" fill="rgb(213,80,28)" fg:x="2675" fg:w="7"/><text x="22.6518%" y="1439.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="22.4688%" y="1397" width="0.0167%" height="15" fill="rgb(220,93,7)" fg:x="2683" fg:w="2"/><text x="22.7188%" y="1407.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="22.4688%" y="1381" width="0.0167%" height="15" fill="rgb(225,24,44)" fg:x="2683" fg:w="2"/><text x="22.7188%" y="1391.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="22.4688%" y="1365" width="0.0167%" height="15" fill="rgb(243,74,40)" fg:x="2683" fg:w="2"/><text x="22.7188%" y="1375.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="22.4688%" y="1349" width="0.0167%" height="15" fill="rgb(228,39,7)" fg:x="2683" fg:w="2"/><text x="22.7188%" y="1359.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="22.4688%" y="1333" width="0.0167%" height="15" fill="rgb(227,79,8)" fg:x="2683" fg:w="2"/><text x="22.7188%" y="1343.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="22.4688%" y="1317" width="0.0167%" height="15" fill="rgb(236,58,11)" fg:x="2683" fg:w="2"/><text x="22.7188%" y="1327.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (5 samples, 0.04%)</title><rect x="22.4688%" y="1429" width="0.0419%" height="15" fill="rgb(249,63,35)" fg:x="2683" fg:w="5"/><text x="22.7188%" y="1439.50"></text></g><g><title>join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}} (5 samples, 0.04%)</title><rect x="22.4688%" y="1413" width="0.0419%" height="15" fill="rgb(252,114,16)" fg:x="2683" fg:w="5"/><text x="22.7188%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="22.4856%" y="1397" width="0.0251%" height="15" fill="rgb(254,151,24)" fg:x="2685" fg:w="3"/><text x="22.7356%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="22.4856%" y="1381" width="0.0251%" height="15" fill="rgb(253,54,39)" fg:x="2685" fg:w="3"/><text x="22.7356%" y="1391.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="22.4856%" y="1365" width="0.0251%" height="15" fill="rgb(243,25,45)" fg:x="2685" fg:w="3"/><text x="22.7356%" y="1375.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="22.4856%" y="1349" width="0.0251%" height="15" fill="rgb(234,134,9)" fg:x="2685" fg:w="3"/><text x="22.7356%" y="1359.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="22.4856%" y="1333" width="0.0251%" height="15" fill="rgb(227,166,31)" fg:x="2685" fg:w="3"/><text x="22.7356%" y="1343.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.03%)</title><rect x="22.4856%" y="1317" width="0.0251%" height="15" fill="rgb(245,143,41)" fg:x="2685" fg:w="3"/><text x="22.7356%" y="1327.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.03%)</title><rect x="22.4856%" y="1301" width="0.0251%" height="15" fill="rgb(238,181,32)" fg:x="2685" fg:w="3"/><text x="22.7356%" y="1311.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch_of (2 samples, 0.02%)</title><rect x="22.5107%" y="1141" width="0.0167%" height="15" fill="rgb(224,113,18)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="1151.50"></text></g><g><title>pegasus::operator::concise::count::&lt;impl pegasus::api::concise::count::Count&lt;D&gt; for pegasus::stream::Stream&lt;D&gt;&gt;::count::{{closure}}::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="22.5107%" y="1125" width="0.0167%" height="15" fill="rgb(240,229,28)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="1135.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::clear (2 samples, 0.02%)</title><rect x="22.5107%" y="1109" width="0.0167%" height="15" fill="rgb(250,185,3)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="1119.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="22.5107%" y="1093" width="0.0167%" height="15" fill="rgb(212,59,25)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="1103.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::clear::{{closure}} (2 samples, 0.02%)</title><rect x="22.5107%" y="1077" width="0.0167%" height="15" fill="rgb(221,87,20)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="1087.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::clear (2 samples, 0.02%)</title><rect x="22.5107%" y="1061" width="0.0167%" height="15" fill="rgb(213,74,28)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="1071.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::truncate (2 samples, 0.02%)</title><rect x="22.5107%" y="1045" width="0.0167%" height="15" fill="rgb(224,132,34)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u64&gt;]&gt; (2 samples, 0.02%)</title><rect x="22.5107%" y="1029" width="0.0167%" height="15" fill="rgb(222,101,24)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (2 samples, 0.02%)</title><rect x="22.5107%" y="1013" width="0.0167%" height="15" fill="rgb(254,142,4)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (2 samples, 0.02%)</title><rect x="22.5107%" y="997" width="0.0167%" height="15" fill="rgb(230,229,49)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="22.5107%" y="981" width="0.0167%" height="15" fill="rgb(238,70,47)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="22.5107%" y="965" width="0.0167%" height="15" fill="rgb(231,160,17)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="975.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="22.5107%" y="949" width="0.0167%" height="15" fill="rgb(218,68,53)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="959.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="22.5107%" y="933" width="0.0167%" height="15" fill="rgb(236,111,10)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="943.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="22.5107%" y="917" width="0.0167%" height="15" fill="rgb(224,34,41)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="927.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="22.5107%" y="901" width="0.0167%" height="15" fill="rgb(241,118,19)" fg:x="2688" fg:w="2"/><text x="22.7607%" y="911.50"></text></g><g><title>pegasus::schedule::Schedule::step (4 samples, 0.03%)</title><rect x="22.5107%" y="1429" width="0.0335%" height="15" fill="rgb(238,129,25)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1439.50"></text></g><g><title>&lt;pegasus::schedule::strategies::WaterfallStrategy as pegasus::schedule::StepStrategy&gt;::make_step (4 samples, 0.03%)</title><rect x="22.5107%" y="1413" width="0.0335%" height="15" fill="rgb(238,22,31)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1423.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (4 samples, 0.03%)</title><rect x="22.5107%" y="1397" width="0.0335%" height="15" fill="rgb(222,174,48)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1407.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (4 samples, 0.03%)</title><rect x="22.5107%" y="1381" width="0.0335%" height="15" fill="rgb(206,152,40)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1391.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (4 samples, 0.03%)</title><rect x="22.5107%" y="1365" width="0.0335%" height="15" fill="rgb(218,99,54)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1375.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (4 samples, 0.03%)</title><rect x="22.5107%" y="1349" width="0.0335%" height="15" fill="rgb(220,174,26)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1359.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (4 samples, 0.03%)</title><rect x="22.5107%" y="1333" width="0.0335%" height="15" fill="rgb(245,116,9)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1343.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire (4 samples, 0.03%)</title><rect x="22.5107%" y="1317" width="0.0335%" height="15" fill="rgb(209,72,35)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1327.50"></text></g><g><title>pegasus::dataflow::Dataflow::try_fire (4 samples, 0.03%)</title><rect x="22.5107%" y="1301" width="0.0335%" height="15" fill="rgb(226,126,21)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1311.50"></text></g><g><title>pegasus::operator::Operator::fire (4 samples, 0.03%)</title><rect x="22.5107%" y="1285" width="0.0335%" height="15" fill="rgb(227,192,1)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1295.50"></text></g><g><title>pegasus::operator::Operator::fire_inner (4 samples, 0.03%)</title><rect x="22.5107%" y="1269" width="0.0335%" height="15" fill="rgb(237,180,29)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1279.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (4 samples, 0.03%)</title><rect x="22.5107%" y="1253" width="0.0335%" height="15" fill="rgb(230,197,35)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1263.50"></text></g><g><title>&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (4 samples, 0.03%)</title><rect x="22.5107%" y="1237" width="0.0335%" height="15" fill="rgb(246,193,31)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1247.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (4 samples, 0.03%)</title><rect x="22.5107%" y="1221" width="0.0335%" height="15" fill="rgb(241,36,4)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1231.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (4 samples, 0.03%)</title><rect x="22.5107%" y="1205" width="0.0335%" height="15" fill="rgb(241,130,17)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1215.50"></text></g><g><title>&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive (4 samples, 0.03%)</title><rect x="22.5107%" y="1189" width="0.0335%" height="15" fill="rgb(206,137,32)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1199.50"></text></g><g><title>pegasus::operator::concise::count::&lt;impl pegasus::api::concise::count::Count&lt;D&gt; for pegasus::stream::Stream&lt;D&gt;&gt;::count::{{closure}}::{{closure}} (4 samples, 0.03%)</title><rect x="22.5107%" y="1173" width="0.0335%" height="15" fill="rgb(237,228,51)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1183.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch (4 samples, 0.03%)</title><rect x="22.5107%" y="1157" width="0.0335%" height="15" fill="rgb(243,6,42)" fg:x="2688" fg:w="4"/><text x="22.7607%" y="1167.50"></text></g><g><title>pegasus::operator::concise::count::&lt;impl pegasus::api::concise::count::Count&lt;D&gt; for pegasus::stream::Stream&lt;D&gt;&gt;::count::{{closure}}::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="22.5274%" y="1141" width="0.0167%" height="15" fill="rgb(251,74,28)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="1151.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::clear (2 samples, 0.02%)</title><rect x="22.5274%" y="1125" width="0.0167%" height="15" fill="rgb(218,20,49)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="1135.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="22.5274%" y="1109" width="0.0167%" height="15" fill="rgb(238,28,14)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="1119.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::clear::{{closure}} (2 samples, 0.02%)</title><rect x="22.5274%" y="1093" width="0.0167%" height="15" fill="rgb(229,40,46)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="1103.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::clear (2 samples, 0.02%)</title><rect x="22.5274%" y="1077" width="0.0167%" height="15" fill="rgb(244,195,20)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="1087.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::truncate (2 samples, 0.02%)</title><rect x="22.5274%" y="1061" width="0.0167%" height="15" fill="rgb(253,56,35)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u64&gt;]&gt; (2 samples, 0.02%)</title><rect x="22.5274%" y="1045" width="0.0167%" height="15" fill="rgb(210,149,44)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (2 samples, 0.02%)</title><rect x="22.5274%" y="1029" width="0.0167%" height="15" fill="rgb(240,135,12)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (2 samples, 0.02%)</title><rect x="22.5274%" y="1013" width="0.0167%" height="15" fill="rgb(251,24,50)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="1023.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="22.5274%" y="997" width="0.0167%" height="15" fill="rgb(243,200,47)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="22.5274%" y="981" width="0.0167%" height="15" fill="rgb(224,166,26)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="991.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="22.5274%" y="965" width="0.0167%" height="15" fill="rgb(233,0,47)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="975.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="22.5274%" y="949" width="0.0167%" height="15" fill="rgb(253,80,5)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="959.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="22.5274%" y="933" width="0.0167%" height="15" fill="rgb(214,133,25)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="943.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="22.5274%" y="917" width="0.0167%" height="15" fill="rgb(209,27,14)" fg:x="2690" fg:w="2"/><text x="22.7774%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="22.5442%" y="1093" width="0.0167%" height="15" fill="rgb(219,102,51)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="1103.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="22.5442%" y="1077" width="0.0167%" height="15" fill="rgb(237,18,16)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="1087.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.02%)</title><rect x="22.5442%" y="1061" width="0.0167%" height="15" fill="rgb(241,85,17)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="1071.50"></text></g><g><title>join_benchmark::s_benchmark1_join::{{closure}}::{{closure}}::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="22.5442%" y="1045" width="0.0167%" height="15" fill="rgb(236,90,42)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="22.5442%" y="1029" width="0.0167%" height="15" fill="rgb(249,57,21)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="22.5442%" y="1013" width="0.0167%" height="15" fill="rgb(243,12,36)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="22.5442%" y="997" width="0.0167%" height="15" fill="rgb(253,128,47)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="22.5442%" y="981" width="0.0167%" height="15" fill="rgb(207,33,20)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="22.5442%" y="965" width="0.0167%" height="15" fill="rgb(233,215,35)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="975.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="22.5442%" y="949" width="0.0167%" height="15" fill="rgb(249,188,52)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.02%)</title><rect x="22.5442%" y="933" width="0.0167%" height="15" fill="rgb(225,12,32)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="943.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.02%)</title><rect x="22.5442%" y="917" width="0.0167%" height="15" fill="rgb(247,98,14)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="927.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.02%)</title><rect x="22.5442%" y="901" width="0.0167%" height="15" fill="rgb(247,219,48)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="911.50"></text></g><g><title>__rdl_realloc (2 samples, 0.02%)</title><rect x="22.5442%" y="885" width="0.0167%" height="15" fill="rgb(253,60,48)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="895.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.02%)</title><rect x="22.5442%" y="869" width="0.0167%" height="15" fill="rgb(245,15,52)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="879.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.02%)</title><rect x="22.5442%" y="853" width="0.0167%" height="15" fill="rgb(220,133,28)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="863.50"></text></g><g><title>_int_realloc (2 samples, 0.02%)</title><rect x="22.5442%" y="837" width="0.0167%" height="15" fill="rgb(217,180,4)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="847.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="22.5442%" y="821" width="0.0167%" height="15" fill="rgb(251,24,1)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="831.50"></text></g><g><title>sysmalloc (2 samples, 0.02%)</title><rect x="22.5442%" y="805" width="0.0167%" height="15" fill="rgb(212,185,49)" fg:x="2692" fg:w="2"/><text x="22.7942%" y="815.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch_of (6 samples, 0.05%)</title><rect x="22.5442%" y="1237" width="0.0502%" height="15" fill="rgb(215,175,22)" fg:x="2692" fg:w="6"/><text x="22.7942%" y="1247.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (6 samples, 0.05%)</title><rect x="22.5442%" y="1221" width="0.0502%" height="15" fill="rgb(250,205,14)" fg:x="2692" fg:w="6"/><text x="22.7942%" y="1231.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (6 samples, 0.05%)</title><rect x="22.5442%" y="1205" width="0.0502%" height="15" fill="rgb(225,211,22)" fg:x="2692" fg:w="6"/><text x="22.7942%" y="1215.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::push_iter (6 samples, 0.05%)</title><rect x="22.5442%" y="1189" width="0.0502%" height="15" fill="rgb(251,179,42)" fg:x="2692" fg:w="6"/><text x="22.7942%" y="1199.50"></text></g><g><title>&lt;pegasus::communication::output::output::rob::OutputHandle&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (6 samples, 0.05%)</title><rect x="22.5442%" y="1173" width="0.0502%" height="15" fill="rgb(208,216,51)" fg:x="2692" fg:w="6"/><text x="22.7942%" y="1183.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::Tee&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (6 samples, 0.05%)</title><rect x="22.5442%" y="1157" width="0.0502%" height="15" fill="rgb(235,36,11)" fg:x="2692" fg:w="6"/><text x="22.7942%" y="1167.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::ChannelPush&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (6 samples, 0.05%)</title><rect x="22.5442%" y="1141" width="0.0502%" height="15" fill="rgb(213,189,28)" fg:x="2692" fg:w="6"/><text x="22.7942%" y="1151.50"></text></g><g><title>&lt;pegasus::communication::decorator::rob::MicroBatchPush&lt;T&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;T&gt;&gt;::try_push_iter (6 samples, 0.05%)</title><rect x="22.5442%" y="1125" width="0.0502%" height="15" fill="rgb(227,203,42)" fg:x="2692" fg:w="6"/><text x="22.7942%" y="1135.50"></text></g><g><title>&lt;pegasus::communication::buffer::rob::BufferedPush&lt;D,P&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (6 samples, 0.05%)</title><rect x="22.5442%" y="1109" width="0.0502%" height="15" fill="rgb(244,72,36)" fg:x="2692" fg:w="6"/><text x="22.7942%" y="1119.50"></text></g><g><title>pegasus::data::rob::DataSetPool&lt;D,F&gt;::get_batch_mut (4 samples, 0.03%)</title><rect x="22.5609%" y="1093" width="0.0335%" height="15" fill="rgb(213,53,17)" fg:x="2694" fg:w="4"/><text x="22.8109%" y="1103.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire (7 samples, 0.06%)</title><rect x="22.5442%" y="1413" width="0.0586%" height="15" fill="rgb(207,167,3)" fg:x="2692" fg:w="7"/><text x="22.7942%" y="1423.50"></text></g><g><title>pegasus::dataflow::Dataflow::try_fire (7 samples, 0.06%)</title><rect x="22.5442%" y="1397" width="0.0586%" height="15" fill="rgb(216,98,30)" fg:x="2692" fg:w="7"/><text x="22.7942%" y="1407.50"></text></g><g><title>pegasus::operator::Operator::fire (7 samples, 0.06%)</title><rect x="22.5442%" y="1381" width="0.0586%" height="15" fill="rgb(236,123,15)" fg:x="2692" fg:w="7"/><text x="22.7942%" y="1391.50"></text></g><g><title>pegasus::operator::Operator::fire_inner (7 samples, 0.06%)</title><rect x="22.5442%" y="1365" width="0.0586%" height="15" fill="rgb(248,81,50)" fg:x="2692" fg:w="7"/><text x="22.7942%" y="1375.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (7 samples, 0.06%)</title><rect x="22.5442%" y="1349" width="0.0586%" height="15" fill="rgb(214,120,4)" fg:x="2692" fg:w="7"/><text x="22.7942%" y="1359.50"></text></g><g><title>&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (7 samples, 0.06%)</title><rect x="22.5442%" y="1333" width="0.0586%" height="15" fill="rgb(208,179,34)" fg:x="2692" fg:w="7"/><text x="22.7942%" y="1343.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (7 samples, 0.06%)</title><rect x="22.5442%" y="1317" width="0.0586%" height="15" fill="rgb(227,140,7)" fg:x="2692" fg:w="7"/><text x="22.7942%" y="1327.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (7 samples, 0.06%)</title><rect x="22.5442%" y="1301" width="0.0586%" height="15" fill="rgb(214,22,6)" fg:x="2692" fg:w="7"/><text x="22.7942%" y="1311.50"></text></g><g><title>&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive (7 samples, 0.06%)</title><rect x="22.5442%" y="1285" width="0.0586%" height="15" fill="rgb(207,137,27)" fg:x="2692" fg:w="7"/><text x="22.7942%" y="1295.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}} (7 samples, 0.06%)</title><rect x="22.5442%" y="1269" width="0.0586%" height="15" fill="rgb(210,8,46)" fg:x="2692" fg:w="7"/><text x="22.7942%" y="1279.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch (7 samples, 0.06%)</title><rect x="22.5442%" y="1253" width="0.0586%" height="15" fill="rgb(240,16,54)" fg:x="2692" fg:w="7"/><text x="22.7942%" y="1263.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="28.7581%" y="1013" width="0.0167%" height="15" fill="rgb(211,209,29)" fg:x="3434" fg:w="2"/><text x="29.0081%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="45.5071%" y="901" width="0.0419%" height="15" fill="rgb(226,228,24)" fg:x="5434" fg:w="5"/><text x="45.7571%" y="911.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="45.5071%" y="885" width="0.0419%" height="15" fill="rgb(222,84,9)" fg:x="5434" fg:w="5"/><text x="45.7571%" y="895.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="45.5071%" y="869" width="0.0419%" height="15" fill="rgb(234,203,30)" fg:x="5434" fg:w="5"/><text x="45.7571%" y="879.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="45.5071%" y="853" width="0.0419%" height="15" fill="rgb(238,109,14)" fg:x="5434" fg:w="5"/><text x="45.7571%" y="863.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="45.5071%" y="837" width="0.0419%" height="15" fill="rgb(233,206,34)" fg:x="5434" fg:w="5"/><text x="45.7571%" y="847.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="45.5071%" y="821" width="0.0419%" height="15" fill="rgb(220,167,47)" fg:x="5434" fg:w="5"/><text x="45.7571%" y="831.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="45.5071%" y="805" width="0.0419%" height="15" fill="rgb(238,105,10)" fg:x="5434" fg:w="5"/><text x="45.7571%" y="815.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="45.5071%" y="789" width="0.0419%" height="15" fill="rgb(213,227,17)" fg:x="5434" fg:w="5"/><text x="45.7571%" y="799.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="45.5071%" y="773" width="0.0419%" height="15" fill="rgb(217,132,38)" fg:x="5434" fg:w="5"/><text x="45.7571%" y="783.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="45.5071%" y="757" width="0.0419%" height="15" fill="rgb(242,146,4)" fg:x="5434" fg:w="5"/><text x="45.7571%" y="767.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="45.5155%" y="741" width="0.0335%" height="15" fill="rgb(212,61,9)" fg:x="5435" fg:w="4"/><text x="45.7655%" y="751.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="45.5155%" y="725" width="0.0335%" height="15" fill="rgb(247,126,22)" fg:x="5435" fg:w="4"/><text x="45.7655%" y="735.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="45.5155%" y="709" width="0.0335%" height="15" fill="rgb(220,196,2)" fg:x="5435" fg:w="4"/><text x="45.7655%" y="719.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,378 samples, 11.54%)</title><rect x="35.2399%" y="917" width="11.5401%" height="15" fill="rgb(208,46,4)" fg:x="4208" fg:w="1378"/><text x="35.4899%" y="927.50">&lt;petgraph::graph_..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (147 samples, 1.23%)</title><rect x="45.5489%" y="901" width="1.2311%" height="15" fill="rgb(252,104,46)" fg:x="5439" fg:w="147"/><text x="45.7989%" y="911.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (147 samples, 1.23%)</title><rect x="45.5489%" y="885" width="1.2311%" height="15" fill="rgb(237,152,48)" fg:x="5439" fg:w="147"/><text x="45.7989%" y="895.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (412 samples, 3.45%)</title><rect x="47.9524%" y="869" width="3.4503%" height="15" fill="rgb(221,59,37)" fg:x="5726" fg:w="412"/><text x="48.2024%" y="879.50">&lt;co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (58 samples, 0.49%)</title><rect x="50.9170%" y="853" width="0.4857%" height="15" fill="rgb(209,202,51)" fg:x="6080" fg:w="58"/><text x="51.1670%" y="863.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (58 samples, 0.49%)</title><rect x="50.9170%" y="837" width="0.4857%" height="15" fill="rgb(228,81,30)" fg:x="6080" fg:w="58"/><text x="51.1670%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (36 samples, 0.30%)</title><rect x="51.4027%" y="869" width="0.3015%" height="15" fill="rgb(227,42,39)" fg:x="6138" fg:w="36"/><text x="51.6527%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (258 samples, 2.16%)</title><rect x="51.7042%" y="853" width="2.1606%" height="15" fill="rgb(221,26,2)" fg:x="6174" fg:w="258"/><text x="51.9542%" y="863.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (235 samples, 1.97%)</title><rect x="53.8648%" y="853" width="1.9680%" height="15" fill="rgb(254,61,31)" fg:x="6432" fg:w="235"/><text x="54.1148%" y="863.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (235 samples, 1.97%)</title><rect x="53.8648%" y="837" width="1.9680%" height="15" fill="rgb(222,173,38)" fg:x="6432" fg:w="235"/><text x="54.1148%" y="847.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,075 samples, 25.75%)</title><rect x="31.2537%" y="965" width="25.7516%" height="15" fill="rgb(218,50,12)" fg:x="3732" fg:w="3075"/><text x="31.5037%" y="975.50">&lt;core::iter::adapters::filter::Filter&lt;I,P..</text></g><g><title>core::iter::traits::iterator::Iterator::find (3,075 samples, 25.75%)</title><rect x="31.2537%" y="949" width="25.7516%" height="15" fill="rgb(223,88,40)" fg:x="3732" fg:w="3075"/><text x="31.5037%" y="959.50">core::iter::traits::iterator::Iterator::f..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,075 samples, 25.75%)</title><rect x="31.2537%" y="933" width="25.7516%" height="15" fill="rgb(237,54,19)" fg:x="3732" fg:w="3075"/><text x="31.5037%" y="943.50">core::iter::traits::iterator::Iterator::t..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (1,221 samples, 10.23%)</title><rect x="46.7800%" y="917" width="10.2253%" height="15" fill="rgb(251,129,25)" fg:x="5586" fg:w="1221"/><text x="47.0300%" y="927.50">core::iter::tra..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,108 samples, 9.28%)</title><rect x="47.7263%" y="901" width="9.2790%" height="15" fill="rgb(238,97,19)" fg:x="5699" fg:w="1108"/><text x="47.9763%" y="911.50">core::ops::fu..</text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices::{{closure}} (1,108 samples, 9.28%)</title><rect x="47.7263%" y="885" width="9.2790%" height="15" fill="rgb(240,169,18)" fg:x="5699" fg:w="1108"/><text x="47.9763%" y="895.50">graph_store::..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_weight (633 samples, 5.30%)</title><rect x="51.7042%" y="869" width="5.3011%" height="15" fill="rgb(230,187,49)" fg:x="6174" fg:w="633"/><text x="51.9542%" y="879.50">petgra..</text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (140 samples, 1.17%)</title><rect x="55.8328%" y="853" width="1.1724%" height="15" fill="rgb(209,44,26)" fg:x="6667" fg:w="140"/><text x="56.0828%" y="863.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (140 samples, 1.17%)</title><rect x="55.8328%" y="837" width="1.1724%" height="15" fill="rgb(244,0,6)" fg:x="6667" fg:w="140"/><text x="56.0828%" y="847.50"></text></g><g><title>[unknown] (11 samples, 0.09%)</title><rect x="81.6515%" y="917" width="0.0921%" height="15" fill="rgb(248,18,21)" fg:x="9750" fg:w="11"/><text x="81.9015%" y="927.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="81.6598%" y="901" width="0.0837%" height="15" fill="rgb(245,180,19)" fg:x="9751" fg:w="10"/><text x="81.9098%" y="911.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="81.6598%" y="885" width="0.0837%" height="15" fill="rgb(252,118,36)" fg:x="9751" fg:w="10"/><text x="81.9098%" y="895.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="81.6598%" y="869" width="0.0837%" height="15" fill="rgb(210,224,19)" fg:x="9751" fg:w="10"/><text x="81.9098%" y="879.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="81.6598%" y="853" width="0.0837%" height="15" fill="rgb(218,30,24)" fg:x="9751" fg:w="10"/><text x="81.9098%" y="863.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="81.6598%" y="837" width="0.0837%" height="15" fill="rgb(219,75,50)" fg:x="9751" fg:w="10"/><text x="81.9098%" y="847.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="81.6598%" y="821" width="0.0837%" height="15" fill="rgb(234,72,50)" fg:x="9751" fg:w="10"/><text x="81.9098%" y="831.50"></text></g><g><title>[unknown] (10 samples, 0.08%)</title><rect x="81.6598%" y="805" width="0.0837%" height="15" fill="rgb(219,100,48)" fg:x="9751" fg:w="10"/><text x="81.9098%" y="815.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="81.6682%" y="789" width="0.0754%" height="15" fill="rgb(253,5,41)" fg:x="9752" fg:w="9"/><text x="81.9182%" y="799.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="81.6682%" y="773" width="0.0754%" height="15" fill="rgb(247,181,11)" fg:x="9752" fg:w="9"/><text x="81.9182%" y="783.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="81.6766%" y="757" width="0.0670%" height="15" fill="rgb(222,223,25)" fg:x="9753" fg:w="8"/><text x="81.9266%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="81.7017%" y="741" width="0.0419%" height="15" fill="rgb(214,198,28)" fg:x="9756" fg:w="5"/><text x="81.9517%" y="751.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="81.7101%" y="725" width="0.0335%" height="15" fill="rgb(230,46,43)" fg:x="9757" fg:w="4"/><text x="81.9601%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (116 samples, 0.97%)</title><rect x="81.7436%" y="917" width="0.9714%" height="15" fill="rgb(233,65,53)" fg:x="9761" fg:w="116"/><text x="81.9936%" y="927.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (152 samples, 1.27%)</title><rect x="85.4451%" y="901" width="1.2729%" height="15" fill="rgb(221,121,27)" fg:x="10203" fg:w="152"/><text x="85.6951%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (152 samples, 1.27%)</title><rect x="85.4451%" y="885" width="1.2729%" height="15" fill="rgb(247,70,47)" fg:x="10203" fg:w="152"/><text x="85.6951%" y="895.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (152 samples, 1.27%)</title><rect x="85.4451%" y="869" width="1.2729%" height="15" fill="rgb(228,85,35)" fg:x="10203" fg:w="152"/><text x="85.6951%" y="879.50"></text></g><g><title>core::clone::Clone::clone (152 samples, 1.27%)</title><rect x="85.4451%" y="853" width="1.2729%" height="15" fill="rgb(209,50,18)" fg:x="10203" fg:w="152"/><text x="85.6951%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4 samples, 0.03%)</title><rect x="86.7180%" y="885" width="0.0335%" height="15" fill="rgb(250,19,35)" fg:x="10355" fg:w="4"/><text x="86.9680%" y="895.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4 samples, 0.03%)</title><rect x="86.7180%" y="869" width="0.0335%" height="15" fill="rgb(253,107,29)" fg:x="10355" fg:w="4"/><text x="86.9680%" y="879.50"></text></g><g><title>graph_store::graph_db_impl::IndexData&lt;G,I&gt;::get_global_id (97 samples, 0.81%)</title><rect x="86.7180%" y="901" width="0.8123%" height="15" fill="rgb(252,179,29)" fg:x="10355" fg:w="97"/><text x="86.9680%" y="911.50"></text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (93 samples, 0.78%)</title><rect x="86.7515%" y="885" width="0.7788%" height="15" fill="rgb(238,194,6)" fg:x="10359" fg:w="93"/><text x="87.0015%" y="895.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (93 samples, 0.78%)</title><rect x="86.7515%" y="869" width="0.7788%" height="15" fill="rgb(238,164,29)" fg:x="10359" fg:w="93"/><text x="87.0015%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.03%)</title><rect x="87.5304%" y="885" width="0.0251%" height="15" fill="rgb(224,25,9)" fg:x="10452" fg:w="3"/><text x="87.7804%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.03%)</title><rect x="87.5304%" y="869" width="0.0251%" height="15" fill="rgb(244,153,23)" fg:x="10452" fg:w="3"/><text x="87.7804%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,817 samples, 57.09%)</title><rect x="30.4832%" y="981" width="57.0890%" height="15" fill="rgb(212,203,14)" fg:x="3640" fg:w="6817"/><text x="30.7332%" y="991.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (3,649 samples, 30.56%)</title><rect x="57.0137%" y="965" width="30.5586%" height="15" fill="rgb(220,164,20)" fg:x="6808" fg:w="3649"/><text x="57.2637%" y="975.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,893 samples, 24.23%)</title><rect x="63.3448%" y="949" width="24.2275%" height="15" fill="rgb(222,203,48)" fg:x="7564" fg:w="2893"/><text x="63.5948%" y="959.50">core::ops::function::impls::&lt;impl core:..</text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices::{{closure}} (2,893 samples, 24.23%)</title><rect x="63.3448%" y="933" width="24.2275%" height="15" fill="rgb(215,159,22)" fg:x="7564" fg:w="2893"/><text x="63.5948%" y="943.50">graph_store::graph_db_impl::LargeGraphD..</text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::index_to_local_vertex (580 samples, 4.86%)</title><rect x="82.7150%" y="917" width="4.8572%" height="15" fill="rgb(216,183,47)" fg:x="9877" fg:w="580"/><text x="82.9650%" y="927.50">graph_..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::node_weight (5 samples, 0.04%)</title><rect x="87.5304%" y="901" width="0.0419%" height="15" fill="rgb(229,195,25)" fg:x="10452" fg:w="5"/><text x="87.7804%" y="911.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.02%)</title><rect x="87.5555%" y="885" width="0.0167%" height="15" fill="rgb(224,132,51)" fg:x="10455" fg:w="2"/><text x="87.8055%" y="895.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.02%)</title><rect x="87.5555%" y="869" width="0.0167%" height="15" fill="rgb(240,63,7)" fg:x="10455" fg:w="2"/><text x="87.8055%" y="879.50"></text></g><g><title>&lt;graph_store::utils::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,139 samples, 59.79%)</title><rect x="28.7748%" y="1013" width="59.7856%" height="15" fill="rgb(249,182,41)" fg:x="3436" fg:w="7139"/><text x="29.0248%" y="1023.50">&lt;graph_store::utils::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;alloc::boxed::Box&lt;I,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,139 samples, 59.79%)</title><rect x="28.7748%" y="997" width="59.7856%" height="15" fill="rgb(243,47,26)" fg:x="3436" fg:w="7139"/><text x="29.0248%" y="1007.50">&lt;alloc::boxed::Box&lt;I,A&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>[join_benchmark] (118 samples, 0.99%)</title><rect x="87.5722%" y="981" width="0.9882%" height="15" fill="rgb(233,48,2)" fg:x="10457" fg:w="118"/><text x="87.8222%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (118 samples, 0.99%)</title><rect x="87.5722%" y="965" width="0.9882%" height="15" fill="rgb(244,165,34)" fg:x="10457" fg:w="118"/><text x="87.8222%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,240 samples, 69.01%)</title><rect x="22.7787%" y="1061" width="69.0059%" height="15" fill="rgb(207,89,7)" fg:x="2720" fg:w="8240"/><text x="23.0287%" y="1071.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::iter::traits::iterator::Iterator::find (8,240 samples, 69.01%)</title><rect x="22.7787%" y="1045" width="69.0059%" height="15" fill="rgb(244,117,36)" fg:x="2720" fg:w="8240"/><text x="23.0287%" y="1055.50">core::iter::traits::iterator::Iterator::find</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (8,240 samples, 69.01%)</title><rect x="22.7787%" y="1029" width="69.0059%" height="15" fill="rgb(226,144,34)" fg:x="2720" fg:w="8240"/><text x="23.0287%" y="1039.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (384 samples, 3.22%)</title><rect x="88.5688%" y="1013" width="3.2158%" height="15" fill="rgb(213,23,19)" fg:x="10576" fg:w="384"/><text x="88.8188%" y="1023.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt; (116 samples, 0.97%)</title><rect x="90.8132%" y="997" width="0.9714%" height="15" fill="rgb(217,75,12)" fg:x="10844" fg:w="116"/><text x="91.0632%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;graph_store::graph_db::RowWithSchema&gt;&gt; (106 samples, 0.89%)</title><rect x="90.8969%" y="981" width="0.8877%" height="15" fill="rgb(224,159,17)" fg:x="10854" fg:w="106"/><text x="91.1469%" y="991.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (143 samples, 1.20%)</title><rect x="91.9270%" y="965" width="1.1976%" height="15" fill="rgb(217,118,1)" fg:x="10977" fg:w="143"/><text x="92.1770%" y="975.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.04%)</title><rect x="93.1245%" y="917" width="0.0419%" height="15" fill="rgb(232,180,48)" fg:x="11120" fg:w="5"/><text x="93.3745%" y="927.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.02%)</title><rect x="93.1748%" y="901" width="0.0167%" height="15" fill="rgb(230,27,33)" fg:x="11126" fg:w="2"/><text x="93.4248%" y="911.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.02%)</title><rect x="93.1748%" y="885" width="0.0167%" height="15" fill="rgb(205,31,21)" fg:x="11126" fg:w="2"/><text x="93.4248%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (167 samples, 1.40%)</title><rect x="91.8014%" y="1013" width="1.3985%" height="15" fill="rgb(253,59,4)" fg:x="10962" fg:w="167"/><text x="92.0514%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (167 samples, 1.40%)</title><rect x="91.8014%" y="997" width="1.3985%" height="15" fill="rgb(224,201,9)" fg:x="10962" fg:w="167"/><text x="92.0514%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (167 samples, 1.40%)</title><rect x="91.8014%" y="981" width="1.3985%" height="15" fill="rgb(229,206,30)" fg:x="10962" fg:w="167"/><text x="92.0514%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (9 samples, 0.08%)</title><rect x="93.1245%" y="965" width="0.0754%" height="15" fill="rgb(212,67,47)" fg:x="11120" fg:w="9"/><text x="93.3745%" y="975.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (9 samples, 0.08%)</title><rect x="93.1245%" y="949" width="0.0754%" height="15" fill="rgb(211,96,50)" fg:x="11120" fg:w="9"/><text x="93.3745%" y="959.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices::{{closure}} (9 samples, 0.08%)</title><rect x="93.1245%" y="933" width="0.0754%" height="15" fill="rgb(252,114,18)" fg:x="11120" fg:w="9"/><text x="93.3745%" y="943.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_weight (4 samples, 0.03%)</title><rect x="93.1664%" y="917" width="0.0335%" height="15" fill="rgb(223,58,37)" fg:x="11125" fg:w="4"/><text x="93.4164%" y="927.50"></text></g><g><title>&lt;graph_store::utils::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (205 samples, 1.72%)</title><rect x="91.7846%" y="1061" width="1.7168%" height="15" fill="rgb(237,70,4)" fg:x="10960" fg:w="205"/><text x="92.0346%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;I,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (205 samples, 1.72%)</title><rect x="91.7846%" y="1045" width="1.7168%" height="15" fill="rgb(244,85,46)" fg:x="10960" fg:w="205"/><text x="92.0346%" y="1055.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (205 samples, 1.72%)</title><rect x="91.7846%" y="1029" width="1.7168%" height="15" fill="rgb(223,39,52)" fg:x="10960" fg:w="205"/><text x="92.0346%" y="1039.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (36 samples, 0.30%)</title><rect x="93.1999%" y="1013" width="0.3015%" height="15" fill="rgb(218,200,14)" fg:x="11129" fg:w="36"/><text x="93.4499%" y="1023.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (27 samples, 0.23%)</title><rect x="93.2753%" y="997" width="0.2261%" height="15" fill="rgb(208,171,16)" fg:x="11138" fg:w="27"/><text x="93.5253%" y="1007.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices::{{closure}} (27 samples, 0.23%)</title><rect x="93.2753%" y="981" width="0.2261%" height="15" fill="rgb(234,200,18)" fg:x="11138" fg:w="27"/><text x="93.5253%" y="991.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::index_to_local_vertex (9 samples, 0.08%)</title><rect x="93.4260%" y="965" width="0.0754%" height="15" fill="rgb(228,45,11)" fg:x="11156" fg:w="9"/><text x="93.6760%" y="975.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (3 samples, 0.03%)</title><rect x="93.4763%" y="949" width="0.0251%" height="15" fill="rgb(237,182,11)" fg:x="11162" fg:w="3"/><text x="93.7263%" y="959.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.03%)</title><rect x="93.4763%" y="933" width="0.0251%" height="15" fill="rgb(241,175,49)" fg:x="11162" fg:w="3"/><text x="93.7263%" y="943.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (3 samples, 0.03%)</title><rect x="93.4763%" y="917" width="0.0251%" height="15" fill="rgb(247,38,35)" fg:x="11162" fg:w="3"/><text x="93.7263%" y="927.50"></text></g><g><title>core::clone::Clone::clone (3 samples, 0.03%)</title><rect x="93.4763%" y="901" width="0.0251%" height="15" fill="rgb(228,39,49)" fg:x="11162" fg:w="3"/><text x="93.7263%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="93.6856%" y="901" width="0.0251%" height="15" fill="rgb(226,101,26)" fg:x="11187" fg:w="3"/><text x="93.9356%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="93.6856%" y="885" width="0.0251%" height="15" fill="rgb(206,141,19)" fg:x="11187" fg:w="3"/><text x="93.9356%" y="895.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="93.6856%" y="869" width="0.0251%" height="15" fill="rgb(211,200,13)" fg:x="11187" fg:w="3"/><text x="93.9356%" y="879.50"></text></g><g><title>__rdl_alloc (3 samples, 0.03%)</title><rect x="93.6856%" y="853" width="0.0251%" height="15" fill="rgb(241,121,6)" fg:x="11187" fg:w="3"/><text x="93.9356%" y="863.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.03%)</title><rect x="93.6856%" y="837" width="0.0251%" height="15" fill="rgb(234,221,29)" fg:x="11187" fg:w="3"/><text x="93.9356%" y="847.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="93.6856%" y="821" width="0.0251%" height="15" fill="rgb(229,136,5)" fg:x="11187" fg:w="3"/><text x="93.9356%" y="831.50"></text></g><g><title>join_benchmark::g_benchmark3_composition::{{closure}}::{{closure}}::{{closure}}::{{closure}} (5 samples, 0.04%)</title><rect x="93.6772%" y="1029" width="0.0419%" height="15" fill="rgb(238,36,11)" fg:x="11186" fg:w="5"/><text x="93.9272%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.04%)</title><rect x="93.6772%" y="1013" width="0.0419%" height="15" fill="rgb(251,55,41)" fg:x="11186" fg:w="5"/><text x="93.9272%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.03%)</title><rect x="93.6856%" y="997" width="0.0335%" height="15" fill="rgb(242,34,40)" fg:x="11187" fg:w="4"/><text x="93.9356%" y="1007.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.03%)</title><rect x="93.6856%" y="981" width="0.0335%" height="15" fill="rgb(215,42,17)" fg:x="11187" fg:w="4"/><text x="93.9356%" y="991.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.03%)</title><rect x="93.6856%" y="965" width="0.0335%" height="15" fill="rgb(207,44,46)" fg:x="11187" fg:w="4"/><text x="93.9356%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.03%)</title><rect x="93.6856%" y="949" width="0.0335%" height="15" fill="rgb(211,206,28)" fg:x="11187" fg:w="4"/><text x="93.9356%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.03%)</title><rect x="93.6856%" y="933" width="0.0335%" height="15" fill="rgb(237,167,16)" fg:x="11187" fg:w="4"/><text x="93.9356%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.03%)</title><rect x="93.6856%" y="917" width="0.0335%" height="15" fill="rgb(233,66,6)" fg:x="11187" fg:w="4"/><text x="93.9356%" y="927.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="93.8029%" y="805" width="0.0167%" height="15" fill="rgb(246,123,29)" fg:x="11201" fg:w="2"/><text x="94.0529%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.07%)</title><rect x="93.7777%" y="901" width="0.0670%" height="15" fill="rgb(209,62,40)" fg:x="11198" fg:w="8"/><text x="94.0277%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.07%)</title><rect x="93.7777%" y="885" width="0.0670%" height="15" fill="rgb(218,4,25)" fg:x="11198" fg:w="8"/><text x="94.0277%" y="895.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.07%)</title><rect x="93.7777%" y="869" width="0.0670%" height="15" fill="rgb(253,91,49)" fg:x="11198" fg:w="8"/><text x="94.0277%" y="879.50"></text></g><g><title>__rdl_alloc (8 samples, 0.07%)</title><rect x="93.7777%" y="853" width="0.0670%" height="15" fill="rgb(228,155,29)" fg:x="11198" fg:w="8"/><text x="94.0277%" y="863.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.07%)</title><rect x="93.7777%" y="837" width="0.0670%" height="15" fill="rgb(243,57,37)" fg:x="11198" fg:w="8"/><text x="94.0277%" y="847.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.07%)</title><rect x="93.7777%" y="821" width="0.0670%" height="15" fill="rgb(244,167,17)" fg:x="11198" fg:w="8"/><text x="94.0277%" y="831.50"></text></g><g><title>tcache_get (3 samples, 0.03%)</title><rect x="93.8196%" y="805" width="0.0251%" height="15" fill="rgb(207,181,38)" fg:x="11203" fg:w="3"/><text x="94.0696%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.10%)</title><rect x="93.7526%" y="949" width="0.1005%" height="15" fill="rgb(211,8,23)" fg:x="11195" fg:w="12"/><text x="94.0026%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.09%)</title><rect x="93.7610%" y="933" width="0.0921%" height="15" fill="rgb(235,11,44)" fg:x="11196" fg:w="11"/><text x="94.0110%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.09%)</title><rect x="93.7610%" y="917" width="0.0921%" height="15" fill="rgb(248,18,52)" fg:x="11196" fg:w="11"/><text x="94.0110%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.14%)</title><rect x="93.7526%" y="1013" width="0.1424%" height="15" fill="rgb(208,4,7)" fg:x="11195" fg:w="17"/><text x="94.0026%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.14%)</title><rect x="93.7526%" y="997" width="0.1424%" height="15" fill="rgb(240,17,39)" fg:x="11195" fg:w="17"/><text x="94.0026%" y="1007.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.14%)</title><rect x="93.7526%" y="981" width="0.1424%" height="15" fill="rgb(207,170,3)" fg:x="11195" fg:w="17"/><text x="94.0026%" y="991.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.14%)</title><rect x="93.7526%" y="965" width="0.1424%" height="15" fill="rgb(236,100,52)" fg:x="11195" fg:w="17"/><text x="94.0026%" y="975.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.04%)</title><rect x="93.8531%" y="949" width="0.0419%" height="15" fill="rgb(246,78,51)" fg:x="11207" fg:w="5"/><text x="94.1031%" y="959.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.04%)</title><rect x="93.8531%" y="933" width="0.0419%" height="15" fill="rgb(211,17,15)" fg:x="11207" fg:w="5"/><text x="94.1031%" y="943.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.04%)</title><rect x="93.8531%" y="917" width="0.0419%" height="15" fill="rgb(209,59,46)" fg:x="11207" fg:w="5"/><text x="94.1031%" y="927.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="94.6319%" y="805" width="0.0251%" height="15" fill="rgb(210,92,25)" fg:x="11300" fg:w="3"/><text x="94.8819%" y="815.50"></text></g><g><title>_int_free (11 samples, 0.09%)</title><rect x="94.6571%" y="805" width="0.0921%" height="15" fill="rgb(238,174,52)" fg:x="11303" fg:w="11"/><text x="94.9071%" y="815.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="94.7324%" y="789" width="0.0167%" height="15" fill="rgb(230,73,7)" fg:x="11312" fg:w="2"/><text x="94.9824%" y="799.50"></text></g><g><title>_int_realloc (63 samples, 0.53%)</title><rect x="94.5566%" y="821" width="0.5276%" height="15" fill="rgb(243,124,40)" fg:x="11291" fg:w="63"/><text x="94.8066%" y="831.50"></text></g><g><title>_int_malloc (40 samples, 0.33%)</title><rect x="94.7492%" y="805" width="0.3350%" height="15" fill="rgb(244,170,11)" fg:x="11314" fg:w="40"/><text x="94.9992%" y="815.50"></text></g><g><title>alloc::raw_vec::finish_grow (137 samples, 1.15%)</title><rect x="93.9536%" y="933" width="1.1473%" height="15" fill="rgb(207,114,54)" fg:x="11219" fg:w="137"/><text x="94.2036%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (135 samples, 1.13%)</title><rect x="93.9704%" y="917" width="1.1306%" height="15" fill="rgb(205,42,20)" fg:x="11221" fg:w="135"/><text x="94.2204%" y="927.50"></text></g><g><title>alloc::alloc::Global::grow_impl (135 samples, 1.13%)</title><rect x="93.9704%" y="901" width="1.1306%" height="15" fill="rgb(230,30,28)" fg:x="11221" fg:w="135"/><text x="94.2204%" y="911.50"></text></g><g><title>alloc::alloc::realloc (133 samples, 1.11%)</title><rect x="93.9871%" y="885" width="1.1138%" height="15" fill="rgb(205,73,54)" fg:x="11223" fg:w="133"/><text x="94.2371%" y="895.50"></text></g><g><title>__rdl_realloc (133 samples, 1.11%)</title><rect x="93.9871%" y="869" width="1.1138%" height="15" fill="rgb(254,227,23)" fg:x="11223" fg:w="133"/><text x="94.2371%" y="879.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (133 samples, 1.11%)</title><rect x="93.9871%" y="853" width="1.1138%" height="15" fill="rgb(228,202,34)" fg:x="11223" fg:w="133"/><text x="94.2371%" y="863.50"></text></g><g><title>__GI___libc_realloc (133 samples, 1.11%)</title><rect x="93.9871%" y="837" width="1.1138%" height="15" fill="rgb(222,225,37)" fg:x="11223" fg:w="133"/><text x="94.2371%" y="847.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="95.0842%" y="821" width="0.0167%" height="15" fill="rgb(221,14,54)" fg:x="11354" fg:w="2"/><text x="95.3342%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (147 samples, 1.23%)</title><rect x="93.8950%" y="1013" width="1.2311%" height="15" fill="rgb(254,102,2)" fg:x="11212" fg:w="147"/><text x="94.1450%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (145 samples, 1.21%)</title><rect x="93.9117%" y="997" width="1.2143%" height="15" fill="rgb(232,104,17)" fg:x="11214" fg:w="145"/><text x="94.1617%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (145 samples, 1.21%)</title><rect x="93.9117%" y="981" width="1.2143%" height="15" fill="rgb(250,220,14)" fg:x="11214" fg:w="145"/><text x="94.1617%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (144 samples, 1.21%)</title><rect x="93.9201%" y="965" width="1.2059%" height="15" fill="rgb(241,158,9)" fg:x="11215" fg:w="144"/><text x="94.1701%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (144 samples, 1.21%)</title><rect x="93.9201%" y="949" width="1.2059%" height="15" fill="rgb(246,9,43)" fg:x="11215" fg:w="144"/><text x="94.1701%" y="959.50"></text></g><g><title>core::cmp::max (2 samples, 0.02%)</title><rect x="95.1093%" y="933" width="0.0167%" height="15" fill="rgb(206,73,33)" fg:x="11357" fg:w="2"/><text x="95.3593%" y="943.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.02%)</title><rect x="95.1093%" y="917" width="0.0167%" height="15" fill="rgb(222,79,8)" fg:x="11357" fg:w="2"/><text x="95.3593%" y="927.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.02%)</title><rect x="95.1093%" y="901" width="0.0167%" height="15" fill="rgb(234,8,54)" fg:x="11357" fg:w="2"/><text x="95.3593%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,641 samples, 72.36%)</title><rect x="22.7787%" y="1077" width="72.3641%" height="15" fill="rgb(209,134,38)" fg:x="2720" fg:w="8641"/><text x="23.0287%" y="1087.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (196 samples, 1.64%)</title><rect x="93.5014%" y="1061" width="1.6414%" height="15" fill="rgb(230,127,29)" fg:x="11165" fg:w="196"/><text x="93.7514%" y="1071.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (180 samples, 1.51%)</title><rect x="93.6354%" y="1045" width="1.5074%" height="15" fill="rgb(242,44,41)" fg:x="11181" fg:w="180"/><text x="93.8854%" y="1055.50"></text></g><g><title>join_benchmark::s_benchmark1_join::{{closure}}::{{closure}}::{{closure}}::{{closure}} (169 samples, 1.42%)</title><rect x="93.7275%" y="1029" width="1.4153%" height="15" fill="rgb(222,56,43)" fg:x="11192" fg:w="169"/><text x="93.9775%" y="1039.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.03%)</title><rect x="95.1512%" y="1061" width="0.0251%" height="15" fill="rgb(238,39,47)" fg:x="11362" fg:w="3"/><text x="95.4012%" y="1071.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (7 samples, 0.06%)</title><rect x="95.1930%" y="1045" width="0.0586%" height="15" fill="rgb(226,79,43)" fg:x="11367" fg:w="7"/><text x="95.4430%" y="1055.50"></text></g><g><title>pegasus::tag::tools::map::TidyTagMap&lt;V&gt;::contains_key (11 samples, 0.09%)</title><rect x="95.1847%" y="1061" width="0.0921%" height="15" fill="rgb(242,105,53)" fg:x="11366" fg:w="11"/><text x="95.4347%" y="1071.50"></text></g><g><title>pegasus::tag::Tag::len (3 samples, 0.03%)</title><rect x="95.2517%" y="1045" width="0.0251%" height="15" fill="rgb(251,132,46)" fg:x="11374" fg:w="3"/><text x="95.5017%" y="1055.50"></text></g><g><title>pegasus::communication::buffer::rob::ScopeBatchPool&lt;D&gt;::get_pool_mut (20 samples, 0.17%)</title><rect x="95.1428%" y="1077" width="0.1675%" height="15" fill="rgb(231,77,14)" fg:x="11361" fg:w="20"/><text x="95.3928%" y="1087.50"></text></g><g><title>pegasus::tag::tools::map::TidyTagMap&lt;V&gt;::get_mut (4 samples, 0.03%)</title><rect x="95.2768%" y="1061" width="0.0335%" height="15" fill="rgb(240,135,9)" fg:x="11377" fg:w="4"/><text x="95.5268%" y="1071.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (2 samples, 0.02%)</title><rect x="95.2935%" y="1045" width="0.0167%" height="15" fill="rgb(248,109,14)" fg:x="11379" fg:w="2"/><text x="95.5435%" y="1055.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::is_full (3 samples, 0.03%)</title><rect x="95.3187%" y="1077" width="0.0251%" height="15" fill="rgb(227,146,52)" fg:x="11382" fg:w="3"/><text x="95.5687%" y="1087.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.03%)</title><rect x="95.3187%" y="1061" width="0.0251%" height="15" fill="rgb(232,54,3)" fg:x="11382" fg:w="3"/><text x="95.5687%" y="1071.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (5 samples, 0.04%)</title><rect x="95.5029%" y="1045" width="0.0419%" height="15" fill="rgb(229,201,43)" fg:x="11404" fg:w="5"/><text x="95.7529%" y="1055.50"></text></g><g><title>core::ptr::write (4 samples, 0.03%)</title><rect x="95.5113%" y="1029" width="0.0335%" height="15" fill="rgb(252,161,33)" fg:x="11405" fg:w="4"/><text x="95.7613%" y="1039.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch_of (8,713 samples, 72.97%)</title><rect x="22.6028%" y="1221" width="72.9671%" height="15" fill="rgb(226,146,40)" fg:x="2699" fg:w="8713"/><text x="22.8528%" y="1231.50">pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch_of</text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (8,713 samples, 72.97%)</title><rect x="22.6028%" y="1205" width="72.9671%" height="15" fill="rgb(219,47,25)" fg:x="2699" fg:w="8713"/><text x="22.8528%" y="1215.50">pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{cl..</text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (8,713 samples, 72.97%)</title><rect x="22.6028%" y="1189" width="72.9671%" height="15" fill="rgb(250,135,13)" fg:x="2699" fg:w="8713"/><text x="22.8528%" y="1199.50">pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator</text></g><g><title>pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::push_iter (8,713 samples, 72.97%)</title><rect x="22.6028%" y="1173" width="72.9671%" height="15" fill="rgb(219,229,18)" fg:x="2699" fg:w="8713"/><text x="22.8528%" y="1183.50">pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::push_iter</text></g><g><title>&lt;pegasus::communication::output::output::rob::OutputHandle&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (8,713 samples, 72.97%)</title><rect x="22.6028%" y="1157" width="72.9671%" height="15" fill="rgb(217,152,27)" fg:x="2699" fg:w="8713"/><text x="22.8528%" y="1167.50">&lt;pegasus::communication::output::output::rob::OutputHandle&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::..</text></g><g><title>&lt;pegasus::communication::output::tee::rob::Tee&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (8,713 samples, 72.97%)</title><rect x="22.6028%" y="1141" width="72.9671%" height="15" fill="rgb(225,71,47)" fg:x="2699" fg:w="8713"/><text x="22.8528%" y="1151.50">&lt;pegasus::communication::output::tee::rob::Tee&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter</text></g><g><title>&lt;pegasus::communication::output::tee::rob::ChannelPush&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (8,713 samples, 72.97%)</title><rect x="22.6028%" y="1125" width="72.9671%" height="15" fill="rgb(220,139,14)" fg:x="2699" fg:w="8713"/><text x="22.8528%" y="1135.50">&lt;pegasus::communication::output::tee::rob::ChannelPush&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_..</text></g><g><title>&lt;pegasus::communication::decorator::rob::MicroBatchPush&lt;T&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;T&gt;&gt;::try_push_iter (8,713 samples, 72.97%)</title><rect x="22.6028%" y="1109" width="72.9671%" height="15" fill="rgb(247,54,32)" fg:x="2699" fg:w="8713"/><text x="22.8528%" y="1119.50">&lt;pegasus::communication::decorator::rob::MicroBatchPush&lt;T&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;T&gt;&gt;::try..</text></g><g><title>&lt;pegasus::communication::buffer::rob::BufferedPush&lt;D,P&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (8,713 samples, 72.97%)</title><rect x="22.6028%" y="1093" width="72.9671%" height="15" fill="rgb(252,131,39)" fg:x="2699" fg:w="8713"/><text x="22.8528%" y="1103.50">&lt;pegasus::communication::buffer::rob::BufferedPush&lt;D,P&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_pu..</text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::push (27 samples, 0.23%)</title><rect x="95.3438%" y="1077" width="0.2261%" height="15" fill="rgb(210,108,39)" fg:x="11385" fg:w="27"/><text x="95.5938%" y="1087.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_back (9 samples, 0.08%)</title><rect x="95.4945%" y="1061" width="0.0754%" height="15" fill="rgb(205,23,29)" fg:x="11403" fg:w="9"/><text x="95.7445%" y="1071.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (3 samples, 0.03%)</title><rect x="95.5448%" y="1045" width="0.0251%" height="15" fill="rgb(246,139,46)" fg:x="11409" fg:w="3"/><text x="95.7948%" y="1055.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (3 samples, 0.03%)</title><rect x="95.5448%" y="1029" width="0.0251%" height="15" fill="rgb(250,81,26)" fg:x="11409" fg:w="3"/><text x="95.7948%" y="1039.50"></text></g><g><title>alloc::collections::vec_deque::count (3 samples, 0.03%)</title><rect x="95.5448%" y="1013" width="0.0251%" height="15" fill="rgb(214,104,7)" fg:x="11409" fg:w="3"/><text x="95.7948%" y="1023.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (3 samples, 0.03%)</title><rect x="95.5448%" y="997" width="0.0251%" height="15" fill="rgb(233,189,8)" fg:x="11409" fg:w="3"/><text x="95.7948%" y="1007.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.17%)</title><rect x="95.7123%" y="933" width="0.1675%" height="15" fill="rgb(228,141,17)" fg:x="11429" fg:w="20"/><text x="95.9623%" y="943.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4 samples, 0.03%)</title><rect x="95.8462%" y="917" width="0.0335%" height="15" fill="rgb(247,157,1)" fg:x="11445" fg:w="4"/><text x="96.0962%" y="927.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4 samples, 0.03%)</title><rect x="95.8462%" y="901" width="0.0335%" height="15" fill="rgb(249,225,5)" fg:x="11445" fg:w="4"/><text x="96.0962%" y="911.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.04%)</title><rect x="95.8797%" y="885" width="0.0419%" height="15" fill="rgb(242,55,13)" fg:x="11449" fg:w="5"/><text x="96.1297%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.02%)</title><rect x="95.9216%" y="885" width="0.0167%" height="15" fill="rgb(230,49,50)" fg:x="11454" fg:w="2"/><text x="96.1716%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="95.9384%" y="869" width="0.0167%" height="15" fill="rgb(241,111,38)" fg:x="11456" fg:w="2"/><text x="96.1884%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (5 samples, 0.04%)</title><rect x="95.9551%" y="869" width="0.0419%" height="15" fill="rgb(252,155,4)" fg:x="11458" fg:w="5"/><text x="96.2051%" y="879.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (5 samples, 0.04%)</title><rect x="95.9551%" y="853" width="0.0419%" height="15" fill="rgb(212,69,32)" fg:x="11458" fg:w="5"/><text x="96.2051%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.37%)</title><rect x="95.6536%" y="981" width="0.3685%" height="15" fill="rgb(243,107,47)" fg:x="11422" fg:w="44"/><text x="95.9036%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (44 samples, 0.37%)</title><rect x="95.6536%" y="965" width="0.3685%" height="15" fill="rgb(247,130,12)" fg:x="11422" fg:w="44"/><text x="95.9036%" y="975.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (44 samples, 0.37%)</title><rect x="95.6536%" y="949" width="0.3685%" height="15" fill="rgb(233,74,16)" fg:x="11422" fg:w="44"/><text x="95.9036%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (17 samples, 0.14%)</title><rect x="95.8797%" y="933" width="0.1424%" height="15" fill="rgb(208,58,18)" fg:x="11449" fg:w="17"/><text x="96.1297%" y="943.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (17 samples, 0.14%)</title><rect x="95.8797%" y="917" width="0.1424%" height="15" fill="rgb(242,225,1)" fg:x="11449" fg:w="17"/><text x="96.1297%" y="927.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices::{{closure}} (17 samples, 0.14%)</title><rect x="95.8797%" y="901" width="0.1424%" height="15" fill="rgb(249,39,40)" fg:x="11449" fg:w="17"/><text x="96.1297%" y="911.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_weight (10 samples, 0.08%)</title><rect x="95.9384%" y="885" width="0.0837%" height="15" fill="rgb(207,72,44)" fg:x="11456" fg:w="10"/><text x="96.1884%" y="895.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (3 samples, 0.03%)</title><rect x="95.9970%" y="869" width="0.0251%" height="15" fill="rgb(215,193,12)" fg:x="11463" fg:w="3"/><text x="96.2470%" y="879.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (3 samples, 0.03%)</title><rect x="95.9970%" y="853" width="0.0251%" height="15" fill="rgb(248,41,39)" fg:x="11463" fg:w="3"/><text x="96.2470%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (94 samples, 0.79%)</title><rect x="95.6536%" y="997" width="0.7872%" height="15" fill="rgb(253,85,4)" fg:x="11422" fg:w="94"/><text x="95.9036%" y="1007.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (50 samples, 0.42%)</title><rect x="96.0221%" y="981" width="0.4187%" height="15" fill="rgb(243,70,31)" fg:x="11466" fg:w="50"/><text x="96.2721%" y="991.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (41 samples, 0.34%)</title><rect x="96.0975%" y="965" width="0.3434%" height="15" fill="rgb(253,195,26)" fg:x="11475" fg:w="41"/><text x="96.3475%" y="975.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices::{{closure}} (41 samples, 0.34%)</title><rect x="96.0975%" y="949" width="0.3434%" height="15" fill="rgb(243,42,11)" fg:x="11475" fg:w="41"/><text x="96.3475%" y="959.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::index_to_local_vertex (4 samples, 0.03%)</title><rect x="96.4073%" y="933" width="0.0335%" height="15" fill="rgb(239,66,17)" fg:x="11512" fg:w="4"/><text x="96.6573%" y="943.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (2 samples, 0.02%)</title><rect x="96.4241%" y="917" width="0.0167%" height="15" fill="rgb(217,132,21)" fg:x="11514" fg:w="2"/><text x="96.6741%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="96.4241%" y="901" width="0.0167%" height="15" fill="rgb(252,202,21)" fg:x="11514" fg:w="2"/><text x="96.6741%" y="911.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (2 samples, 0.02%)</title><rect x="96.4241%" y="885" width="0.0167%" height="15" fill="rgb(233,98,36)" fg:x="11514" fg:w="2"/><text x="96.6741%" y="895.50"></text></g><g><title>core::clone::Clone::clone (2 samples, 0.02%)</title><rect x="96.4241%" y="869" width="0.0167%" height="15" fill="rgb(216,153,54)" fg:x="11514" fg:w="2"/><text x="96.6741%" y="879.50"></text></g><g><title>&lt;graph_store::utils::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (99 samples, 0.83%)</title><rect x="95.6285%" y="1029" width="0.8291%" height="15" fill="rgb(250,99,7)" fg:x="11419" fg:w="99"/><text x="95.8785%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;I,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (99 samples, 0.83%)</title><rect x="95.6285%" y="1013" width="0.8291%" height="15" fill="rgb(207,56,50)" fg:x="11419" fg:w="99"/><text x="95.8785%" y="1023.50"></text></g><g><title>[join_benchmark] (2 samples, 0.02%)</title><rect x="96.4408%" y="997" width="0.0167%" height="15" fill="rgb(244,61,34)" fg:x="11516" fg:w="2"/><text x="96.6908%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="96.4408%" y="981" width="0.0167%" height="15" fill="rgb(241,50,38)" fg:x="11516" fg:w="2"/><text x="96.6908%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (109 samples, 0.91%)</title><rect x="95.5699%" y="1077" width="0.9128%" height="15" fill="rgb(212,166,30)" fg:x="11412" fg:w="109"/><text x="95.8199%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (109 samples, 0.91%)</title><rect x="95.5699%" y="1061" width="0.9128%" height="15" fill="rgb(249,127,32)" fg:x="11412" fg:w="109"/><text x="95.8199%" y="1071.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (109 samples, 0.91%)</title><rect x="95.5699%" y="1045" width="0.9128%" height="15" fill="rgb(209,103,0)" fg:x="11412" fg:w="109"/><text x="95.8199%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (3 samples, 0.03%)</title><rect x="96.4576%" y="1029" width="0.0251%" height="15" fill="rgb(238,209,51)" fg:x="11518" fg:w="3"/><text x="96.7076%" y="1039.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (119 samples, 1.00%)</title><rect x="96.5413%" y="981" width="0.9966%" height="15" fill="rgb(237,56,23)" fg:x="11528" fg:w="119"/><text x="96.7913%" y="991.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.03%)</title><rect x="97.5630%" y="933" width="0.0335%" height="15" fill="rgb(215,153,46)" fg:x="11650" fg:w="4"/><text x="97.8130%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.03%)</title><rect x="97.5965%" y="917" width="0.0251%" height="15" fill="rgb(224,49,31)" fg:x="11654" fg:w="3"/><text x="97.8465%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 1.15%)</title><rect x="96.4827%" y="1029" width="1.1473%" height="15" fill="rgb(250,18,42)" fg:x="11521" fg:w="137"/><text x="96.7327%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (137 samples, 1.15%)</title><rect x="96.4827%" y="1013" width="1.1473%" height="15" fill="rgb(215,176,39)" fg:x="11521" fg:w="137"/><text x="96.7327%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (137 samples, 1.15%)</title><rect x="96.4827%" y="997" width="1.1473%" height="15" fill="rgb(223,77,29)" fg:x="11521" fg:w="137"/><text x="96.7327%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (11 samples, 0.09%)</title><rect x="97.5379%" y="981" width="0.0921%" height="15" fill="rgb(234,94,52)" fg:x="11647" fg:w="11"/><text x="97.7879%" y="991.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (8 samples, 0.07%)</title><rect x="97.5630%" y="965" width="0.0670%" height="15" fill="rgb(220,154,50)" fg:x="11650" fg:w="8"/><text x="97.8130%" y="975.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices::{{closure}} (8 samples, 0.07%)</title><rect x="97.5630%" y="949" width="0.0670%" height="15" fill="rgb(212,11,10)" fg:x="11650" fg:w="8"/><text x="97.8130%" y="959.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_weight (4 samples, 0.03%)</title><rect x="97.5965%" y="933" width="0.0335%" height="15" fill="rgb(205,166,19)" fg:x="11654" fg:w="4"/><text x="97.8465%" y="943.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (2 samples, 0.02%)</title><rect x="97.8059%" y="965" width="0.0167%" height="15" fill="rgb(244,198,16)" fg:x="11679" fg:w="2"/><text x="98.0559%" y="975.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="97.8059%" y="949" width="0.0167%" height="15" fill="rgb(219,69,12)" fg:x="11679" fg:w="2"/><text x="98.0559%" y="959.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (2 samples, 0.02%)</title><rect x="97.8059%" y="933" width="0.0167%" height="15" fill="rgb(245,30,7)" fg:x="11679" fg:w="2"/><text x="98.0559%" y="943.50"></text></g><g><title>core::clone::Clone::clone (2 samples, 0.02%)</title><rect x="97.8059%" y="917" width="0.0167%" height="15" fill="rgb(218,221,48)" fg:x="11679" fg:w="2"/><text x="98.0559%" y="927.50"></text></g><g><title>&lt;graph_store::utils::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (161 samples, 1.35%)</title><rect x="96.4827%" y="1077" width="1.3483%" height="15" fill="rgb(216,66,15)" fg:x="11521" fg:w="161"/><text x="96.7327%" y="1087.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;I,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (161 samples, 1.35%)</title><rect x="96.4827%" y="1061" width="1.3483%" height="15" fill="rgb(226,122,50)" fg:x="11521" fg:w="161"/><text x="96.7327%" y="1071.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (161 samples, 1.35%)</title><rect x="96.4827%" y="1045" width="1.3483%" height="15" fill="rgb(239,156,16)" fg:x="11521" fg:w="161"/><text x="96.7327%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (24 samples, 0.20%)</title><rect x="97.6300%" y="1029" width="0.2010%" height="15" fill="rgb(224,27,38)" fg:x="11658" fg:w="24"/><text x="97.8800%" y="1039.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (20 samples, 0.17%)</title><rect x="97.6635%" y="1013" width="0.1675%" height="15" fill="rgb(224,39,27)" fg:x="11662" fg:w="20"/><text x="97.9135%" y="1023.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices::{{closure}} (20 samples, 0.17%)</title><rect x="97.6635%" y="997" width="0.1675%" height="15" fill="rgb(215,92,29)" fg:x="11662" fg:w="20"/><text x="97.9135%" y="1007.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::index_to_local_vertex (4 samples, 0.03%)</title><rect x="97.7975%" y="981" width="0.0335%" height="15" fill="rgb(207,159,16)" fg:x="11678" fg:w="4"/><text x="98.0475%" y="991.50"></text></g><g><title>join_benchmark::g_benchmark4_join::{{closure}}::{{closure}}::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="97.9231%" y="1045" width="0.0167%" height="15" fill="rgb(238,163,47)" fg:x="11693" fg:w="2"/><text x="98.1731%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.07%)</title><rect x="97.9482%" y="965" width="0.0670%" height="15" fill="rgb(219,91,49)" fg:x="11696" fg:w="8"/><text x="98.1982%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.06%)</title><rect x="97.9566%" y="949" width="0.0586%" height="15" fill="rgb(227,167,31)" fg:x="11697" fg:w="7"/><text x="98.2066%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.05%)</title><rect x="97.9650%" y="933" width="0.0502%" height="15" fill="rgb(234,80,54)" fg:x="11698" fg:w="6"/><text x="98.2150%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="97.9901%" y="917" width="0.0251%" height="15" fill="rgb(212,114,2)" fg:x="11701" fg:w="3"/><text x="98.2401%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="97.9901%" y="901" width="0.0251%" height="15" fill="rgb(234,50,24)" fg:x="11701" fg:w="3"/><text x="98.2401%" y="911.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="97.9901%" y="885" width="0.0251%" height="15" fill="rgb(221,68,8)" fg:x="11701" fg:w="3"/><text x="98.2401%" y="895.50"></text></g><g><title>__rdl_alloc (3 samples, 0.03%)</title><rect x="97.9901%" y="869" width="0.0251%" height="15" fill="rgb(254,180,31)" fg:x="11701" fg:w="3"/><text x="98.2401%" y="879.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.03%)</title><rect x="97.9901%" y="853" width="0.0251%" height="15" fill="rgb(247,130,50)" fg:x="11701" fg:w="3"/><text x="98.2401%" y="863.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="97.9901%" y="837" width="0.0251%" height="15" fill="rgb(211,109,4)" fg:x="11701" fg:w="3"/><text x="98.2401%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.09%)</title><rect x="97.9482%" y="1029" width="0.0921%" height="15" fill="rgb(238,50,21)" fg:x="11696" fg:w="11"/><text x="98.1982%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11 samples, 0.09%)</title><rect x="97.9482%" y="1013" width="0.0921%" height="15" fill="rgb(225,57,45)" fg:x="11696" fg:w="11"/><text x="98.1982%" y="1023.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.09%)</title><rect x="97.9482%" y="997" width="0.0921%" height="15" fill="rgb(209,196,50)" fg:x="11696" fg:w="11"/><text x="98.1982%" y="1007.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 0.09%)</title><rect x="97.9482%" y="981" width="0.0921%" height="15" fill="rgb(242,140,13)" fg:x="11696" fg:w="11"/><text x="98.1982%" y="991.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.03%)</title><rect x="98.0152%" y="965" width="0.0251%" height="15" fill="rgb(217,111,7)" fg:x="11704" fg:w="3"/><text x="98.2652%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="98.0152%" y="949" width="0.0251%" height="15" fill="rgb(253,193,51)" fg:x="11704" fg:w="3"/><text x="98.2652%" y="959.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="98.0152%" y="933" width="0.0251%" height="15" fill="rgb(252,70,29)" fg:x="11704" fg:w="3"/><text x="98.2652%" y="943.50"></text></g><g><title>_int_free (5 samples, 0.04%)</title><rect x="98.5261%" y="821" width="0.0419%" height="15" fill="rgb(232,127,12)" fg:x="11765" fg:w="5"/><text x="98.7761%" y="831.50"></text></g><g><title>_int_realloc (37 samples, 0.31%)</title><rect x="98.4842%" y="837" width="0.3099%" height="15" fill="rgb(211,180,21)" fg:x="11760" fg:w="37"/><text x="98.7342%" y="847.50"></text></g><g><title>_int_malloc (27 samples, 0.23%)</title><rect x="98.5680%" y="821" width="0.2261%" height="15" fill="rgb(229,72,13)" fg:x="11770" fg:w="27"/><text x="98.8180%" y="831.50"></text></g><g><title>alloc::raw_vec::finish_grow (85 samples, 0.71%)</title><rect x="98.0990%" y="949" width="0.7118%" height="15" fill="rgb(240,211,49)" fg:x="11714" fg:w="85"/><text x="98.3490%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (83 samples, 0.70%)</title><rect x="98.1157%" y="933" width="0.6951%" height="15" fill="rgb(219,149,40)" fg:x="11716" fg:w="83"/><text x="98.3657%" y="943.50"></text></g><g><title>alloc::alloc::Global::grow_impl (83 samples, 0.70%)</title><rect x="98.1157%" y="917" width="0.6951%" height="15" fill="rgb(210,127,46)" fg:x="11716" fg:w="83"/><text x="98.3657%" y="927.50"></text></g><g><title>alloc::alloc::realloc (83 samples, 0.70%)</title><rect x="98.1157%" y="901" width="0.6951%" height="15" fill="rgb(220,106,7)" fg:x="11716" fg:w="83"/><text x="98.3657%" y="911.50"></text></g><g><title>__rdl_realloc (83 samples, 0.70%)</title><rect x="98.1157%" y="885" width="0.6951%" height="15" fill="rgb(249,31,22)" fg:x="11716" fg:w="83"/><text x="98.3657%" y="895.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (83 samples, 0.70%)</title><rect x="98.1157%" y="869" width="0.6951%" height="15" fill="rgb(253,1,49)" fg:x="11716" fg:w="83"/><text x="98.3657%" y="879.50"></text></g><g><title>__GI___libc_realloc (82 samples, 0.69%)</title><rect x="98.1241%" y="853" width="0.6867%" height="15" fill="rgb(227,144,33)" fg:x="11717" fg:w="82"/><text x="98.3741%" y="863.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="98.7941%" y="837" width="0.0167%" height="15" fill="rgb(249,163,44)" fg:x="11797" fg:w="2"/><text x="99.0441%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (92 samples, 0.77%)</title><rect x="98.0655%" y="1013" width="0.7705%" height="15" fill="rgb(234,15,39)" fg:x="11710" fg:w="92"/><text x="98.3155%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (92 samples, 0.77%)</title><rect x="98.0655%" y="997" width="0.7705%" height="15" fill="rgb(207,66,16)" fg:x="11710" fg:w="92"/><text x="98.3155%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (91 samples, 0.76%)</title><rect x="98.0739%" y="981" width="0.7621%" height="15" fill="rgb(233,112,24)" fg:x="11711" fg:w="91"/><text x="98.3239%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (91 samples, 0.76%)</title><rect x="98.0739%" y="965" width="0.7621%" height="15" fill="rgb(230,90,22)" fg:x="11711" fg:w="91"/><text x="98.3239%" y="975.50"></text></g><g><title>core::cmp::max (3 samples, 0.03%)</title><rect x="98.8108%" y="949" width="0.0251%" height="15" fill="rgb(229,61,13)" fg:x="11799" fg:w="3"/><text x="99.0608%" y="959.50"></text></g><g><title>core::cmp::Ord::max (3 samples, 0.03%)</title><rect x="98.8108%" y="933" width="0.0251%" height="15" fill="rgb(225,57,24)" fg:x="11799" fg:w="3"/><text x="99.0608%" y="943.50"></text></g><g><title>core::cmp::max_by (3 samples, 0.03%)</title><rect x="98.8108%" y="917" width="0.0251%" height="15" fill="rgb(208,169,48)" fg:x="11799" fg:w="3"/><text x="99.0608%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (96 samples, 0.80%)</title><rect x="98.0404%" y="1029" width="0.8040%" height="15" fill="rgb(244,218,51)" fg:x="11707" fg:w="96"/><text x="98.2904%" y="1039.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (394 samples, 3.30%)</title><rect x="95.5699%" y="1093" width="3.2996%" height="15" fill="rgb(214,148,10)" fg:x="11412" fg:w="394"/><text x="95.8199%" y="1103.50">&lt;co..</text></g><g><title>core::option::Option&lt;T&gt;::map (124 samples, 1.04%)</title><rect x="97.8310%" y="1077" width="1.0384%" height="15" fill="rgb(225,174,27)" fg:x="11682" fg:w="124"/><text x="98.0810%" y="1087.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (116 samples, 0.97%)</title><rect x="97.8980%" y="1061" width="0.9714%" height="15" fill="rgb(230,96,26)" fg:x="11690" fg:w="116"/><text x="98.1480%" y="1071.50"></text></g><g><title>join_benchmark::s_benchmark1_join::{{closure}}::{{closure}}::{{closure}}::{{closure}} (111 samples, 0.93%)</title><rect x="97.9399%" y="1045" width="0.9296%" height="15" fill="rgb(232,10,30)" fg:x="11695" fg:w="111"/><text x="98.1899%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph_store::graph_db::LocalVertex&lt;usize&gt;&gt; (3 samples, 0.03%)</title><rect x="98.8443%" y="1029" width="0.0251%" height="15" fill="rgb(222,8,50)" fg:x="11803" fg:w="3"/><text x="99.0943%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;graph_store::graph_db::RowWithSchema&gt;&gt; (3 samples, 0.03%)</title><rect x="98.8443%" y="1013" width="0.0251%" height="15" fill="rgb(213,81,27)" fg:x="11803" fg:w="3"/><text x="99.0943%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.02%)</title><rect x="98.8694%" y="1077" width="0.0167%" height="15" fill="rgb(245,50,10)" fg:x="11806" fg:w="2"/><text x="99.1194%" y="1087.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::is_full (3 samples, 0.03%)</title><rect x="98.8694%" y="1093" width="0.0251%" height="15" fill="rgb(216,100,18)" fg:x="11806" fg:w="3"/><text x="99.1194%" y="1103.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire (9,118 samples, 76.36%)</title><rect x="22.6028%" y="1397" width="76.3588%" height="15" fill="rgb(236,147,54)" fg:x="2699" fg:w="9118"/><text x="22.8528%" y="1407.50">pegasus::schedule::strategies::WaterfallStrategy::fire</text></g><g><title>pegasus::dataflow::Dataflow::try_fire (9,118 samples, 76.36%)</title><rect x="22.6028%" y="1381" width="76.3588%" height="15" fill="rgb(205,143,26)" fg:x="2699" fg:w="9118"/><text x="22.8528%" y="1391.50">pegasus::dataflow::Dataflow::try_fire</text></g><g><title>pegasus::operator::Operator::fire (9,118 samples, 76.36%)</title><rect x="22.6028%" y="1365" width="76.3588%" height="15" fill="rgb(236,26,9)" fg:x="2699" fg:w="9118"/><text x="22.8528%" y="1375.50">pegasus::operator::Operator::fire</text></g><g><title>pegasus::operator::Operator::fire_inner (9,118 samples, 76.36%)</title><rect x="22.6028%" y="1349" width="76.3588%" height="15" fill="rgb(221,165,53)" fg:x="2699" fg:w="9118"/><text x="22.8528%" y="1359.50">pegasus::operator::Operator::fire_inner</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (9,118 samples, 76.36%)</title><rect x="22.6028%" y="1333" width="76.3588%" height="15" fill="rgb(214,110,17)" fg:x="2699" fg:w="9118"/><text x="22.8528%" y="1343.50">&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive</text></g><g><title>&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (9,118 samples, 76.36%)</title><rect x="22.6028%" y="1317" width="76.3588%" height="15" fill="rgb(237,197,12)" fg:x="2699" fg:w="9118"/><text x="22.8528%" y="1327.50">&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (9,118 samples, 76.36%)</title><rect x="22.6028%" y="1301" width="76.3588%" height="15" fill="rgb(205,84,17)" fg:x="2699" fg:w="9118"/><text x="22.8528%" y="1311.50">&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (9,118 samples, 76.36%)</title><rect x="22.6028%" y="1285" width="76.3588%" height="15" fill="rgb(237,18,45)" fg:x="2699" fg:w="9118"/><text x="22.8528%" y="1295.50">&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive</text></g><g><title>&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive (9,118 samples, 76.36%)</title><rect x="22.6028%" y="1269" width="76.3588%" height="15" fill="rgb(221,87,14)" fg:x="2699" fg:w="9118"/><text x="22.8528%" y="1279.50">&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive</text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}} (9,118 samples, 76.36%)</title><rect x="22.6028%" y="1253" width="76.3588%" height="15" fill="rgb(238,186,15)" fg:x="2699" fg:w="9118"/><text x="22.8528%" y="1263.50">pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}..</text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch (9,118 samples, 76.36%)</title><rect x="22.6028%" y="1237" width="76.3588%" height="15" fill="rgb(208,115,11)" fg:x="2699" fg:w="9118"/><text x="22.8528%" y="1247.50">pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch</text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (405 samples, 3.39%)</title><rect x="95.5699%" y="1221" width="3.3917%" height="15" fill="rgb(254,175,0)" fg:x="11412" fg:w="405"/><text x="95.8199%" y="1231.50">peg..</text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (405 samples, 3.39%)</title><rect x="95.5699%" y="1205" width="3.3917%" height="15" fill="rgb(227,24,42)" fg:x="11412" fg:w="405"/><text x="95.8199%" y="1215.50">peg..</text></g><g><title>pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::push_iter (405 samples, 3.39%)</title><rect x="95.5699%" y="1189" width="3.3917%" height="15" fill="rgb(223,211,37)" fg:x="11412" fg:w="405"/><text x="95.8199%" y="1199.50">peg..</text></g><g><title>&lt;pegasus::communication::output::output::rob::OutputHandle&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (405 samples, 3.39%)</title><rect x="95.5699%" y="1173" width="3.3917%" height="15" fill="rgb(235,49,27)" fg:x="11412" fg:w="405"/><text x="95.8199%" y="1183.50">&lt;pe..</text></g><g><title>&lt;pegasus::communication::output::tee::rob::Tee&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (405 samples, 3.39%)</title><rect x="95.5699%" y="1157" width="3.3917%" height="15" fill="rgb(254,97,51)" fg:x="11412" fg:w="405"/><text x="95.8199%" y="1167.50">&lt;pe..</text></g><g><title>&lt;pegasus::communication::output::tee::rob::ChannelPush&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (405 samples, 3.39%)</title><rect x="95.5699%" y="1141" width="3.3917%" height="15" fill="rgb(249,51,40)" fg:x="11412" fg:w="405"/><text x="95.8199%" y="1151.50">&lt;pe..</text></g><g><title>&lt;pegasus::communication::decorator::rob::MicroBatchPush&lt;T&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;T&gt;&gt;::try_push_iter (405 samples, 3.39%)</title><rect x="95.5699%" y="1125" width="3.3917%" height="15" fill="rgb(210,128,45)" fg:x="11412" fg:w="405"/><text x="95.8199%" y="1135.50">&lt;pe..</text></g><g><title>&lt;pegasus::communication::buffer::rob::BufferedPush&lt;D,P&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (405 samples, 3.39%)</title><rect x="95.5699%" y="1109" width="3.3917%" height="15" fill="rgb(224,137,50)" fg:x="11412" fg:w="405"/><text x="95.8199%" y="1119.50">&lt;pe..</text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::push (8 samples, 0.07%)</title><rect x="98.8946%" y="1093" width="0.0670%" height="15" fill="rgb(242,15,9)" fg:x="11809" fg:w="8"/><text x="99.1446%" y="1103.50"></text></g><g><title>&lt;pegasus::communication::decorator::rob::MicroBatchPush&lt;T&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;T&gt;&gt;::try_push_iter (19 samples, 0.16%)</title><rect x="99.0369%" y="1077" width="0.1591%" height="15" fill="rgb(233,187,41)" fg:x="11826" fg:w="19"/><text x="99.2869%" y="1087.50"></text></g><g><title>&lt;pegasus::communication::buffer::rob::BufferedPush&lt;D,P&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (3 samples, 0.03%)</title><rect x="99.1709%" y="1061" width="0.0251%" height="15" fill="rgb(227,2,29)" fg:x="11842" fg:w="3"/><text x="99.4209%" y="1071.50"></text></g><g><title>pegasus::api::scope::MergedScopeDelta::evolve (4 samples, 0.03%)</title><rect x="99.1960%" y="1077" width="0.0335%" height="15" fill="rgb(222,70,3)" fg:x="11845" fg:w="4"/><text x="99.4460%" y="1087.50"></text></g><g><title>&lt;pegasus::tag::Tag as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="99.2128%" y="1061" width="0.0167%" height="15" fill="rgb(213,11,42)" fg:x="11847" fg:w="2"/><text x="99.4628%" y="1071.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (2 samples, 0.02%)</title><rect x="99.2965%" y="1061" width="0.0167%" height="15" fill="rgb(225,150,9)" fg:x="11857" fg:w="2"/><text x="99.5465%" y="1071.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (2 samples, 0.02%)</title><rect x="99.2965%" y="1045" width="0.0167%" height="15" fill="rgb(230,162,45)" fg:x="11857" fg:w="2"/><text x="99.5465%" y="1055.50"></text></g><g><title>core::cell::BorrowRef::new (2 samples, 0.02%)</title><rect x="99.2965%" y="1029" width="0.0167%" height="15" fill="rgb(222,14,52)" fg:x="11857" fg:w="2"/><text x="99.5465%" y="1039.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch_of (52 samples, 0.44%)</title><rect x="98.9616%" y="1189" width="0.4355%" height="15" fill="rgb(254,198,14)" fg:x="11817" fg:w="52"/><text x="99.2116%" y="1199.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (52 samples, 0.44%)</title><rect x="98.9616%" y="1173" width="0.4355%" height="15" fill="rgb(220,217,30)" fg:x="11817" fg:w="52"/><text x="99.2116%" y="1183.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (52 samples, 0.44%)</title><rect x="98.9616%" y="1157" width="0.4355%" height="15" fill="rgb(215,146,41)" fg:x="11817" fg:w="52"/><text x="99.2116%" y="1167.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::push_iter (52 samples, 0.44%)</title><rect x="98.9616%" y="1141" width="0.4355%" height="15" fill="rgb(217,27,36)" fg:x="11817" fg:w="52"/><text x="99.2116%" y="1151.50"></text></g><g><title>&lt;pegasus::communication::output::output::rob::OutputHandle&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (52 samples, 0.44%)</title><rect x="98.9616%" y="1125" width="0.4355%" height="15" fill="rgb(219,218,39)" fg:x="11817" fg:w="52"/><text x="99.2116%" y="1135.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::Tee&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (52 samples, 0.44%)</title><rect x="98.9616%" y="1109" width="0.4355%" height="15" fill="rgb(219,4,42)" fg:x="11817" fg:w="52"/><text x="99.2116%" y="1119.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::ChannelPush&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (52 samples, 0.44%)</title><rect x="98.9616%" y="1093" width="0.4355%" height="15" fill="rgb(249,119,36)" fg:x="11817" fg:w="52"/><text x="99.2116%" y="1103.50"></text></g><g><title>pegasus::communication::output::tee::ChannelCancelPtr::is_canceled (20 samples, 0.17%)</title><rect x="99.2295%" y="1077" width="0.1675%" height="15" fill="rgb(209,23,33)" fg:x="11849" fg:w="20"/><text x="99.4795%" y="1087.50"></text></g><g><title>pegasus::communication::output::tee::ChannelCancel::is_canceled (10 samples, 0.08%)</title><rect x="99.3133%" y="1061" width="0.0837%" height="15" fill="rgb(211,10,0)" fg:x="11859" fg:w="10"/><text x="99.5633%" y="1071.50"></text></g><g><title>pegasus::tag::tools::map::TidyTagMap&lt;V&gt;::is_empty (2 samples, 0.02%)</title><rect x="99.3803%" y="1045" width="0.0167%" height="15" fill="rgb(208,99,37)" fg:x="11867" fg:w="2"/><text x="99.6303%" y="1055.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (9,180 samples, 76.88%)</title><rect x="22.5442%" y="1429" width="76.8780%" height="15" fill="rgb(213,132,31)" fg:x="2692" fg:w="9180"/><text x="22.7942%" y="1439.50">pegasus::schedule::strategies::WaterfallStrategy::fire_follows</text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (9,173 samples, 76.82%)</title><rect x="22.6028%" y="1413" width="76.8194%" height="15" fill="rgb(243,129,40)" fg:x="2699" fg:w="9173"/><text x="22.8528%" y="1423.50">pegasus::schedule::strategies::WaterfallStrategy::fire_follows</text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (55 samples, 0.46%)</title><rect x="98.9616%" y="1397" width="0.4606%" height="15" fill="rgb(210,66,33)" fg:x="11817" fg:w="55"/><text x="99.2116%" y="1407.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (55 samples, 0.46%)</title><rect x="98.9616%" y="1381" width="0.4606%" height="15" fill="rgb(209,189,4)" fg:x="11817" fg:w="55"/><text x="99.2116%" y="1391.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire (55 samples, 0.46%)</title><rect x="98.9616%" y="1365" width="0.4606%" height="15" fill="rgb(214,107,37)" fg:x="11817" fg:w="55"/><text x="99.2116%" y="1375.50"></text></g><g><title>pegasus::dataflow::Dataflow::try_fire (55 samples, 0.46%)</title><rect x="98.9616%" y="1349" width="0.4606%" height="15" fill="rgb(245,88,54)" fg:x="11817" fg:w="55"/><text x="99.2116%" y="1359.50"></text></g><g><title>pegasus::operator::Operator::fire (55 samples, 0.46%)</title><rect x="98.9616%" y="1333" width="0.4606%" height="15" fill="rgb(205,146,20)" fg:x="11817" fg:w="55"/><text x="99.2116%" y="1343.50"></text></g><g><title>pegasus::operator::Operator::fire_inner (55 samples, 0.46%)</title><rect x="98.9616%" y="1317" width="0.4606%" height="15" fill="rgb(220,161,25)" fg:x="11817" fg:w="55"/><text x="99.2116%" y="1327.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (55 samples, 0.46%)</title><rect x="98.9616%" y="1301" width="0.4606%" height="15" fill="rgb(215,152,15)" fg:x="11817" fg:w="55"/><text x="99.2116%" y="1311.50"></text></g><g><title>&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (55 samples, 0.46%)</title><rect x="98.9616%" y="1285" width="0.4606%" height="15" fill="rgb(233,192,44)" fg:x="11817" fg:w="55"/><text x="99.2116%" y="1295.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (55 samples, 0.46%)</title><rect x="98.9616%" y="1269" width="0.4606%" height="15" fill="rgb(240,170,46)" fg:x="11817" fg:w="55"/><text x="99.2116%" y="1279.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (55 samples, 0.46%)</title><rect x="98.9616%" y="1253" width="0.4606%" height="15" fill="rgb(207,104,33)" fg:x="11817" fg:w="55"/><text x="99.2116%" y="1263.50"></text></g><g><title>&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive (55 samples, 0.46%)</title><rect x="98.9616%" y="1237" width="0.4606%" height="15" fill="rgb(219,21,39)" fg:x="11817" fg:w="55"/><text x="99.2116%" y="1247.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}} (55 samples, 0.46%)</title><rect x="98.9616%" y="1221" width="0.4606%" height="15" fill="rgb(214,133,29)" fg:x="11817" fg:w="55"/><text x="99.2116%" y="1231.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch (55 samples, 0.46%)</title><rect x="98.9616%" y="1205" width="0.4606%" height="15" fill="rgb(226,93,6)" fg:x="11817" fg:w="55"/><text x="99.2116%" y="1215.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (3 samples, 0.03%)</title><rect x="99.3970%" y="1189" width="0.0251%" height="15" fill="rgb(252,222,34)" fg:x="11869" fg:w="3"/><text x="99.6470%" y="1199.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (3 samples, 0.03%)</title><rect x="99.3970%" y="1173" width="0.0251%" height="15" fill="rgb(252,92,48)" fg:x="11869" fg:w="3"/><text x="99.6470%" y="1183.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputHandle&lt;D&gt;::push_iter (3 samples, 0.03%)</title><rect x="99.3970%" y="1157" width="0.0251%" height="15" fill="rgb(245,223,24)" fg:x="11869" fg:w="3"/><text x="99.6470%" y="1167.50"></text></g><g><title>&lt;pegasus::communication::output::output::rob::OutputHandle&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (3 samples, 0.03%)</title><rect x="99.3970%" y="1141" width="0.0251%" height="15" fill="rgb(205,176,3)" fg:x="11869" fg:w="3"/><text x="99.6470%" y="1151.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::Tee&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (3 samples, 0.03%)</title><rect x="99.3970%" y="1125" width="0.0251%" height="15" fill="rgb(235,151,15)" fg:x="11869" fg:w="3"/><text x="99.6470%" y="1135.50"></text></g><g><title>&lt;pegasus::communication::output::tee::rob::ChannelPush&lt;D&gt; as pegasus::communication::decorator::ScopeStreamPush&lt;D&gt;&gt;::try_push_iter (3 samples, 0.03%)</title><rect x="99.3970%" y="1109" width="0.0251%" height="15" fill="rgb(237,209,11)" fg:x="11869" fg:w="3"/><text x="99.6470%" y="1119.50"></text></g><g><title>pegasus::tag::tools::map::TidyTagMap&lt;V&gt;::contains_key (4 samples, 0.03%)</title><rect x="99.4222%" y="1429" width="0.0335%" height="15" fill="rgb(243,227,24)" fg:x="11872" fg:w="4"/><text x="99.6722%" y="1439.50"></text></g><g><title>pegasus::tag::tools::map::TidyTagMap&lt;V&gt;::get_mut (3 samples, 0.03%)</title><rect x="99.4557%" y="1429" width="0.0251%" height="15" fill="rgb(239,193,16)" fg:x="11876" fg:w="3"/><text x="99.7057%" y="1439.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire (2 samples, 0.02%)</title><rect x="99.4808%" y="1317" width="0.0167%" height="15" fill="rgb(231,27,9)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1327.50"></text></g><g><title>pegasus::dataflow::Dataflow::try_fire (2 samples, 0.02%)</title><rect x="99.4808%" y="1301" width="0.0167%" height="15" fill="rgb(219,169,10)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1311.50"></text></g><g><title>pegasus::operator::Operator::fire (2 samples, 0.02%)</title><rect x="99.4808%" y="1285" width="0.0167%" height="15" fill="rgb(244,229,43)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1295.50"></text></g><g><title>pegasus::operator::Operator::fire_inner (2 samples, 0.02%)</title><rect x="99.4808%" y="1269" width="0.0167%" height="15" fill="rgb(254,38,20)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1279.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (2 samples, 0.02%)</title><rect x="99.4808%" y="1253" width="0.0167%" height="15" fill="rgb(250,47,30)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1263.50"></text></g><g><title>&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (2 samples, 0.02%)</title><rect x="99.4808%" y="1237" width="0.0167%" height="15" fill="rgb(224,124,36)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1247.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (2 samples, 0.02%)</title><rect x="99.4808%" y="1221" width="0.0167%" height="15" fill="rgb(246,68,51)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1231.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (2 samples, 0.02%)</title><rect x="99.4808%" y="1205" width="0.0167%" height="15" fill="rgb(253,43,49)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1215.50"></text></g><g><title>&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive (2 samples, 0.02%)</title><rect x="99.4808%" y="1189" width="0.0167%" height="15" fill="rgb(219,54,36)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1199.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="99.4808%" y="1173" width="0.0167%" height="15" fill="rgb(227,133,34)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1183.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch (2 samples, 0.02%)</title><rect x="99.4808%" y="1157" width="0.0167%" height="15" fill="rgb(247,227,15)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1167.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch_of (2 samples, 0.02%)</title><rect x="99.4808%" y="1141" width="0.0167%" height="15" fill="rgb(229,96,14)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1151.50"></text></g><g><title>pegasus::communication::input::input::InputHandle&lt;D&gt;::next_of (2 samples, 0.02%)</title><rect x="99.4808%" y="1125" width="0.0167%" height="15" fill="rgb(220,79,17)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1135.50"></text></g><g><title>&lt;pegasus::tag::tools::map::TidyTagMap&lt;V&gt; as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="99.4808%" y="1109" width="0.0167%" height="15" fill="rgb(205,131,53)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1119.50"></text></g><g><title>pegasus::tag::tools::map::TidyTagMap&lt;V&gt;::new (2 samples, 0.02%)</title><rect x="99.4808%" y="1093" width="0.0167%" height="15" fill="rgb(209,50,29)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1103.50"></text></g><g><title>ahash::hash_map::AHashMap&lt;K,V&gt;::new (2 samples, 0.02%)</title><rect x="99.4808%" y="1077" width="0.0167%" height="15" fill="rgb(245,86,46)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1087.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="99.4808%" y="1061" width="0.0167%" height="15" fill="rgb(235,66,46)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1071.50"></text></g><g><title>ahash::random_state::RandomState::new (2 samples, 0.02%)</title><rect x="99.4808%" y="1045" width="0.0167%" height="15" fill="rgb(232,148,31)" fg:x="11879" fg:w="2"/><text x="99.7308%" y="1055.50"></text></g><g><title>pegasus::worker::WorkerTask::execute (5 samples, 0.04%)</title><rect x="99.4808%" y="1429" width="0.0419%" height="15" fill="rgb(217,149,8)" fg:x="11879" fg:w="5"/><text x="99.7308%" y="1439.50"></text></g><g><title>pegasus::schedule::Schedule::step (5 samples, 0.04%)</title><rect x="99.4808%" y="1413" width="0.0419%" height="15" fill="rgb(209,183,11)" fg:x="11879" fg:w="5"/><text x="99.7308%" y="1423.50"></text></g><g><title>&lt;pegasus::schedule::strategies::WaterfallStrategy as pegasus::schedule::StepStrategy&gt;::make_step (5 samples, 0.04%)</title><rect x="99.4808%" y="1397" width="0.0419%" height="15" fill="rgb(208,55,20)" fg:x="11879" fg:w="5"/><text x="99.7308%" y="1407.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (5 samples, 0.04%)</title><rect x="99.4808%" y="1381" width="0.0419%" height="15" fill="rgb(218,39,14)" fg:x="11879" fg:w="5"/><text x="99.7308%" y="1391.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (5 samples, 0.04%)</title><rect x="99.4808%" y="1365" width="0.0419%" height="15" fill="rgb(216,169,33)" fg:x="11879" fg:w="5"/><text x="99.7308%" y="1375.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (5 samples, 0.04%)</title><rect x="99.4808%" y="1349" width="0.0419%" height="15" fill="rgb(233,80,24)" fg:x="11879" fg:w="5"/><text x="99.7308%" y="1359.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (5 samples, 0.04%)</title><rect x="99.4808%" y="1333" width="0.0419%" height="15" fill="rgb(213,179,31)" fg:x="11879" fg:w="5"/><text x="99.7308%" y="1343.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (3 samples, 0.03%)</title><rect x="99.4975%" y="1317" width="0.0251%" height="15" fill="rgb(209,19,5)" fg:x="11881" fg:w="3"/><text x="99.7475%" y="1327.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire (3 samples, 0.03%)</title><rect x="99.4975%" y="1301" width="0.0251%" height="15" fill="rgb(219,18,35)" fg:x="11881" fg:w="3"/><text x="99.7475%" y="1311.50"></text></g><g><title>pegasus::dataflow::Dataflow::try_fire (3 samples, 0.03%)</title><rect x="99.4975%" y="1285" width="0.0251%" height="15" fill="rgb(209,169,16)" fg:x="11881" fg:w="3"/><text x="99.7475%" y="1295.50"></text></g><g><title>pegasus::operator::Operator::fire (3 samples, 0.03%)</title><rect x="99.4975%" y="1269" width="0.0251%" height="15" fill="rgb(245,90,51)" fg:x="11881" fg:w="3"/><text x="99.7475%" y="1279.50"></text></g><g><title>pegasus::operator::Operator::fire_inner (3 samples, 0.03%)</title><rect x="99.4975%" y="1253" width="0.0251%" height="15" fill="rgb(220,99,45)" fg:x="11881" fg:w="3"/><text x="99.7475%" y="1263.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="99.4975%" y="1237" width="0.0251%" height="15" fill="rgb(249,89,25)" fg:x="11881" fg:w="3"/><text x="99.7475%" y="1247.50"></text></g><g><title>&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="99.4975%" y="1221" width="0.0251%" height="15" fill="rgb(239,193,0)" fg:x="11881" fg:w="3"/><text x="99.7475%" y="1231.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="99.4975%" y="1205" width="0.0251%" height="15" fill="rgb(231,126,1)" fg:x="11881" fg:w="3"/><text x="99.7475%" y="1215.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="99.4975%" y="1189" width="0.0251%" height="15" fill="rgb(243,166,3)" fg:x="11881" fg:w="3"/><text x="99.7475%" y="1199.50"></text></g><g><title>&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive (3 samples, 0.03%)</title><rect x="99.4975%" y="1173" width="0.0251%" height="15" fill="rgb(223,22,34)" fg:x="11881" fg:w="3"/><text x="99.7475%" y="1183.50"></text></g><g><title>pegasus::operator::concise::count::&lt;impl pegasus::api::concise::count::Count&lt;D&gt; for pegasus::stream::Stream&lt;D&gt;&gt;::count::{{closure}}::{{closure}} (3 samples, 0.03%)</title><rect x="99.4975%" y="1157" width="0.0251%" height="15" fill="rgb(251,52,51)" fg:x="11881" fg:w="3"/><text x="99.7475%" y="1167.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch (3 samples, 0.03%)</title><rect x="99.4975%" y="1141" width="0.0251%" height="15" fill="rgb(221,165,28)" fg:x="11881" fg:w="3"/><text x="99.7475%" y="1151.50"></text></g><g><title>pegasus::operator::concise::count::&lt;impl pegasus::api::concise::count::Count&lt;D&gt; for pegasus::stream::Stream&lt;D&gt;&gt;::count::{{closure}}::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="99.5059%" y="1125" width="0.0167%" height="15" fill="rgb(218,121,47)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="1135.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::clear (2 samples, 0.02%)</title><rect x="99.5059%" y="1109" width="0.0167%" height="15" fill="rgb(209,120,9)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="1119.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="99.5059%" y="1093" width="0.0167%" height="15" fill="rgb(236,68,12)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="1103.50"></text></g><g><title>pegasus_common::buffer::rob::Batch&lt;D&gt;::clear::{{closure}} (2 samples, 0.02%)</title><rect x="99.5059%" y="1077" width="0.0167%" height="15" fill="rgb(225,194,26)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="1087.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::clear (2 samples, 0.02%)</title><rect x="99.5059%" y="1061" width="0.0167%" height="15" fill="rgb(231,84,39)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="1071.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::truncate (2 samples, 0.02%)</title><rect x="99.5059%" y="1045" width="0.0167%" height="15" fill="rgb(210,11,45)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u64&gt;]&gt; (2 samples, 0.02%)</title><rect x="99.5059%" y="1029" width="0.0167%" height="15" fill="rgb(224,54,52)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (2 samples, 0.02%)</title><rect x="99.5059%" y="1013" width="0.0167%" height="15" fill="rgb(238,102,14)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (2 samples, 0.02%)</title><rect x="99.5059%" y="997" width="0.0167%" height="15" fill="rgb(243,160,52)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="99.5059%" y="981" width="0.0167%" height="15" fill="rgb(216,114,19)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="99.5059%" y="965" width="0.0167%" height="15" fill="rgb(244,166,37)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="975.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="99.5059%" y="949" width="0.0167%" height="15" fill="rgb(246,29,44)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="959.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="99.5059%" y="933" width="0.0167%" height="15" fill="rgb(215,56,53)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="943.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="99.5059%" y="917" width="0.0167%" height="15" fill="rgb(217,60,2)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="927.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="99.5059%" y="901" width="0.0167%" height="15" fill="rgb(207,26,24)" fg:x="11882" fg:w="2"/><text x="99.7559%" y="911.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="99.5310%" y="981" width="0.0167%" height="15" fill="rgb(252,210,15)" fg:x="11885" fg:w="2"/><text x="99.7810%" y="991.50"></text></g><g><title>&lt;pegasus_common::buffer::rob::Batch&lt;D&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="99.5310%" y="965" width="0.0167%" height="15" fill="rgb(253,209,26)" fg:x="11885" fg:w="2"/><text x="99.7810%" y="975.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (2 samples, 0.02%)</title><rect x="99.5310%" y="949" width="0.0167%" height="15" fill="rgb(238,170,14)" fg:x="11885" fg:w="2"/><text x="99.7810%" y="959.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch_of (14 samples, 0.12%)</title><rect x="99.5227%" y="1013" width="0.1172%" height="15" fill="rgb(216,178,15)" fg:x="11884" fg:w="14"/><text x="99.7727%" y="1023.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (14 samples, 0.12%)</title><rect x="99.5227%" y="997" width="0.1172%" height="15" fill="rgb(250,197,2)" fg:x="11884" fg:w="14"/><text x="99.7727%" y="1007.50"></text></g><g><title>join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}} (11 samples, 0.09%)</title><rect x="99.5478%" y="981" width="0.0921%" height="15" fill="rgb(212,70,42)" fg:x="11887" fg:w="11"/><text x="99.7978%" y="991.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices (10 samples, 0.08%)</title><rect x="99.5562%" y="965" width="0.0837%" height="15" fill="rgb(227,213,9)" fg:x="11888" fg:w="10"/><text x="99.8062%" y="975.50"></text></g><g><title>graph_store::graph_db_impl::IndexData&lt;G,I&gt;::get_internal_id (10 samples, 0.08%)</title><rect x="99.5562%" y="949" width="0.0837%" height="15" fill="rgb(245,99,25)" fg:x="11888" fg:w="10"/><text x="99.8062%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (10 samples, 0.08%)</title><rect x="99.5562%" y="933" width="0.0837%" height="15" fill="rgb(250,82,29)" fg:x="11888" fg:w="10"/><text x="99.8062%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (10 samples, 0.08%)</title><rect x="99.5562%" y="917" width="0.0837%" height="15" fill="rgb(241,226,54)" fg:x="11888" fg:w="10"/><text x="99.8062%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10 samples, 0.08%)</title><rect x="99.5562%" y="901" width="0.0837%" height="15" fill="rgb(221,99,41)" fg:x="11888" fg:w="10"/><text x="99.8062%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9 samples, 0.08%)</title><rect x="99.5645%" y="885" width="0.0754%" height="15" fill="rgb(213,90,21)" fg:x="11889" fg:w="9"/><text x="99.8145%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.08%)</title><rect x="99.5645%" y="869" width="0.0754%" height="15" fill="rgb(205,208,24)" fg:x="11889" fg:w="9"/><text x="99.8145%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (5 samples, 0.04%)</title><rect x="99.5980%" y="853" width="0.0419%" height="15" fill="rgb(246,31,12)" fg:x="11893" fg:w="5"/><text x="99.8480%" y="863.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (5 samples, 0.04%)</title><rect x="99.5980%" y="837" width="0.0419%" height="15" fill="rgb(213,154,6)" fg:x="11893" fg:w="5"/><text x="99.8480%" y="847.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (5 samples, 0.04%)</title><rect x="99.5980%" y="821" width="0.0419%" height="15" fill="rgb(222,163,29)" fg:x="11893" fg:w="5"/><text x="99.8480%" y="831.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.03%)</title><rect x="99.6064%" y="805" width="0.0335%" height="15" fill="rgb(227,201,8)" fg:x="11894" fg:w="4"/><text x="99.8564%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.03%)</title><rect x="99.6064%" y="789" width="0.0335%" height="15" fill="rgb(233,9,32)" fg:x="11894" fg:w="4"/><text x="99.8564%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.03%)</title><rect x="99.6064%" y="773" width="0.0335%" height="15" fill="rgb(217,54,24)" fg:x="11894" fg:w="4"/><text x="99.8564%" y="783.50"></text></g><g><title>graph_store::graph_db_impl::IndexData&lt;G,I&gt;::get_internal_id (10 samples, 0.08%)</title><rect x="99.6399%" y="965" width="0.0837%" height="15" fill="rgb(235,192,0)" fg:x="11898" fg:w="10"/><text x="99.8899%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (10 samples, 0.08%)</title><rect x="99.6399%" y="949" width="0.0837%" height="15" fill="rgb(235,45,9)" fg:x="11898" fg:w="10"/><text x="99.8899%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (10 samples, 0.08%)</title><rect x="99.6399%" y="933" width="0.0837%" height="15" fill="rgb(246,42,40)" fg:x="11898" fg:w="10"/><text x="99.8899%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10 samples, 0.08%)</title><rect x="99.6399%" y="917" width="0.0837%" height="15" fill="rgb(248,111,24)" fg:x="11898" fg:w="10"/><text x="99.8899%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (10 samples, 0.08%)</title><rect x="99.6399%" y="901" width="0.0837%" height="15" fill="rgb(249,65,22)" fg:x="11898" fg:w="10"/><text x="99.8899%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10 samples, 0.08%)</title><rect x="99.6399%" y="885" width="0.0837%" height="15" fill="rgb(238,111,51)" fg:x="11898" fg:w="10"/><text x="99.8899%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (7 samples, 0.06%)</title><rect x="99.6650%" y="869" width="0.0586%" height="15" fill="rgb(250,118,22)" fg:x="11901" fg:w="7"/><text x="99.9150%" y="879.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (7 samples, 0.06%)</title><rect x="99.6650%" y="853" width="0.0586%" height="15" fill="rgb(234,84,26)" fg:x="11901" fg:w="7"/><text x="99.9150%" y="863.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (7 samples, 0.06%)</title><rect x="99.6650%" y="837" width="0.0586%" height="15" fill="rgb(243,172,12)" fg:x="11901" fg:w="7"/><text x="99.9150%" y="847.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (7 samples, 0.06%)</title><rect x="99.6650%" y="821" width="0.0586%" height="15" fill="rgb(236,150,49)" fg:x="11901" fg:w="7"/><text x="99.9150%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (7 samples, 0.06%)</title><rect x="99.6650%" y="805" width="0.0586%" height="15" fill="rgb(225,197,26)" fg:x="11901" fg:w="7"/><text x="99.9150%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.06%)</title><rect x="99.6650%" y="789" width="0.0586%" height="15" fill="rgb(214,17,42)" fg:x="11901" fg:w="7"/><text x="99.9150%" y="799.50"></text></g><g><title>pegasus_executor::reactor::do_task (25 samples, 0.21%)</title><rect x="99.5227%" y="1429" width="0.2094%" height="15" fill="rgb(224,165,40)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1439.50"></text></g><g><title>pegasus_executor::reactor::do_user_task (25 samples, 0.21%)</title><rect x="99.5227%" y="1413" width="0.2094%" height="15" fill="rgb(246,100,4)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1423.50"></text></g><g><title>std::panic::catch_unwind (25 samples, 0.21%)</title><rect x="99.5227%" y="1397" width="0.2094%" height="15" fill="rgb(222,103,0)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1407.50"></text></g><g><title>std::panicking::try (25 samples, 0.21%)</title><rect x="99.5227%" y="1381" width="0.2094%" height="15" fill="rgb(227,189,26)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1391.50"></text></g><g><title>std::panicking::try::do_call (25 samples, 0.21%)</title><rect x="99.5227%" y="1365" width="0.2094%" height="15" fill="rgb(214,202,17)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1375.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (25 samples, 0.21%)</title><rect x="99.5227%" y="1349" width="0.2094%" height="15" fill="rgb(229,111,3)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1359.50"></text></g><g><title>pegasus_executor::reactor::do_user_task::{{closure}} (25 samples, 0.21%)</title><rect x="99.5227%" y="1333" width="0.2094%" height="15" fill="rgb(229,172,15)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1343.50"></text></g><g><title>&lt;pegasus_executor::GeneralTask as pegasus_executor::Task&gt;::execute (25 samples, 0.21%)</title><rect x="99.5227%" y="1317" width="0.2094%" height="15" fill="rgb(230,224,35)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1327.50"></text></g><g><title>&lt;pegasus::worker::Worker&lt;D,T&gt; as pegasus_executor::Task&gt;::execute (25 samples, 0.21%)</title><rect x="99.5227%" y="1301" width="0.2094%" height="15" fill="rgb(251,141,6)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1311.50"></text></g><g><title>pegasus::worker::WorkerTask::execute (25 samples, 0.21%)</title><rect x="99.5227%" y="1285" width="0.2094%" height="15" fill="rgb(225,208,6)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1295.50"></text></g><g><title>pegasus::schedule::Schedule::step (25 samples, 0.21%)</title><rect x="99.5227%" y="1269" width="0.2094%" height="15" fill="rgb(246,181,16)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1279.50"></text></g><g><title>&lt;pegasus::schedule::strategies::WaterfallStrategy as pegasus::schedule::StepStrategy&gt;::make_step (25 samples, 0.21%)</title><rect x="99.5227%" y="1253" width="0.2094%" height="15" fill="rgb(227,129,36)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1263.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (25 samples, 0.21%)</title><rect x="99.5227%" y="1237" width="0.2094%" height="15" fill="rgb(248,117,24)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1247.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (25 samples, 0.21%)</title><rect x="99.5227%" y="1221" width="0.2094%" height="15" fill="rgb(214,185,35)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1231.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (25 samples, 0.21%)</title><rect x="99.5227%" y="1205" width="0.2094%" height="15" fill="rgb(236,150,34)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1215.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire (25 samples, 0.21%)</title><rect x="99.5227%" y="1189" width="0.2094%" height="15" fill="rgb(243,228,27)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1199.50"></text></g><g><title>pegasus::dataflow::Dataflow::try_fire (25 samples, 0.21%)</title><rect x="99.5227%" y="1173" width="0.2094%" height="15" fill="rgb(245,77,44)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1183.50"></text></g><g><title>pegasus::operator::Operator::fire (25 samples, 0.21%)</title><rect x="99.5227%" y="1157" width="0.2094%" height="15" fill="rgb(235,214,42)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1167.50"></text></g><g><title>pegasus::operator::Operator::fire_inner (25 samples, 0.21%)</title><rect x="99.5227%" y="1141" width="0.2094%" height="15" fill="rgb(221,74,3)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1151.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (25 samples, 0.21%)</title><rect x="99.5227%" y="1125" width="0.2094%" height="15" fill="rgb(206,121,29)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1135.50"></text></g><g><title>&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (25 samples, 0.21%)</title><rect x="99.5227%" y="1109" width="0.2094%" height="15" fill="rgb(249,131,53)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1119.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (25 samples, 0.21%)</title><rect x="99.5227%" y="1093" width="0.2094%" height="15" fill="rgb(236,170,29)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1103.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (25 samples, 0.21%)</title><rect x="99.5227%" y="1077" width="0.2094%" height="15" fill="rgb(247,96,15)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1087.50"></text></g><g><title>&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive (25 samples, 0.21%)</title><rect x="99.5227%" y="1061" width="0.2094%" height="15" fill="rgb(211,210,7)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1071.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}} (25 samples, 0.21%)</title><rect x="99.5227%" y="1045" width="0.2094%" height="15" fill="rgb(240,88,50)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1055.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch (25 samples, 0.21%)</title><rect x="99.5227%" y="1029" width="0.2094%" height="15" fill="rgb(209,229,26)" fg:x="11884" fg:w="25"/><text x="99.7727%" y="1039.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (11 samples, 0.09%)</title><rect x="99.6399%" y="1013" width="0.0921%" height="15" fill="rgb(210,68,23)" fg:x="11898" fg:w="11"/><text x="99.8899%" y="1023.50"></text></g><g><title>join_benchmark::g_benchmark1_composition::{{closure}}::{{closure}}::{{closure}} (11 samples, 0.09%)</title><rect x="99.6399%" y="997" width="0.0921%" height="15" fill="rgb(229,180,13)" fg:x="11898" fg:w="11"/><text x="99.8899%" y="1007.50"></text></g><g><title>graph_store::graph_db_impl::LargeGraphDB&lt;G,I,N,E&gt;::_get_adj_vertices (11 samples, 0.09%)</title><rect x="99.6399%" y="981" width="0.0921%" height="15" fill="rgb(236,53,44)" fg:x="11898" fg:w="11"/><text x="99.8899%" y="991.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire (2 samples, 0.02%)</title><rect x="99.7320%" y="1205" width="0.0167%" height="15" fill="rgb(244,214,29)" fg:x="11909" fg:w="2"/><text x="99.9820%" y="1215.50"></text></g><g><title>pegasus::dataflow::Dataflow::try_fire (2 samples, 0.02%)</title><rect x="99.7320%" y="1189" width="0.0167%" height="15" fill="rgb(220,75,29)" fg:x="11909" fg:w="2"/><text x="99.9820%" y="1199.50"></text></g><g><title>pegasus::operator::Operator::fire (2 samples, 0.02%)</title><rect x="99.7320%" y="1173" width="0.0167%" height="15" fill="rgb(214,183,37)" fg:x="11909" fg:w="2"/><text x="99.9820%" y="1183.50"></text></g><g><title>pegasus::operator::Operator::fire_inner (2 samples, 0.02%)</title><rect x="99.7320%" y="1157" width="0.0167%" height="15" fill="rgb(239,117,29)" fg:x="11909" fg:w="2"/><text x="99.9820%" y="1167.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (2 samples, 0.02%)</title><rect x="99.7320%" y="1141" width="0.0167%" height="15" fill="rgb(237,171,35)" fg:x="11909" fg:w="2"/><text x="99.9820%" y="1151.50"></text></g><g><title>&lt;pegasus::operator::DefaultNotifyOperator&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (2 samples, 0.02%)</title><rect x="99.7320%" y="1125" width="0.0167%" height="15" fill="rgb(229,178,53)" fg:x="11909" fg:w="2"/><text x="99.9820%" y="1135.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (2 samples, 0.02%)</title><rect x="99.7320%" y="1109" width="0.0167%" height="15" fill="rgb(210,102,19)" fg:x="11909" fg:w="2"/><text x="99.9820%" y="1119.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as pegasus::operator::OperatorCore&gt;::on_receive (2 samples, 0.02%)</title><rect x="99.7320%" y="1093" width="0.0167%" height="15" fill="rgb(235,127,22)" fg:x="11909" fg:w="2"/><text x="99.9820%" y="1103.50"></text></g><g><title>&lt;pegasus::operator::primitives::unary::UnaryOperator&lt;I,O,F&gt; as pegasus::operator::OperatorCore&gt;::on_receive (2 samples, 0.02%)</title><rect x="99.7320%" y="1077" width="0.0167%" height="15" fill="rgb(244,31,31)" fg:x="11909" fg:w="2"/><text x="99.9820%" y="1087.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="99.7320%" y="1061" width="0.0167%" height="15" fill="rgb(231,43,21)" fg:x="11909" fg:w="2"/><text x="99.9820%" y="1071.50"></text></g><g><title>pegasus::communication::input::session::InputSession&lt;D&gt;::for_each_batch (2 samples, 0.02%)</title><rect x="99.7320%" y="1045" width="0.0167%" height="15" fill="rgb(217,131,35)" fg:x="11909" fg:w="2"/><text x="99.9820%" y="1055.50"></text></g><g><title>pegasus::operator::concise::map::&lt;impl pegasus::api::concise::map::Map&lt;I&gt; for pegasus::stream::Stream&lt;I&gt;&gt;::flat_map::{{closure}}::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="99.7320%" y="1029" width="0.0167%" height="15" fill="rgb(221,149,4)" fg:x="11909" fg:w="2"/><text x="99.9820%" y="1039.50"></text></g><g><title>pegasus::communication::output::output::rob::OutputSession&lt;D&gt;::give_iterator (2 samples, 0.02%)</title><rect x="99.7320%" y="1013" width="0.0167%" height="15" fill="rgb(232,170,28)" fg:x="11909" fg:w="2"/><text x="99.9820%" y="1023.50"></text></g><g><title>[unknown] (10,469 samples, 87.67%)</title><rect x="12.0844%" y="1445" width="87.6727%" height="15" fill="rgb(238,56,10)" fg:x="1443" fg:w="10469"/><text x="12.3344%" y="1455.50">[unknown]</text></g><g><title>pegasus_executor::reactor::do_user_task (3 samples, 0.03%)</title><rect x="99.7320%" y="1429" width="0.0251%" height="15" fill="rgb(235,196,14)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1439.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.03%)</title><rect x="99.7320%" y="1413" width="0.0251%" height="15" fill="rgb(216,45,48)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1423.50"></text></g><g><title>std::panicking::try (3 samples, 0.03%)</title><rect x="99.7320%" y="1397" width="0.0251%" height="15" fill="rgb(238,213,17)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1407.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.03%)</title><rect x="99.7320%" y="1381" width="0.0251%" height="15" fill="rgb(212,13,2)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1391.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.03%)</title><rect x="99.7320%" y="1365" width="0.0251%" height="15" fill="rgb(240,114,20)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1375.50"></text></g><g><title>pegasus_executor::reactor::do_user_task::{{closure}} (3 samples, 0.03%)</title><rect x="99.7320%" y="1349" width="0.0251%" height="15" fill="rgb(228,41,40)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1359.50"></text></g><g><title>&lt;pegasus_executor::GeneralTask as pegasus_executor::Task&gt;::execute (3 samples, 0.03%)</title><rect x="99.7320%" y="1333" width="0.0251%" height="15" fill="rgb(244,132,35)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1343.50"></text></g><g><title>&lt;pegasus::worker::Worker&lt;D,T&gt; as pegasus_executor::Task&gt;::execute (3 samples, 0.03%)</title><rect x="99.7320%" y="1317" width="0.0251%" height="15" fill="rgb(253,189,4)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1327.50"></text></g><g><title>pegasus::worker::WorkerTask::execute (3 samples, 0.03%)</title><rect x="99.7320%" y="1301" width="0.0251%" height="15" fill="rgb(224,37,19)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1311.50"></text></g><g><title>pegasus::schedule::Schedule::step (3 samples, 0.03%)</title><rect x="99.7320%" y="1285" width="0.0251%" height="15" fill="rgb(235,223,18)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1295.50"></text></g><g><title>&lt;pegasus::schedule::strategies::WaterfallStrategy as pegasus::schedule::StepStrategy&gt;::make_step (3 samples, 0.03%)</title><rect x="99.7320%" y="1269" width="0.0251%" height="15" fill="rgb(235,163,25)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1279.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (3 samples, 0.03%)</title><rect x="99.7320%" y="1253" width="0.0251%" height="15" fill="rgb(217,145,28)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1263.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (3 samples, 0.03%)</title><rect x="99.7320%" y="1237" width="0.0251%" height="15" fill="rgb(223,223,32)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1247.50"></text></g><g><title>pegasus::schedule::strategies::WaterfallStrategy::fire_follows (3 samples, 0.03%)</title><rect x="99.7320%" y="1221" width="0.0251%" height="15" fill="rgb(227,189,39)" fg:x="11909" fg:w="3"/><text x="99.9820%" y="1231.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.7571%" y="1429" width="0.0419%" height="15" fill="rgb(248,10,22)" fg:x="11912" fg:w="5"/><text x="100.0071%" y="1439.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.7571%" y="1413" width="0.0419%" height="15" fill="rgb(248,46,39)" fg:x="11912" fg:w="5"/><text x="100.0071%" y="1423.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.7571%" y="1397" width="0.0419%" height="15" fill="rgb(248,113,48)" fg:x="11912" fg:w="5"/><text x="100.0071%" y="1407.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.7571%" y="1381" width="0.0419%" height="15" fill="rgb(245,16,25)" fg:x="11912" fg:w="5"/><text x="100.0071%" y="1391.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.7571%" y="1365" width="0.0419%" height="15" fill="rgb(249,152,16)" fg:x="11912" fg:w="5"/><text x="100.0071%" y="1375.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.7571%" y="1349" width="0.0419%" height="15" fill="rgb(250,16,1)" fg:x="11912" fg:w="5"/><text x="100.0071%" y="1359.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.7571%" y="1333" width="0.0419%" height="15" fill="rgb(249,138,3)" fg:x="11912" fg:w="5"/><text x="100.0071%" y="1343.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.7571%" y="1317" width="0.0419%" height="15" fill="rgb(227,71,41)" fg:x="11912" fg:w="5"/><text x="100.0071%" y="1327.50"></text></g><g><title>crossbeam_channel::context::Context::with (17 samples, 0.14%)</title><rect x="99.8074%" y="1157" width="0.1424%" height="15" fill="rgb(209,184,23)" fg:x="11918" fg:w="17"/><text x="100.0574%" y="1167.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17 samples, 0.14%)</title><rect x="99.8074%" y="1141" width="0.1424%" height="15" fill="rgb(223,215,31)" fg:x="11918" fg:w="17"/><text x="100.0574%" y="1151.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (17 samples, 0.14%)</title><rect x="99.8074%" y="1125" width="0.1424%" height="15" fill="rgb(210,146,28)" fg:x="11918" fg:w="17"/><text x="100.0574%" y="1135.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (17 samples, 0.14%)</title><rect x="99.8074%" y="1109" width="0.1424%" height="15" fill="rgb(209,183,41)" fg:x="11918" fg:w="17"/><text x="100.0574%" y="1119.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::{{closure}} (17 samples, 0.14%)</title><rect x="99.8074%" y="1093" width="0.1424%" height="15" fill="rgb(209,224,45)" fg:x="11918" fg:w="17"/><text x="100.0574%" y="1103.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (17 samples, 0.14%)</title><rect x="99.8074%" y="1077" width="0.1424%" height="15" fill="rgb(224,209,51)" fg:x="11918" fg:w="17"/><text x="100.0574%" y="1087.50"></text></g><g><title>std::thread::park_timeout (17 samples, 0.14%)</title><rect x="99.8074%" y="1061" width="0.1424%" height="15" fill="rgb(223,17,39)" fg:x="11918" fg:w="17"/><text x="100.0574%" y="1071.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park_timeout (17 samples, 0.14%)</title><rect x="99.8074%" y="1045" width="0.1424%" height="15" fill="rgb(234,204,37)" fg:x="11918" fg:w="17"/><text x="100.0574%" y="1055.50"></text></g><g><title>std::sys::unix::futex::futex_wait (16 samples, 0.13%)</title><rect x="99.8158%" y="1029" width="0.1340%" height="15" fill="rgb(236,120,5)" fg:x="11919" fg:w="16"/><text x="100.0658%" y="1039.50"></text></g><g><title>syscall (16 samples, 0.13%)</title><rect x="99.8158%" y="1013" width="0.1340%" height="15" fill="rgb(248,97,27)" fg:x="11919" fg:w="16"/><text x="100.0658%" y="1023.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="99.8158%" y="997" width="0.1340%" height="15" fill="rgb(240,66,17)" fg:x="11919" fg:w="16"/><text x="100.0658%" y="1007.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="99.8158%" y="981" width="0.1340%" height="15" fill="rgb(210,79,3)" fg:x="11919" fg:w="16"/><text x="100.0658%" y="991.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="99.8158%" y="965" width="0.1340%" height="15" fill="rgb(214,176,27)" fg:x="11919" fg:w="16"/><text x="100.0658%" y="975.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="99.8158%" y="949" width="0.1340%" height="15" fill="rgb(235,185,3)" fg:x="11919" fg:w="16"/><text x="100.0658%" y="959.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="99.8158%" y="933" width="0.1340%" height="15" fill="rgb(227,24,12)" fg:x="11919" fg:w="16"/><text x="100.0658%" y="943.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="99.8158%" y="917" width="0.1340%" height="15" fill="rgb(252,169,48)" fg:x="11919" fg:w="16"/><text x="100.0658%" y="927.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="99.8158%" y="901" width="0.1340%" height="15" fill="rgb(212,65,1)" fg:x="11919" fg:w="16"/><text x="100.0658%" y="911.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="99.8158%" y="885" width="0.1340%" height="15" fill="rgb(242,39,24)" fg:x="11919" fg:w="16"/><text x="100.0658%" y="895.50"></text></g><g><title>[unknown] (16 samples, 0.13%)</title><rect x="99.8158%" y="869" width="0.1340%" height="15" fill="rgb(249,32,23)" fg:x="11919" fg:w="16"/><text x="100.0658%" y="879.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="99.8241%" y="853" width="0.1256%" height="15" fill="rgb(251,195,23)" fg:x="11920" fg:w="15"/><text x="100.0741%" y="863.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="99.8241%" y="837" width="0.1256%" height="15" fill="rgb(236,174,8)" fg:x="11920" fg:w="15"/><text x="100.0741%" y="847.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="99.8241%" y="821" width="0.1256%" height="15" fill="rgb(220,197,8)" fg:x="11920" fg:w="15"/><text x="100.0741%" y="831.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="99.8241%" y="805" width="0.1256%" height="15" fill="rgb(240,108,37)" fg:x="11920" fg:w="15"/><text x="100.0741%" y="815.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="99.8241%" y="789" width="0.1256%" height="15" fill="rgb(232,176,24)" fg:x="11920" fg:w="15"/><text x="100.0741%" y="799.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (3 samples, 0.03%)</title><rect x="99.9498%" y="1141" width="0.0251%" height="15" fill="rgb(243,35,29)" fg:x="11935" fg:w="3"/><text x="100.1998%" y="1151.50"></text></g><g><title>core::hint::spin_loop (3 samples, 0.03%)</title><rect x="99.9498%" y="1125" width="0.0251%" height="15" fill="rgb(210,37,18)" fg:x="11935" fg:w="3"/><text x="100.1998%" y="1135.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (3 samples, 0.03%)</title><rect x="99.9498%" y="1109" width="0.0251%" height="15" fill="rgb(224,184,40)" fg:x="11935" fg:w="3"/><text x="100.1998%" y="1119.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (22 samples, 0.18%)</title><rect x="99.7990%" y="1397" width="0.1842%" height="15" fill="rgb(236,39,29)" fg:x="11917" fg:w="22"/><text x="100.0490%" y="1407.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (22 samples, 0.18%)</title><rect x="99.7990%" y="1381" width="0.1842%" height="15" fill="rgb(232,48,39)" fg:x="11917" fg:w="22"/><text x="100.0490%" y="1391.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (22 samples, 0.18%)</title><rect x="99.7990%" y="1365" width="0.1842%" height="15" fill="rgb(236,34,42)" fg:x="11917" fg:w="22"/><text x="100.0490%" y="1375.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (22 samples, 0.18%)</title><rect x="99.7990%" y="1349" width="0.1842%" height="15" fill="rgb(243,106,37)" fg:x="11917" fg:w="22"/><text x="100.0490%" y="1359.50"></text></g><g><title>std::panic::catch_unwind (22 samples, 0.18%)</title><rect x="99.7990%" y="1333" width="0.1842%" height="15" fill="rgb(218,96,6)" fg:x="11917" fg:w="22"/><text x="100.0490%" y="1343.50"></text></g><g><title>std::panicking::try (22 samples, 0.18%)</title><rect x="99.7990%" y="1317" width="0.1842%" height="15" fill="rgb(235,130,12)" fg:x="11917" fg:w="22"/><text x="100.0490%" y="1327.50"></text></g><g><title>std::panicking::try::do_call (22 samples, 0.18%)</title><rect x="99.7990%" y="1301" width="0.1842%" height="15" fill="rgb(231,95,0)" fg:x="11917" fg:w="22"/><text x="100.0490%" y="1311.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (22 samples, 0.18%)</title><rect x="99.7990%" y="1285" width="0.1842%" height="15" fill="rgb(228,12,23)" fg:x="11917" fg:w="22"/><text x="100.0490%" y="1295.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (22 samples, 0.18%)</title><rect x="99.7990%" y="1269" width="0.1842%" height="15" fill="rgb(216,12,1)" fg:x="11917" fg:w="22"/><text x="100.0490%" y="1279.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22 samples, 0.18%)</title><rect x="99.7990%" y="1253" width="0.1842%" height="15" fill="rgb(219,59,3)" fg:x="11917" fg:w="22"/><text x="100.0490%" y="1263.50"></text></g><g><title>pegasus_executor::reactor::start_executor_async::{{closure}} (21 samples, 0.18%)</title><rect x="99.8074%" y="1237" width="0.1759%" height="15" fill="rgb(215,208,46)" fg:x="11918" fg:w="21"/><text x="100.0574%" y="1247.50"></text></g><g><title>pegasus_executor::reactor::start_executor (21 samples, 0.18%)</title><rect x="99.8074%" y="1221" width="0.1759%" height="15" fill="rgb(254,224,29)" fg:x="11918" fg:w="21"/><text x="100.0574%" y="1231.50"></text></g><g><title>pegasus_executor::reactor::ExecutorRuntime::start (21 samples, 0.18%)</title><rect x="99.8074%" y="1205" width="0.1759%" height="15" fill="rgb(232,14,29)" fg:x="11918" fg:w="21"/><text x="100.0574%" y="1215.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv_timeout (21 samples, 0.18%)</title><rect x="99.8074%" y="1189" width="0.1759%" height="15" fill="rgb(208,45,52)" fg:x="11918" fg:w="21"/><text x="100.0574%" y="1199.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (21 samples, 0.18%)</title><rect x="99.8074%" y="1173" width="0.1759%" height="15" fill="rgb(234,191,28)" fg:x="11918" fg:w="21"/><text x="100.0574%" y="1183.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (4 samples, 0.03%)</title><rect x="99.9498%" y="1157" width="0.0335%" height="15" fill="rgb(244,67,43)" fg:x="11935" fg:w="4"/><text x="100.1998%" y="1167.50"></text></g><g><title>__GI___clone (28 samples, 0.23%)</title><rect x="99.7571%" y="1445" width="0.2345%" height="15" fill="rgb(236,189,24)" fg:x="11912" fg:w="28"/><text x="100.0071%" y="1455.50"></text></g><g><title>start_thread (23 samples, 0.19%)</title><rect x="99.7990%" y="1429" width="0.1926%" height="15" fill="rgb(239,214,33)" fg:x="11917" fg:w="23"/><text x="100.0490%" y="1439.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (23 samples, 0.19%)</title><rect x="99.7990%" y="1413" width="0.1926%" height="15" fill="rgb(226,176,41)" fg:x="11917" fg:w="23"/><text x="100.0490%" y="1423.50"></text></g><g><title>all (11,941 samples, 100%)</title><rect x="0.0000%" y="1477" width="100.0000%" height="15" fill="rgb(248,47,8)" fg:x="0" fg:w="11941"/><text x="0.2500%" y="1487.50"></text></g><g><title>reactor (10,853 samples, 90.89%)</title><rect x="9.1115%" y="1461" width="90.8885%" height="15" fill="rgb(218,81,44)" fg:x="1088" fg:w="10853"/><text x="9.3615%" y="1471.50">reactor</text></g></svg></svg>